
SensorsDaq.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c44  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  08002d54  08002d54  00012d54  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002d90  08002d90  00012d90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002d94  08002d94  00012d94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  20000000  08002d98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000015c  20000010  08002da8  00020010  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  2000016c  08002da8  0002016c  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  9 .debug_info   00014c24  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002d17  00000000  00000000  00034c5d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000059db  00000000  00000000  00037974  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000008a8  00000000  00000000  0003d350  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000ad8  00000000  00000000  0003dbf8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000057ce  00000000  00000000  0003e6d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0000361f  00000000  00000000  00043e9e  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  000474bd  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001a14  00000000  00000000  0004753c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000010 	.word	0x20000010
 800012c:	00000000 	.word	0x00000000
 8000130:	08002d3c 	.word	0x08002d3c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000014 	.word	0x20000014
 800014c:	08002d3c 	.word	0x08002d3c

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028e:	f1a4 0401 	sub.w	r4, r4, #1
 8000292:	d1e9      	bne.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f092 0f00 	teq	r2, #0
 800043a:	bf14      	ite	ne
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	4770      	bxeq	lr
 8000442:	b530      	push	{r4, r5, lr}
 8000444:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000448:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800044c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000450:	e720      	b.n	8000294 <__adddf3+0x138>
 8000452:	bf00      	nop

08000454 <__aeabi_ul2d>:
 8000454:	ea50 0201 	orrs.w	r2, r0, r1
 8000458:	bf08      	it	eq
 800045a:	4770      	bxeq	lr
 800045c:	b530      	push	{r4, r5, lr}
 800045e:	f04f 0500 	mov.w	r5, #0
 8000462:	e00a      	b.n	800047a <__aeabi_l2d+0x16>

08000464 <__aeabi_l2d>:
 8000464:	ea50 0201 	orrs.w	r2, r0, r1
 8000468:	bf08      	it	eq
 800046a:	4770      	bxeq	lr
 800046c:	b530      	push	{r4, r5, lr}
 800046e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000472:	d502      	bpl.n	800047a <__aeabi_l2d+0x16>
 8000474:	4240      	negs	r0, r0
 8000476:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000482:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000486:	f43f aedc 	beq.w	8000242 <__adddf3+0xe6>
 800048a:	f04f 0203 	mov.w	r2, #3
 800048e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000492:	bf18      	it	ne
 8000494:	3203      	addne	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a2:	f1c2 0320 	rsb	r3, r2, #32
 80004a6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004aa:	fa20 f002 	lsr.w	r0, r0, r2
 80004ae:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b2:	ea40 000e 	orr.w	r0, r0, lr
 80004b6:	fa21 f102 	lsr.w	r1, r1, r2
 80004ba:	4414      	add	r4, r2
 80004bc:	e6c1      	b.n	8000242 <__adddf3+0xe6>
 80004be:	bf00      	nop

080004c0 <__aeabi_dmul>:
 80004c0:	b570      	push	{r4, r5, r6, lr}
 80004c2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004c6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004ca:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004ce:	bf1d      	ittte	ne
 80004d0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004d4:	ea94 0f0c 	teqne	r4, ip
 80004d8:	ea95 0f0c 	teqne	r5, ip
 80004dc:	f000 f8de 	bleq	800069c <__aeabi_dmul+0x1dc>
 80004e0:	442c      	add	r4, r5
 80004e2:	ea81 0603 	eor.w	r6, r1, r3
 80004e6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004ea:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004ee:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004f2:	bf18      	it	ne
 80004f4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80004f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80004fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000500:	d038      	beq.n	8000574 <__aeabi_dmul+0xb4>
 8000502:	fba0 ce02 	umull	ip, lr, r0, r2
 8000506:	f04f 0500 	mov.w	r5, #0
 800050a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800050e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000512:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000516:	f04f 0600 	mov.w	r6, #0
 800051a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800051e:	f09c 0f00 	teq	ip, #0
 8000522:	bf18      	it	ne
 8000524:	f04e 0e01 	orrne.w	lr, lr, #1
 8000528:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800052c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000530:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000534:	d204      	bcs.n	8000540 <__aeabi_dmul+0x80>
 8000536:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800053a:	416d      	adcs	r5, r5
 800053c:	eb46 0606 	adc.w	r6, r6, r6
 8000540:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000544:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000548:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800054c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000550:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000554:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000558:	bf88      	it	hi
 800055a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800055e:	d81e      	bhi.n	800059e <__aeabi_dmul+0xde>
 8000560:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000564:	bf08      	it	eq
 8000566:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800056a:	f150 0000 	adcs.w	r0, r0, #0
 800056e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000572:	bd70      	pop	{r4, r5, r6, pc}
 8000574:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000578:	ea46 0101 	orr.w	r1, r6, r1
 800057c:	ea40 0002 	orr.w	r0, r0, r2
 8000580:	ea81 0103 	eor.w	r1, r1, r3
 8000584:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000588:	bfc2      	ittt	gt
 800058a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800058e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000592:	bd70      	popgt	{r4, r5, r6, pc}
 8000594:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000598:	f04f 0e00 	mov.w	lr, #0
 800059c:	3c01      	subs	r4, #1
 800059e:	f300 80ab 	bgt.w	80006f8 <__aeabi_dmul+0x238>
 80005a2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005a6:	bfde      	ittt	le
 80005a8:	2000      	movle	r0, #0
 80005aa:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005ae:	bd70      	pople	{r4, r5, r6, pc}
 80005b0:	f1c4 0400 	rsb	r4, r4, #0
 80005b4:	3c20      	subs	r4, #32
 80005b6:	da35      	bge.n	8000624 <__aeabi_dmul+0x164>
 80005b8:	340c      	adds	r4, #12
 80005ba:	dc1b      	bgt.n	80005f4 <__aeabi_dmul+0x134>
 80005bc:	f104 0414 	add.w	r4, r4, #20
 80005c0:	f1c4 0520 	rsb	r5, r4, #32
 80005c4:	fa00 f305 	lsl.w	r3, r0, r5
 80005c8:	fa20 f004 	lsr.w	r0, r0, r4
 80005cc:	fa01 f205 	lsl.w	r2, r1, r5
 80005d0:	ea40 0002 	orr.w	r0, r0, r2
 80005d4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005dc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e0:	fa21 f604 	lsr.w	r6, r1, r4
 80005e4:	eb42 0106 	adc.w	r1, r2, r6
 80005e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005ec:	bf08      	it	eq
 80005ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f1c4 040c 	rsb	r4, r4, #12
 80005f8:	f1c4 0520 	rsb	r5, r4, #32
 80005fc:	fa00 f304 	lsl.w	r3, r0, r4
 8000600:	fa20 f005 	lsr.w	r0, r0, r5
 8000604:	fa01 f204 	lsl.w	r2, r1, r4
 8000608:	ea40 0002 	orr.w	r0, r0, r2
 800060c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000610:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000614:	f141 0100 	adc.w	r1, r1, #0
 8000618:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800061c:	bf08      	it	eq
 800061e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000622:	bd70      	pop	{r4, r5, r6, pc}
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f205 	lsl.w	r2, r0, r5
 800062c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000630:	fa20 f304 	lsr.w	r3, r0, r4
 8000634:	fa01 f205 	lsl.w	r2, r1, r5
 8000638:	ea43 0302 	orr.w	r3, r3, r2
 800063c:	fa21 f004 	lsr.w	r0, r1, r4
 8000640:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000644:	fa21 f204 	lsr.w	r2, r1, r4
 8000648:	ea20 0002 	bic.w	r0, r0, r2
 800064c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000650:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000654:	bf08      	it	eq
 8000656:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f094 0f00 	teq	r4, #0
 8000660:	d10f      	bne.n	8000682 <__aeabi_dmul+0x1c2>
 8000662:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000666:	0040      	lsls	r0, r0, #1
 8000668:	eb41 0101 	adc.w	r1, r1, r1
 800066c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000670:	bf08      	it	eq
 8000672:	3c01      	subeq	r4, #1
 8000674:	d0f7      	beq.n	8000666 <__aeabi_dmul+0x1a6>
 8000676:	ea41 0106 	orr.w	r1, r1, r6
 800067a:	f095 0f00 	teq	r5, #0
 800067e:	bf18      	it	ne
 8000680:	4770      	bxne	lr
 8000682:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000686:	0052      	lsls	r2, r2, #1
 8000688:	eb43 0303 	adc.w	r3, r3, r3
 800068c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000690:	bf08      	it	eq
 8000692:	3d01      	subeq	r5, #1
 8000694:	d0f7      	beq.n	8000686 <__aeabi_dmul+0x1c6>
 8000696:	ea43 0306 	orr.w	r3, r3, r6
 800069a:	4770      	bx	lr
 800069c:	ea94 0f0c 	teq	r4, ip
 80006a0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006a4:	bf18      	it	ne
 80006a6:	ea95 0f0c 	teqne	r5, ip
 80006aa:	d00c      	beq.n	80006c6 <__aeabi_dmul+0x206>
 80006ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b0:	bf18      	it	ne
 80006b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006b6:	d1d1      	bne.n	800065c <__aeabi_dmul+0x19c>
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c0:	f04f 0000 	mov.w	r0, #0
 80006c4:	bd70      	pop	{r4, r5, r6, pc}
 80006c6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006ca:	bf06      	itte	eq
 80006cc:	4610      	moveq	r0, r2
 80006ce:	4619      	moveq	r1, r3
 80006d0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006d4:	d019      	beq.n	800070a <__aeabi_dmul+0x24a>
 80006d6:	ea94 0f0c 	teq	r4, ip
 80006da:	d102      	bne.n	80006e2 <__aeabi_dmul+0x222>
 80006dc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e0:	d113      	bne.n	800070a <__aeabi_dmul+0x24a>
 80006e2:	ea95 0f0c 	teq	r5, ip
 80006e6:	d105      	bne.n	80006f4 <__aeabi_dmul+0x234>
 80006e8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006ec:	bf1c      	itt	ne
 80006ee:	4610      	movne	r0, r2
 80006f0:	4619      	movne	r1, r3
 80006f2:	d10a      	bne.n	800070a <__aeabi_dmul+0x24a>
 80006f4:	ea81 0103 	eor.w	r1, r1, r3
 80006f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006fc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000700:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000704:	f04f 0000 	mov.w	r0, #0
 8000708:	bd70      	pop	{r4, r5, r6, pc}
 800070a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800070e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000712:	bd70      	pop	{r4, r5, r6, pc}

08000714 <__aeabi_ddiv>:
 8000714:	b570      	push	{r4, r5, r6, lr}
 8000716:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800071a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800071e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000722:	bf1d      	ittte	ne
 8000724:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000728:	ea94 0f0c 	teqne	r4, ip
 800072c:	ea95 0f0c 	teqne	r5, ip
 8000730:	f000 f8a7 	bleq	8000882 <__aeabi_ddiv+0x16e>
 8000734:	eba4 0405 	sub.w	r4, r4, r5
 8000738:	ea81 0e03 	eor.w	lr, r1, r3
 800073c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000740:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000744:	f000 8088 	beq.w	8000858 <__aeabi_ddiv+0x144>
 8000748:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800074c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000750:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000754:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000758:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800075c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000760:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000764:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000768:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800076c:	429d      	cmp	r5, r3
 800076e:	bf08      	it	eq
 8000770:	4296      	cmpeq	r6, r2
 8000772:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000776:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800077a:	d202      	bcs.n	8000782 <__aeabi_ddiv+0x6e>
 800077c:	085b      	lsrs	r3, r3, #1
 800077e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000782:	1ab6      	subs	r6, r6, r2
 8000784:	eb65 0503 	sbc.w	r5, r5, r3
 8000788:	085b      	lsrs	r3, r3, #1
 800078a:	ea4f 0232 	mov.w	r2, r2, rrx
 800078e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000792:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000796:	ebb6 0e02 	subs.w	lr, r6, r2
 800079a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800079e:	bf22      	ittt	cs
 80007a0:	1ab6      	subcs	r6, r6, r2
 80007a2:	4675      	movcs	r5, lr
 80007a4:	ea40 000c 	orrcs.w	r0, r0, ip
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f0:	ea55 0e06 	orrs.w	lr, r5, r6
 80007f4:	d018      	beq.n	8000828 <__aeabi_ddiv+0x114>
 80007f6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80007fa:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80007fe:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000802:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000806:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800080a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800080e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000812:	d1c0      	bne.n	8000796 <__aeabi_ddiv+0x82>
 8000814:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000818:	d10b      	bne.n	8000832 <__aeabi_ddiv+0x11e>
 800081a:	ea41 0100 	orr.w	r1, r1, r0
 800081e:	f04f 0000 	mov.w	r0, #0
 8000822:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000826:	e7b6      	b.n	8000796 <__aeabi_ddiv+0x82>
 8000828:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800082c:	bf04      	itt	eq
 800082e:	4301      	orreq	r1, r0
 8000830:	2000      	moveq	r0, #0
 8000832:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000836:	bf88      	it	hi
 8000838:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800083c:	f63f aeaf 	bhi.w	800059e <__aeabi_dmul+0xde>
 8000840:	ebb5 0c03 	subs.w	ip, r5, r3
 8000844:	bf04      	itt	eq
 8000846:	ebb6 0c02 	subseq.w	ip, r6, r2
 800084a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800084e:	f150 0000 	adcs.w	r0, r0, #0
 8000852:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000856:	bd70      	pop	{r4, r5, r6, pc}
 8000858:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800085c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000860:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000864:	bfc2      	ittt	gt
 8000866:	ebd4 050c 	rsbsgt	r5, r4, ip
 800086a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800086e:	bd70      	popgt	{r4, r5, r6, pc}
 8000870:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000874:	f04f 0e00 	mov.w	lr, #0
 8000878:	3c01      	subs	r4, #1
 800087a:	e690      	b.n	800059e <__aeabi_dmul+0xde>
 800087c:	ea45 0e06 	orr.w	lr, r5, r6
 8000880:	e68d      	b.n	800059e <__aeabi_dmul+0xde>
 8000882:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000886:	ea94 0f0c 	teq	r4, ip
 800088a:	bf08      	it	eq
 800088c:	ea95 0f0c 	teqeq	r5, ip
 8000890:	f43f af3b 	beq.w	800070a <__aeabi_dmul+0x24a>
 8000894:	ea94 0f0c 	teq	r4, ip
 8000898:	d10a      	bne.n	80008b0 <__aeabi_ddiv+0x19c>
 800089a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800089e:	f47f af34 	bne.w	800070a <__aeabi_dmul+0x24a>
 80008a2:	ea95 0f0c 	teq	r5, ip
 80008a6:	f47f af25 	bne.w	80006f4 <__aeabi_dmul+0x234>
 80008aa:	4610      	mov	r0, r2
 80008ac:	4619      	mov	r1, r3
 80008ae:	e72c      	b.n	800070a <__aeabi_dmul+0x24a>
 80008b0:	ea95 0f0c 	teq	r5, ip
 80008b4:	d106      	bne.n	80008c4 <__aeabi_ddiv+0x1b0>
 80008b6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008ba:	f43f aefd 	beq.w	80006b8 <__aeabi_dmul+0x1f8>
 80008be:	4610      	mov	r0, r2
 80008c0:	4619      	mov	r1, r3
 80008c2:	e722      	b.n	800070a <__aeabi_dmul+0x24a>
 80008c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008c8:	bf18      	it	ne
 80008ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008ce:	f47f aec5 	bne.w	800065c <__aeabi_dmul+0x19c>
 80008d2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008d6:	f47f af0d 	bne.w	80006f4 <__aeabi_dmul+0x234>
 80008da:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008de:	f47f aeeb 	bne.w	80006b8 <__aeabi_dmul+0x1f8>
 80008e2:	e712      	b.n	800070a <__aeabi_dmul+0x24a>

080008e4 <__aeabi_d2f>:
 80008e4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008e8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80008ec:	bf24      	itt	cs
 80008ee:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80008f2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80008f6:	d90d      	bls.n	8000914 <__aeabi_d2f+0x30>
 80008f8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80008fc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000900:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000904:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000908:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800090c:	bf08      	it	eq
 800090e:	f020 0001 	biceq.w	r0, r0, #1
 8000912:	4770      	bx	lr
 8000914:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000918:	d121      	bne.n	800095e <__aeabi_d2f+0x7a>
 800091a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800091e:	bfbc      	itt	lt
 8000920:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000924:	4770      	bxlt	lr
 8000926:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800092a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800092e:	f1c2 0218 	rsb	r2, r2, #24
 8000932:	f1c2 0c20 	rsb	ip, r2, #32
 8000936:	fa10 f30c 	lsls.w	r3, r0, ip
 800093a:	fa20 f002 	lsr.w	r0, r0, r2
 800093e:	bf18      	it	ne
 8000940:	f040 0001 	orrne.w	r0, r0, #1
 8000944:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000948:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800094c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000950:	ea40 000c 	orr.w	r0, r0, ip
 8000954:	fa23 f302 	lsr.w	r3, r3, r2
 8000958:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800095c:	e7cc      	b.n	80008f8 <__aeabi_d2f+0x14>
 800095e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000962:	d107      	bne.n	8000974 <__aeabi_d2f+0x90>
 8000964:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000968:	bf1e      	ittt	ne
 800096a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800096e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000972:	4770      	bxne	lr
 8000974:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000978:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800097c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000980:	4770      	bx	lr
 8000982:	bf00      	nop

08000984 <__aeabi_frsub>:
 8000984:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000988:	e002      	b.n	8000990 <__addsf3>
 800098a:	bf00      	nop

0800098c <__aeabi_fsub>:
 800098c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000990 <__addsf3>:
 8000990:	0042      	lsls	r2, r0, #1
 8000992:	bf1f      	itttt	ne
 8000994:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000998:	ea92 0f03 	teqne	r2, r3
 800099c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009a0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009a4:	d06a      	beq.n	8000a7c <__addsf3+0xec>
 80009a6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80009aa:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80009ae:	bfc1      	itttt	gt
 80009b0:	18d2      	addgt	r2, r2, r3
 80009b2:	4041      	eorgt	r1, r0
 80009b4:	4048      	eorgt	r0, r1
 80009b6:	4041      	eorgt	r1, r0
 80009b8:	bfb8      	it	lt
 80009ba:	425b      	neglt	r3, r3
 80009bc:	2b19      	cmp	r3, #25
 80009be:	bf88      	it	hi
 80009c0:	4770      	bxhi	lr
 80009c2:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80009c6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009ca:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80009ce:	bf18      	it	ne
 80009d0:	4240      	negne	r0, r0
 80009d2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009d6:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80009da:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80009de:	bf18      	it	ne
 80009e0:	4249      	negne	r1, r1
 80009e2:	ea92 0f03 	teq	r2, r3
 80009e6:	d03f      	beq.n	8000a68 <__addsf3+0xd8>
 80009e8:	f1a2 0201 	sub.w	r2, r2, #1
 80009ec:	fa41 fc03 	asr.w	ip, r1, r3
 80009f0:	eb10 000c 	adds.w	r0, r0, ip
 80009f4:	f1c3 0320 	rsb	r3, r3, #32
 80009f8:	fa01 f103 	lsl.w	r1, r1, r3
 80009fc:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a00:	d502      	bpl.n	8000a08 <__addsf3+0x78>
 8000a02:	4249      	negs	r1, r1
 8000a04:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a08:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a0c:	d313      	bcc.n	8000a36 <__addsf3+0xa6>
 8000a0e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a12:	d306      	bcc.n	8000a22 <__addsf3+0x92>
 8000a14:	0840      	lsrs	r0, r0, #1
 8000a16:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a1a:	f102 0201 	add.w	r2, r2, #1
 8000a1e:	2afe      	cmp	r2, #254	; 0xfe
 8000a20:	d251      	bcs.n	8000ac6 <__addsf3+0x136>
 8000a22:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000a26:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a2a:	bf08      	it	eq
 8000a2c:	f020 0001 	biceq.w	r0, r0, #1
 8000a30:	ea40 0003 	orr.w	r0, r0, r3
 8000a34:	4770      	bx	lr
 8000a36:	0049      	lsls	r1, r1, #1
 8000a38:	eb40 0000 	adc.w	r0, r0, r0
 8000a3c:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000a40:	f1a2 0201 	sub.w	r2, r2, #1
 8000a44:	d1ed      	bne.n	8000a22 <__addsf3+0x92>
 8000a46:	fab0 fc80 	clz	ip, r0
 8000a4a:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a4e:	ebb2 020c 	subs.w	r2, r2, ip
 8000a52:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a56:	bfaa      	itet	ge
 8000a58:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a5c:	4252      	neglt	r2, r2
 8000a5e:	4318      	orrge	r0, r3
 8000a60:	bfbc      	itt	lt
 8000a62:	40d0      	lsrlt	r0, r2
 8000a64:	4318      	orrlt	r0, r3
 8000a66:	4770      	bx	lr
 8000a68:	f092 0f00 	teq	r2, #0
 8000a6c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000a70:	bf06      	itte	eq
 8000a72:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000a76:	3201      	addeq	r2, #1
 8000a78:	3b01      	subne	r3, #1
 8000a7a:	e7b5      	b.n	80009e8 <__addsf3+0x58>
 8000a7c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a80:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a84:	bf18      	it	ne
 8000a86:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a8a:	d021      	beq.n	8000ad0 <__addsf3+0x140>
 8000a8c:	ea92 0f03 	teq	r2, r3
 8000a90:	d004      	beq.n	8000a9c <__addsf3+0x10c>
 8000a92:	f092 0f00 	teq	r2, #0
 8000a96:	bf08      	it	eq
 8000a98:	4608      	moveq	r0, r1
 8000a9a:	4770      	bx	lr
 8000a9c:	ea90 0f01 	teq	r0, r1
 8000aa0:	bf1c      	itt	ne
 8000aa2:	2000      	movne	r0, #0
 8000aa4:	4770      	bxne	lr
 8000aa6:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000aaa:	d104      	bne.n	8000ab6 <__addsf3+0x126>
 8000aac:	0040      	lsls	r0, r0, #1
 8000aae:	bf28      	it	cs
 8000ab0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000ab4:	4770      	bx	lr
 8000ab6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000aba:	bf3c      	itt	cc
 8000abc:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ac0:	4770      	bxcc	lr
 8000ac2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ac6:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ace:	4770      	bx	lr
 8000ad0:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ad4:	bf16      	itet	ne
 8000ad6:	4608      	movne	r0, r1
 8000ad8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000adc:	4601      	movne	r1, r0
 8000ade:	0242      	lsls	r2, r0, #9
 8000ae0:	bf06      	itte	eq
 8000ae2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000ae6:	ea90 0f01 	teqeq	r0, r1
 8000aea:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000aee:	4770      	bx	lr

08000af0 <__aeabi_ui2f>:
 8000af0:	f04f 0300 	mov.w	r3, #0
 8000af4:	e004      	b.n	8000b00 <__aeabi_i2f+0x8>
 8000af6:	bf00      	nop

08000af8 <__aeabi_i2f>:
 8000af8:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000afc:	bf48      	it	mi
 8000afe:	4240      	negmi	r0, r0
 8000b00:	ea5f 0c00 	movs.w	ip, r0
 8000b04:	bf08      	it	eq
 8000b06:	4770      	bxeq	lr
 8000b08:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b0c:	4601      	mov	r1, r0
 8000b0e:	f04f 0000 	mov.w	r0, #0
 8000b12:	e01c      	b.n	8000b4e <__aeabi_l2f+0x2a>

08000b14 <__aeabi_ul2f>:
 8000b14:	ea50 0201 	orrs.w	r2, r0, r1
 8000b18:	bf08      	it	eq
 8000b1a:	4770      	bxeq	lr
 8000b1c:	f04f 0300 	mov.w	r3, #0
 8000b20:	e00a      	b.n	8000b38 <__aeabi_l2f+0x14>
 8000b22:	bf00      	nop

08000b24 <__aeabi_l2f>:
 8000b24:	ea50 0201 	orrs.w	r2, r0, r1
 8000b28:	bf08      	it	eq
 8000b2a:	4770      	bxeq	lr
 8000b2c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000b30:	d502      	bpl.n	8000b38 <__aeabi_l2f+0x14>
 8000b32:	4240      	negs	r0, r0
 8000b34:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b38:	ea5f 0c01 	movs.w	ip, r1
 8000b3c:	bf02      	ittt	eq
 8000b3e:	4684      	moveq	ip, r0
 8000b40:	4601      	moveq	r1, r0
 8000b42:	2000      	moveq	r0, #0
 8000b44:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000b48:	bf08      	it	eq
 8000b4a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000b4e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000b52:	fabc f28c 	clz	r2, ip
 8000b56:	3a08      	subs	r2, #8
 8000b58:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b5c:	db10      	blt.n	8000b80 <__aeabi_l2f+0x5c>
 8000b5e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b62:	4463      	add	r3, ip
 8000b64:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b68:	f1c2 0220 	rsb	r2, r2, #32
 8000b6c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000b70:	fa20 f202 	lsr.w	r2, r0, r2
 8000b74:	eb43 0002 	adc.w	r0, r3, r2
 8000b78:	bf08      	it	eq
 8000b7a:	f020 0001 	biceq.w	r0, r0, #1
 8000b7e:	4770      	bx	lr
 8000b80:	f102 0220 	add.w	r2, r2, #32
 8000b84:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b88:	f1c2 0220 	rsb	r2, r2, #32
 8000b8c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000b90:	fa21 f202 	lsr.w	r2, r1, r2
 8000b94:	eb43 0002 	adc.w	r0, r3, r2
 8000b98:	bf08      	it	eq
 8000b9a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000b9e:	4770      	bx	lr

08000ba0 <__aeabi_fmul>:
 8000ba0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ba4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ba8:	bf1e      	ittt	ne
 8000baa:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000bae:	ea92 0f0c 	teqne	r2, ip
 8000bb2:	ea93 0f0c 	teqne	r3, ip
 8000bb6:	d06f      	beq.n	8000c98 <__aeabi_fmul+0xf8>
 8000bb8:	441a      	add	r2, r3
 8000bba:	ea80 0c01 	eor.w	ip, r0, r1
 8000bbe:	0240      	lsls	r0, r0, #9
 8000bc0:	bf18      	it	ne
 8000bc2:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000bc6:	d01e      	beq.n	8000c06 <__aeabi_fmul+0x66>
 8000bc8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000bcc:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000bd0:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000bd4:	fba0 3101 	umull	r3, r1, r0, r1
 8000bd8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000bdc:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000be0:	bf3e      	ittt	cc
 8000be2:	0049      	lslcc	r1, r1, #1
 8000be4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000be8:	005b      	lslcc	r3, r3, #1
 8000bea:	ea40 0001 	orr.w	r0, r0, r1
 8000bee:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000bf2:	2afd      	cmp	r2, #253	; 0xfd
 8000bf4:	d81d      	bhi.n	8000c32 <__aeabi_fmul+0x92>
 8000bf6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000bfa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bfe:	bf08      	it	eq
 8000c00:	f020 0001 	biceq.w	r0, r0, #1
 8000c04:	4770      	bx	lr
 8000c06:	f090 0f00 	teq	r0, #0
 8000c0a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000c0e:	bf08      	it	eq
 8000c10:	0249      	lsleq	r1, r1, #9
 8000c12:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c16:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c1a:	3a7f      	subs	r2, #127	; 0x7f
 8000c1c:	bfc2      	ittt	gt
 8000c1e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000c22:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c26:	4770      	bxgt	lr
 8000c28:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c2c:	f04f 0300 	mov.w	r3, #0
 8000c30:	3a01      	subs	r2, #1
 8000c32:	dc5d      	bgt.n	8000cf0 <__aeabi_fmul+0x150>
 8000c34:	f112 0f19 	cmn.w	r2, #25
 8000c38:	bfdc      	itt	le
 8000c3a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000c3e:	4770      	bxle	lr
 8000c40:	f1c2 0200 	rsb	r2, r2, #0
 8000c44:	0041      	lsls	r1, r0, #1
 8000c46:	fa21 f102 	lsr.w	r1, r1, r2
 8000c4a:	f1c2 0220 	rsb	r2, r2, #32
 8000c4e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c52:	ea5f 0031 	movs.w	r0, r1, rrx
 8000c56:	f140 0000 	adc.w	r0, r0, #0
 8000c5a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000c5e:	bf08      	it	eq
 8000c60:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c64:	4770      	bx	lr
 8000c66:	f092 0f00 	teq	r2, #0
 8000c6a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000c6e:	bf02      	ittt	eq
 8000c70:	0040      	lsleq	r0, r0, #1
 8000c72:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000c76:	3a01      	subeq	r2, #1
 8000c78:	d0f9      	beq.n	8000c6e <__aeabi_fmul+0xce>
 8000c7a:	ea40 000c 	orr.w	r0, r0, ip
 8000c7e:	f093 0f00 	teq	r3, #0
 8000c82:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c86:	bf02      	ittt	eq
 8000c88:	0049      	lsleq	r1, r1, #1
 8000c8a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000c8e:	3b01      	subeq	r3, #1
 8000c90:	d0f9      	beq.n	8000c86 <__aeabi_fmul+0xe6>
 8000c92:	ea41 010c 	orr.w	r1, r1, ip
 8000c96:	e78f      	b.n	8000bb8 <__aeabi_fmul+0x18>
 8000c98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000c9c:	ea92 0f0c 	teq	r2, ip
 8000ca0:	bf18      	it	ne
 8000ca2:	ea93 0f0c 	teqne	r3, ip
 8000ca6:	d00a      	beq.n	8000cbe <__aeabi_fmul+0x11e>
 8000ca8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000cac:	bf18      	it	ne
 8000cae:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000cb2:	d1d8      	bne.n	8000c66 <__aeabi_fmul+0xc6>
 8000cb4:	ea80 0001 	eor.w	r0, r0, r1
 8000cb8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000cbc:	4770      	bx	lr
 8000cbe:	f090 0f00 	teq	r0, #0
 8000cc2:	bf17      	itett	ne
 8000cc4:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000cc8:	4608      	moveq	r0, r1
 8000cca:	f091 0f00 	teqne	r1, #0
 8000cce:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000cd2:	d014      	beq.n	8000cfe <__aeabi_fmul+0x15e>
 8000cd4:	ea92 0f0c 	teq	r2, ip
 8000cd8:	d101      	bne.n	8000cde <__aeabi_fmul+0x13e>
 8000cda:	0242      	lsls	r2, r0, #9
 8000cdc:	d10f      	bne.n	8000cfe <__aeabi_fmul+0x15e>
 8000cde:	ea93 0f0c 	teq	r3, ip
 8000ce2:	d103      	bne.n	8000cec <__aeabi_fmul+0x14c>
 8000ce4:	024b      	lsls	r3, r1, #9
 8000ce6:	bf18      	it	ne
 8000ce8:	4608      	movne	r0, r1
 8000cea:	d108      	bne.n	8000cfe <__aeabi_fmul+0x15e>
 8000cec:	ea80 0001 	eor.w	r0, r0, r1
 8000cf0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000cf4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cf8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cfc:	4770      	bx	lr
 8000cfe:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d02:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_fdiv>:
 8000d08:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d0c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d10:	bf1e      	ittt	ne
 8000d12:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d16:	ea92 0f0c 	teqne	r2, ip
 8000d1a:	ea93 0f0c 	teqne	r3, ip
 8000d1e:	d069      	beq.n	8000df4 <__aeabi_fdiv+0xec>
 8000d20:	eba2 0203 	sub.w	r2, r2, r3
 8000d24:	ea80 0c01 	eor.w	ip, r0, r1
 8000d28:	0249      	lsls	r1, r1, #9
 8000d2a:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000d2e:	d037      	beq.n	8000da0 <__aeabi_fdiv+0x98>
 8000d30:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000d34:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000d38:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000d3c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d40:	428b      	cmp	r3, r1
 8000d42:	bf38      	it	cc
 8000d44:	005b      	lslcc	r3, r3, #1
 8000d46:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000d4a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	bf24      	itt	cs
 8000d52:	1a5b      	subcs	r3, r3, r1
 8000d54:	ea40 000c 	orrcs.w	r0, r0, ip
 8000d58:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000d5c:	bf24      	itt	cs
 8000d5e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000d62:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000d66:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000d6a:	bf24      	itt	cs
 8000d6c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000d70:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000d74:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000d78:	bf24      	itt	cs
 8000d7a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000d7e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000d82:	011b      	lsls	r3, r3, #4
 8000d84:	bf18      	it	ne
 8000d86:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000d8a:	d1e0      	bne.n	8000d4e <__aeabi_fdiv+0x46>
 8000d8c:	2afd      	cmp	r2, #253	; 0xfd
 8000d8e:	f63f af50 	bhi.w	8000c32 <__aeabi_fmul+0x92>
 8000d92:	428b      	cmp	r3, r1
 8000d94:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d98:	bf08      	it	eq
 8000d9a:	f020 0001 	biceq.w	r0, r0, #1
 8000d9e:	4770      	bx	lr
 8000da0:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000da4:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000da8:	327f      	adds	r2, #127	; 0x7f
 8000daa:	bfc2      	ittt	gt
 8000dac:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000db0:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000db4:	4770      	bxgt	lr
 8000db6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dba:	f04f 0300 	mov.w	r3, #0
 8000dbe:	3a01      	subs	r2, #1
 8000dc0:	e737      	b.n	8000c32 <__aeabi_fmul+0x92>
 8000dc2:	f092 0f00 	teq	r2, #0
 8000dc6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000dca:	bf02      	ittt	eq
 8000dcc:	0040      	lsleq	r0, r0, #1
 8000dce:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dd2:	3a01      	subeq	r2, #1
 8000dd4:	d0f9      	beq.n	8000dca <__aeabi_fdiv+0xc2>
 8000dd6:	ea40 000c 	orr.w	r0, r0, ip
 8000dda:	f093 0f00 	teq	r3, #0
 8000dde:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000de2:	bf02      	ittt	eq
 8000de4:	0049      	lsleq	r1, r1, #1
 8000de6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000dea:	3b01      	subeq	r3, #1
 8000dec:	d0f9      	beq.n	8000de2 <__aeabi_fdiv+0xda>
 8000dee:	ea41 010c 	orr.w	r1, r1, ip
 8000df2:	e795      	b.n	8000d20 <__aeabi_fdiv+0x18>
 8000df4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000df8:	ea92 0f0c 	teq	r2, ip
 8000dfc:	d108      	bne.n	8000e10 <__aeabi_fdiv+0x108>
 8000dfe:	0242      	lsls	r2, r0, #9
 8000e00:	f47f af7d 	bne.w	8000cfe <__aeabi_fmul+0x15e>
 8000e04:	ea93 0f0c 	teq	r3, ip
 8000e08:	f47f af70 	bne.w	8000cec <__aeabi_fmul+0x14c>
 8000e0c:	4608      	mov	r0, r1
 8000e0e:	e776      	b.n	8000cfe <__aeabi_fmul+0x15e>
 8000e10:	ea93 0f0c 	teq	r3, ip
 8000e14:	d104      	bne.n	8000e20 <__aeabi_fdiv+0x118>
 8000e16:	024b      	lsls	r3, r1, #9
 8000e18:	f43f af4c 	beq.w	8000cb4 <__aeabi_fmul+0x114>
 8000e1c:	4608      	mov	r0, r1
 8000e1e:	e76e      	b.n	8000cfe <__aeabi_fmul+0x15e>
 8000e20:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e24:	bf18      	it	ne
 8000e26:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e2a:	d1ca      	bne.n	8000dc2 <__aeabi_fdiv+0xba>
 8000e2c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000e30:	f47f af5c 	bne.w	8000cec <__aeabi_fmul+0x14c>
 8000e34:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000e38:	f47f af3c 	bne.w	8000cb4 <__aeabi_fmul+0x114>
 8000e3c:	e75f      	b.n	8000cfe <__aeabi_fmul+0x15e>
 8000e3e:	bf00      	nop

08000e40 <__aeabi_f2uiz>:
 8000e40:	0042      	lsls	r2, r0, #1
 8000e42:	d20e      	bcs.n	8000e62 <__aeabi_f2uiz+0x22>
 8000e44:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000e48:	d30b      	bcc.n	8000e62 <__aeabi_f2uiz+0x22>
 8000e4a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000e4e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000e52:	d409      	bmi.n	8000e68 <__aeabi_f2uiz+0x28>
 8000e54:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000e58:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000e5c:	fa23 f002 	lsr.w	r0, r3, r2
 8000e60:	4770      	bx	lr
 8000e62:	f04f 0000 	mov.w	r0, #0
 8000e66:	4770      	bx	lr
 8000e68:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000e6c:	d101      	bne.n	8000e72 <__aeabi_f2uiz+0x32>
 8000e6e:	0242      	lsls	r2, r0, #9
 8000e70:	d102      	bne.n	8000e78 <__aeabi_f2uiz+0x38>
 8000e72:	f04f 30ff 	mov.w	r0, #4294967295
 8000e76:	4770      	bx	lr
 8000e78:	f04f 0000 	mov.w	r0, #0
 8000e7c:	4770      	bx	lr
 8000e7e:	bf00      	nop

08000e80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e80:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e82:	4b0e      	ldr	r3, [pc, #56]	; (8000ebc <HAL_InitTick+0x3c>)
{
 8000e84:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e86:	7818      	ldrb	r0, [r3, #0]
 8000e88:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e8c:	fbb3 f3f0 	udiv	r3, r3, r0
 8000e90:	4a0b      	ldr	r2, [pc, #44]	; (8000ec0 <HAL_InitTick+0x40>)
 8000e92:	6810      	ldr	r0, [r2, #0]
 8000e94:	fbb0 f0f3 	udiv	r0, r0, r3
 8000e98:	f000 fab4 	bl	8001404 <HAL_SYSTICK_Config>
 8000e9c:	4604      	mov	r4, r0
 8000e9e:	b958      	cbnz	r0, 8000eb8 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ea0:	2d0f      	cmp	r5, #15
 8000ea2:	d809      	bhi.n	8000eb8 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ea4:	4602      	mov	r2, r0
 8000ea6:	4629      	mov	r1, r5
 8000ea8:	f04f 30ff 	mov.w	r0, #4294967295
 8000eac:	f000 fa6a 	bl	8001384 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000eb0:	4b04      	ldr	r3, [pc, #16]	; (8000ec4 <HAL_InitTick+0x44>)
 8000eb2:	4620      	mov	r0, r4
 8000eb4:	601d      	str	r5, [r3, #0]
 8000eb6:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000eb8:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000eba:	bd38      	pop	{r3, r4, r5, pc}
 8000ebc:	20000000 	.word	0x20000000
 8000ec0:	2000000c 	.word	0x2000000c
 8000ec4:	20000004 	.word	0x20000004

08000ec8 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ec8:	4a07      	ldr	r2, [pc, #28]	; (8000ee8 <HAL_Init+0x20>)
{
 8000eca:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ecc:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ece:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ed0:	f043 0310 	orr.w	r3, r3, #16
 8000ed4:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ed6:	f000 fa43 	bl	8001360 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000eda:	2000      	movs	r0, #0
 8000edc:	f7ff ffd0 	bl	8000e80 <HAL_InitTick>
  HAL_MspInit();
 8000ee0:	f001 fd48 	bl	8002974 <HAL_MspInit>
}
 8000ee4:	2000      	movs	r0, #0
 8000ee6:	bd08      	pop	{r3, pc}
 8000ee8:	40022000 	.word	0x40022000

08000eec <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000eec:	4a03      	ldr	r2, [pc, #12]	; (8000efc <HAL_IncTick+0x10>)
 8000eee:	4b04      	ldr	r3, [pc, #16]	; (8000f00 <HAL_IncTick+0x14>)
 8000ef0:	6811      	ldr	r1, [r2, #0]
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	440b      	add	r3, r1
 8000ef6:	6013      	str	r3, [r2, #0]
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop
 8000efc:	2000005c 	.word	0x2000005c
 8000f00:	20000000 	.word	0x20000000

08000f04 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000f04:	4b01      	ldr	r3, [pc, #4]	; (8000f0c <HAL_GetTick+0x8>)
 8000f06:	6818      	ldr	r0, [r3, #0]
}
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop
 8000f0c:	2000005c 	.word	0x2000005c

08000f10 <HAL_ADC_ConvCpltCallback>:
 8000f10:	4770      	bx	lr

08000f12 <ADC_DMAConvCplt>:
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000f12:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8000f14:	b510      	push	{r4, lr}
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8000f16:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000f18:	f012 0f50 	tst.w	r2, #80	; 0x50
 8000f1c:	d11b      	bne.n	8000f56 <ADC_DMAConvCplt+0x44>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000f1e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000f20:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000f24:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000f26:	681a      	ldr	r2, [r3, #0]
 8000f28:	6892      	ldr	r2, [r2, #8]
 8000f2a:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 8000f2e:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 8000f32:	d10c      	bne.n	8000f4e <ADC_DMAConvCplt+0x3c>
 8000f34:	68da      	ldr	r2, [r3, #12]
 8000f36:	b952      	cbnz	r2, 8000f4e <ADC_DMAConvCplt+0x3c>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000f38:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000f3a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000f3e:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000f40:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000f42:	04d2      	lsls	r2, r2, #19
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000f44:	bf5e      	ittt	pl
 8000f46:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
 8000f48:	f042 0201 	orrpl.w	r2, r2, #1
 8000f4c:	629a      	strpl	r2, [r3, #40]	; 0x28
      }
    }
    
    /* Conversion complete callback */
    HAL_ADC_ConvCpltCallback(hadc); 
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f7ff ffde 	bl	8000f10 <HAL_ADC_ConvCpltCallback>
 8000f54:	bd10      	pop	{r4, pc}
  }
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8000f56:	6a1b      	ldr	r3, [r3, #32]
  }
}
 8000f58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8000f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5e:	4718      	bx	r3

08000f60 <HAL_ADC_ConvHalfCpltCallback>:
 8000f60:	4770      	bx	lr

08000f62 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8000f62:	b508      	push	{r3, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  
  /* Half conversion callback */
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 8000f64:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8000f66:	f7ff fffb 	bl	8000f60 <HAL_ADC_ConvHalfCpltCallback>
 8000f6a:	bd08      	pop	{r3, pc}

08000f6c <HAL_ADC_ErrorCallback>:
{
 8000f6c:	4770      	bx	lr

08000f6e <ADC_DMAError>:
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000f6e:	6a40      	ldr	r0, [r0, #36]	; 0x24
{
 8000f70:	b508      	push	{r3, lr}
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8000f72:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000f74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f78:	6283      	str	r3, [r0, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8000f7a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8000f7c:	f043 0304 	orr.w	r3, r3, #4
 8000f80:	62c3      	str	r3, [r0, #44]	; 0x2c
  
  /* Error callback */
  HAL_ADC_ErrorCallback(hadc); 
 8000f82:	f7ff fff3 	bl	8000f6c <HAL_ADC_ErrorCallback>
 8000f86:	bd08      	pop	{r3, pc}

08000f88 <HAL_ADC_ConfigChannel>:
  __IO uint32_t wait_loop_index = 0U;
 8000f88:	2300      	movs	r3, #0
{ 
 8000f8a:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 8000f8c:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8000f8e:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8000f92:	2b01      	cmp	r3, #1
 8000f94:	d074      	beq.n	8001080 <HAL_ADC_ConfigChannel+0xf8>
 8000f96:	2301      	movs	r3, #1
  if (sConfig->Rank < 7U)
 8000f98:	684d      	ldr	r5, [r1, #4]
  __HAL_LOCK(hadc);
 8000f9a:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  if (sConfig->Rank < 7U)
 8000f9e:	2d06      	cmp	r5, #6
 8000fa0:	6802      	ldr	r2, [r0, #0]
 8000fa2:	ea4f 0385 	mov.w	r3, r5, lsl #2
 8000fa6:	680c      	ldr	r4, [r1, #0]
 8000fa8:	d825      	bhi.n	8000ff6 <HAL_ADC_ConfigChannel+0x6e>
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000faa:	442b      	add	r3, r5
 8000fac:	251f      	movs	r5, #31
 8000fae:	6b56      	ldr	r6, [r2, #52]	; 0x34
 8000fb0:	3b05      	subs	r3, #5
 8000fb2:	409d      	lsls	r5, r3
 8000fb4:	ea26 0505 	bic.w	r5, r6, r5
 8000fb8:	fa04 f303 	lsl.w	r3, r4, r3
 8000fbc:	432b      	orrs	r3, r5
 8000fbe:	6353      	str	r3, [r2, #52]	; 0x34
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000fc0:	2c09      	cmp	r4, #9
 8000fc2:	ea4f 0344 	mov.w	r3, r4, lsl #1
 8000fc6:	688d      	ldr	r5, [r1, #8]
 8000fc8:	d92f      	bls.n	800102a <HAL_ADC_ConfigChannel+0xa2>
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000fca:	2607      	movs	r6, #7
 8000fcc:	4423      	add	r3, r4
 8000fce:	68d1      	ldr	r1, [r2, #12]
 8000fd0:	3b1e      	subs	r3, #30
 8000fd2:	409e      	lsls	r6, r3
 8000fd4:	ea21 0106 	bic.w	r1, r1, r6
 8000fd8:	fa05 f303 	lsl.w	r3, r5, r3
 8000fdc:	430b      	orrs	r3, r1
 8000fde:	60d3      	str	r3, [r2, #12]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000fe0:	f1a4 0310 	sub.w	r3, r4, #16
 8000fe4:	2b01      	cmp	r3, #1
 8000fe6:	d92b      	bls.n	8001040 <HAL_ADC_ConfigChannel+0xb8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000fe8:	2300      	movs	r3, #0
  __HAL_UNLOCK(hadc);
 8000fea:	2200      	movs	r2, #0
 8000fec:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
}
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	b002      	add	sp, #8
 8000ff4:	bd70      	pop	{r4, r5, r6, pc}
  else if (sConfig->Rank < 13U)
 8000ff6:	2d0c      	cmp	r5, #12
 8000ff8:	d80b      	bhi.n	8001012 <HAL_ADC_ConfigChannel+0x8a>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000ffa:	442b      	add	r3, r5
 8000ffc:	251f      	movs	r5, #31
 8000ffe:	6b16      	ldr	r6, [r2, #48]	; 0x30
 8001000:	3b23      	subs	r3, #35	; 0x23
 8001002:	409d      	lsls	r5, r3
 8001004:	ea26 0505 	bic.w	r5, r6, r5
 8001008:	fa04 f303 	lsl.w	r3, r4, r3
 800100c:	432b      	orrs	r3, r5
 800100e:	6313      	str	r3, [r2, #48]	; 0x30
 8001010:	e7d6      	b.n	8000fc0 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001012:	442b      	add	r3, r5
 8001014:	251f      	movs	r5, #31
 8001016:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
 8001018:	3b41      	subs	r3, #65	; 0x41
 800101a:	409d      	lsls	r5, r3
 800101c:	ea26 0505 	bic.w	r5, r6, r5
 8001020:	fa04 f303 	lsl.w	r3, r4, r3
 8001024:	432b      	orrs	r3, r5
 8001026:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001028:	e7ca      	b.n	8000fc0 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800102a:	2607      	movs	r6, #7
 800102c:	6911      	ldr	r1, [r2, #16]
 800102e:	4423      	add	r3, r4
 8001030:	409e      	lsls	r6, r3
 8001032:	ea21 0106 	bic.w	r1, r1, r6
 8001036:	fa05 f303 	lsl.w	r3, r5, r3
 800103a:	430b      	orrs	r3, r1
 800103c:	6113      	str	r3, [r2, #16]
 800103e:	e7cf      	b.n	8000fe0 <HAL_ADC_ConfigChannel+0x58>
    if (hadc->Instance == ADC1)
 8001040:	4b10      	ldr	r3, [pc, #64]	; (8001084 <HAL_ADC_ConfigChannel+0xfc>)
 8001042:	429a      	cmp	r2, r3
 8001044:	d116      	bne.n	8001074 <HAL_ADC_ConfigChannel+0xec>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001046:	6893      	ldr	r3, [r2, #8]
 8001048:	021b      	lsls	r3, r3, #8
 800104a:	d4cd      	bmi.n	8000fe8 <HAL_ADC_ConfigChannel+0x60>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800104c:	6893      	ldr	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800104e:	2c10      	cmp	r4, #16
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001050:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001054:	6093      	str	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001056:	d1c7      	bne.n	8000fe8 <HAL_ADC_ConfigChannel+0x60>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001058:	4b0b      	ldr	r3, [pc, #44]	; (8001088 <HAL_ADC_ConfigChannel+0x100>)
 800105a:	4a0c      	ldr	r2, [pc, #48]	; (800108c <HAL_ADC_ConfigChannel+0x104>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	fbb3 f2f2 	udiv	r2, r3, r2
 8001062:	230a      	movs	r3, #10
 8001064:	4353      	muls	r3, r2
            wait_loop_index--;
 8001066:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8001068:	9b01      	ldr	r3, [sp, #4]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d0bc      	beq.n	8000fe8 <HAL_ADC_ConfigChannel+0x60>
            wait_loop_index--;
 800106e:	9b01      	ldr	r3, [sp, #4]
 8001070:	3b01      	subs	r3, #1
 8001072:	e7f8      	b.n	8001066 <HAL_ADC_ConfigChannel+0xde>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001074:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001076:	f043 0320 	orr.w	r3, r3, #32
 800107a:	6283      	str	r3, [r0, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 800107c:	2301      	movs	r3, #1
 800107e:	e7b4      	b.n	8000fea <HAL_ADC_ConfigChannel+0x62>
  __HAL_LOCK(hadc);
 8001080:	2302      	movs	r3, #2
 8001082:	e7b5      	b.n	8000ff0 <HAL_ADC_ConfigChannel+0x68>
 8001084:	40012400 	.word	0x40012400
 8001088:	2000000c 	.word	0x2000000c
 800108c:	000f4240 	.word	0x000f4240

08001090 <ADC_Enable>:
  __IO uint32_t wait_loop_index = 0U;
 8001090:	2300      	movs	r3, #0
{
 8001092:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 8001094:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001096:	6803      	ldr	r3, [r0, #0]
{
 8001098:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 800109a:	689a      	ldr	r2, [r3, #8]
 800109c:	07d2      	lsls	r2, r2, #31
 800109e:	d502      	bpl.n	80010a6 <ADC_Enable+0x16>
  return HAL_OK;
 80010a0:	2000      	movs	r0, #0
}
 80010a2:	b002      	add	sp, #8
 80010a4:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_ADC_ENABLE(hadc);
 80010a6:	689a      	ldr	r2, [r3, #8]
 80010a8:	f042 0201 	orr.w	r2, r2, #1
 80010ac:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80010ae:	4b12      	ldr	r3, [pc, #72]	; (80010f8 <ADC_Enable+0x68>)
 80010b0:	4a12      	ldr	r2, [pc, #72]	; (80010fc <ADC_Enable+0x6c>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	fbb3 f3f2 	udiv	r3, r3, r2
      wait_loop_index--;
 80010b8:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 80010ba:	9b01      	ldr	r3, [sp, #4]
 80010bc:	b9c3      	cbnz	r3, 80010f0 <ADC_Enable+0x60>
    tickstart = HAL_GetTick();
 80010be:	f7ff ff21 	bl	8000f04 <HAL_GetTick>
 80010c2:	4606      	mov	r6, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 80010c4:	6823      	ldr	r3, [r4, #0]
 80010c6:	689d      	ldr	r5, [r3, #8]
 80010c8:	f015 0501 	ands.w	r5, r5, #1
 80010cc:	d1e8      	bne.n	80010a0 <ADC_Enable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80010ce:	f7ff ff19 	bl	8000f04 <HAL_GetTick>
 80010d2:	1b80      	subs	r0, r0, r6
 80010d4:	2802      	cmp	r0, #2
 80010d6:	d9f5      	bls.n	80010c4 <ADC_Enable+0x34>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80010d8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        __HAL_UNLOCK(hadc);
 80010da:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80010de:	f043 0310 	orr.w	r3, r3, #16
 80010e2:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010e4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
        __HAL_UNLOCK(hadc);
 80010e6:	2001      	movs	r0, #1
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010e8:	f043 0301 	orr.w	r3, r3, #1
 80010ec:	62e3      	str	r3, [r4, #44]	; 0x2c
 80010ee:	e7d8      	b.n	80010a2 <ADC_Enable+0x12>
      wait_loop_index--;
 80010f0:	9b01      	ldr	r3, [sp, #4]
 80010f2:	3b01      	subs	r3, #1
 80010f4:	e7e0      	b.n	80010b8 <ADC_Enable+0x28>
 80010f6:	bf00      	nop
 80010f8:	2000000c 	.word	0x2000000c
 80010fc:	000f4240 	.word	0x000f4240

08001100 <HAL_ADC_Start_DMA>:
{
 8001100:	e92d 41d8 	stmdb	sp!, {r3, r4, r6, r7, r8, lr}
 8001104:	4690      	mov	r8, r2
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001106:	4b40      	ldr	r3, [pc, #256]	; (8001208 <HAL_ADC_Start_DMA+0x108>)
 8001108:	6802      	ldr	r2, [r0, #0]
{
 800110a:	4604      	mov	r4, r0
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 800110c:	429a      	cmp	r2, r3
{
 800110e:	460f      	mov	r7, r1
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001110:	d002      	beq.n	8001118 <HAL_ADC_Start_DMA+0x18>
 8001112:	493e      	ldr	r1, [pc, #248]	; (800120c <HAL_ADC_Start_DMA+0x10c>)
 8001114:	428a      	cmp	r2, r1
 8001116:	d103      	bne.n	8001120 <HAL_ADC_Start_DMA+0x20>
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 800111e:	d16e      	bne.n	80011fe <HAL_ADC_Start_DMA+0xfe>
    __HAL_LOCK(hadc);
 8001120:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8001124:	2b01      	cmp	r3, #1
 8001126:	d06c      	beq.n	8001202 <HAL_ADC_Start_DMA+0x102>
 8001128:	2301      	movs	r3, #1
    tmp_hal_status = ADC_Enable(hadc);
 800112a:	4620      	mov	r0, r4
    __HAL_LOCK(hadc);
 800112c:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    tmp_hal_status = ADC_Enable(hadc);
 8001130:	f7ff ffae 	bl	8001090 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8001134:	4606      	mov	r6, r0
 8001136:	2800      	cmp	r0, #0
 8001138:	d15d      	bne.n	80011f6 <HAL_ADC_Start_DMA+0xf6>
      ADC_STATE_CLR_SET(hadc->State,
 800113a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800113c:	6821      	ldr	r1, [r4, #0]
      ADC_STATE_CLR_SET(hadc->State,
 800113e:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001142:	4b32      	ldr	r3, [pc, #200]	; (800120c <HAL_ADC_Start_DMA+0x10c>)
      ADC_STATE_CLR_SET(hadc->State,
 8001144:	f020 0001 	bic.w	r0, r0, #1
 8001148:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800114c:	4299      	cmp	r1, r3
      ADC_STATE_CLR_SET(hadc->State,
 800114e:	62a0      	str	r0, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001150:	d104      	bne.n	800115c <HAL_ADC_Start_DMA+0x5c>
 8001152:	4a2d      	ldr	r2, [pc, #180]	; (8001208 <HAL_ADC_Start_DMA+0x108>)
 8001154:	6853      	ldr	r3, [r2, #4]
 8001156:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 800115a:	d13e      	bne.n	80011da <HAL_ADC_Start_DMA+0xda>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800115c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800115e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001162:	62a3      	str	r3, [r4, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001164:	684b      	ldr	r3, [r1, #4]
 8001166:	055a      	lsls	r2, r3, #21
 8001168:	d505      	bpl.n	8001176 <HAL_ADC_Start_DMA+0x76>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800116a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800116c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001170:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001174:	62a3      	str	r3, [r4, #40]	; 0x28
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001176:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001178:	6a20      	ldr	r0, [r4, #32]
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800117a:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800117e:	bf18      	it	ne
 8001180:	6ae3      	ldrne	r3, [r4, #44]	; 0x2c
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001182:	463a      	mov	r2, r7
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001184:	bf18      	it	ne
 8001186:	f023 0306 	bicne.w	r3, r3, #6
        ADC_CLEAR_ERRORCODE(hadc);
 800118a:	62e3      	str	r3, [r4, #44]	; 0x2c
      __HAL_UNLOCK(hadc);
 800118c:	2300      	movs	r3, #0
 800118e:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001192:	4b1f      	ldr	r3, [pc, #124]	; (8001210 <HAL_ADC_Start_DMA+0x110>)
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001194:	314c      	adds	r1, #76	; 0x4c
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001196:	6283      	str	r3, [r0, #40]	; 0x28
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001198:	4b1e      	ldr	r3, [pc, #120]	; (8001214 <HAL_ADC_Start_DMA+0x114>)
 800119a:	62c3      	str	r3, [r0, #44]	; 0x2c
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800119c:	4b1e      	ldr	r3, [pc, #120]	; (8001218 <HAL_ADC_Start_DMA+0x118>)
 800119e:	6303      	str	r3, [r0, #48]	; 0x30
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80011a0:	f06f 0302 	mvn.w	r3, #2
 80011a4:	f841 3c4c 	str.w	r3, [r1, #-76]
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80011a8:	f851 3c44 	ldr.w	r3, [r1, #-68]
 80011ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011b0:	f841 3c44 	str.w	r3, [r1, #-68]
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80011b4:	4643      	mov	r3, r8
 80011b6:	f000 f981 	bl	80014bc <HAL_DMA_Start_IT>
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 80011ba:	6823      	ldr	r3, [r4, #0]
 80011bc:	689a      	ldr	r2, [r3, #8]
 80011be:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 80011c2:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80011c6:	689a      	ldr	r2, [r3, #8]
 80011c8:	bf0c      	ite	eq
 80011ca:	f442 02a0 	orreq.w	r2, r2, #5242880	; 0x500000
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80011ce:	f442 1280 	orrne.w	r2, r2, #1048576	; 0x100000
 80011d2:	609a      	str	r2, [r3, #8]
}
 80011d4:	4630      	mov	r0, r6
 80011d6:	e8bd 81d8 	ldmia.w	sp!, {r3, r4, r6, r7, r8, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80011da:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80011dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80011e0:	62a3      	str	r3, [r4, #40]	; 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80011e2:	6853      	ldr	r3, [r2, #4]
 80011e4:	055b      	lsls	r3, r3, #21
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80011e6:	bf41      	itttt	mi
 80011e8:	6aa0      	ldrmi	r0, [r4, #40]	; 0x28
 80011ea:	f420 5040 	bicmi.w	r0, r0, #12288	; 0x3000
 80011ee:	f440 5080 	orrmi.w	r0, r0, #4096	; 0x1000
 80011f2:	62a0      	strmi	r0, [r4, #40]	; 0x28
 80011f4:	e7bf      	b.n	8001176 <HAL_ADC_Start_DMA+0x76>
      __HAL_UNLOCK(hadc);
 80011f6:	2300      	movs	r3, #0
 80011f8:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 80011fc:	e7ea      	b.n	80011d4 <HAL_ADC_Start_DMA+0xd4>
    tmp_hal_status = HAL_ERROR;
 80011fe:	2601      	movs	r6, #1
 8001200:	e7e8      	b.n	80011d4 <HAL_ADC_Start_DMA+0xd4>
    __HAL_LOCK(hadc);
 8001202:	2602      	movs	r6, #2
 8001204:	e7e6      	b.n	80011d4 <HAL_ADC_Start_DMA+0xd4>
 8001206:	bf00      	nop
 8001208:	40012400 	.word	0x40012400
 800120c:	40012800 	.word	0x40012800
 8001210:	08000f13 	.word	0x08000f13
 8001214:	08000f63 	.word	0x08000f63
 8001218:	08000f6f 	.word	0x08000f6f

0800121c <ADC_ConversionStop_Disable>:
{
 800121c:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) != RESET)
 800121e:	6803      	ldr	r3, [r0, #0]
{
 8001220:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001222:	689a      	ldr	r2, [r3, #8]
 8001224:	07d2      	lsls	r2, r2, #31
 8001226:	d401      	bmi.n	800122c <ADC_ConversionStop_Disable+0x10>
  return HAL_OK;
 8001228:	2000      	movs	r0, #0
 800122a:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_DISABLE(hadc);
 800122c:	689a      	ldr	r2, [r3, #8]
 800122e:	f022 0201 	bic.w	r2, r2, #1
 8001232:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8001234:	f7ff fe66 	bl	8000f04 <HAL_GetTick>
 8001238:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 800123a:	6823      	ldr	r3, [r4, #0]
 800123c:	689b      	ldr	r3, [r3, #8]
 800123e:	07db      	lsls	r3, r3, #31
 8001240:	d5f2      	bpl.n	8001228 <ADC_ConversionStop_Disable+0xc>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001242:	f7ff fe5f 	bl	8000f04 <HAL_GetTick>
 8001246:	1b40      	subs	r0, r0, r5
 8001248:	2802      	cmp	r0, #2
 800124a:	d9f6      	bls.n	800123a <ADC_ConversionStop_Disable+0x1e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800124c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800124e:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001250:	f043 0310 	orr.w	r3, r3, #16
 8001254:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001256:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001258:	f043 0301 	orr.w	r3, r3, #1
 800125c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800125e:	bd38      	pop	{r3, r4, r5, pc}

08001260 <HAL_ADC_Init>:
{
 8001260:	b570      	push	{r4, r5, r6, lr}
  if(hadc == NULL)
 8001262:	4604      	mov	r4, r0
 8001264:	2800      	cmp	r0, #0
 8001266:	d071      	beq.n	800134c <HAL_ADC_Init+0xec>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001268:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800126a:	b923      	cbnz	r3, 8001276 <HAL_ADC_Init+0x16>
    ADC_CLEAR_ERRORCODE(hadc);
 800126c:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 800126e:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 8001272:	f001 f8fb 	bl	800246c <HAL_ADC_MspInit>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001276:	4620      	mov	r0, r4
 8001278:	f7ff ffd0 	bl	800121c <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800127c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800127e:	f013 0f10 	tst.w	r3, #16
    ADC_STATE_CLR_SET(hadc->State,
 8001282:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001284:	d164      	bne.n	8001350 <HAL_ADC_Init+0xf0>
 8001286:	2800      	cmp	r0, #0
 8001288:	d162      	bne.n	8001350 <HAL_ADC_Init+0xf0>
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 800128a:	69e1      	ldr	r1, [r4, #28]
    ADC_STATE_CLR_SET(hadc->State,
 800128c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 8001290:	6862      	ldr	r2, [r4, #4]
    ADC_STATE_CLR_SET(hadc->State,
 8001292:	f023 0302 	bic.w	r3, r3, #2
 8001296:	f043 0302 	orr.w	r3, r3, #2
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 800129a:	430a      	orrs	r2, r1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800129c:	68a1      	ldr	r1, [r4, #8]
    ADC_STATE_CLR_SET(hadc->State,
 800129e:	62a3      	str	r3, [r4, #40]	; 0x28
                ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode)   );
 80012a0:	68e3      	ldr	r3, [r4, #12]
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80012a2:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 80012a6:	ea42 0243 	orr.w	r2, r2, r3, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80012aa:	d038      	beq.n	800131e <HAL_ADC_Init+0xbe>
 80012ac:	2901      	cmp	r1, #1
 80012ae:	bf14      	ite	ne
 80012b0:	4606      	movne	r6, r0
 80012b2:	f44f 7680 	moveq.w	r6, #256	; 0x100
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80012b6:	6965      	ldr	r5, [r4, #20]
 80012b8:	2d01      	cmp	r5, #1
 80012ba:	d107      	bne.n	80012cc <HAL_ADC_Init+0x6c>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d130      	bne.n	8001322 <HAL_ADC_Init+0xc2>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80012c0:	69a3      	ldr	r3, [r4, #24]
 80012c2:	3b01      	subs	r3, #1
 80012c4:	ea46 3543 	orr.w	r5, r6, r3, lsl #13
 80012c8:	f445 6600 	orr.w	r6, r5, #2048	; 0x800
      MODIFY_REG(hadc->Instance->CR1,
 80012cc:	6823      	ldr	r3, [r4, #0]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80012ce:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
      MODIFY_REG(hadc->Instance->CR1,
 80012d2:	685d      	ldr	r5, [r3, #4]
 80012d4:	f425 4569 	bic.w	r5, r5, #59648	; 0xe900
 80012d8:	ea45 0506 	orr.w	r5, r5, r6
 80012dc:	605d      	str	r5, [r3, #4]
      MODIFY_REG(hadc->Instance->CR2,
 80012de:	689e      	ldr	r6, [r3, #8]
 80012e0:	4d1d      	ldr	r5, [pc, #116]	; (8001358 <HAL_ADC_Init+0xf8>)
 80012e2:	ea05 0506 	and.w	r5, r5, r6
 80012e6:	ea45 0502 	orr.w	r5, r5, r2
 80012ea:	609d      	str	r5, [r3, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80012ec:	d001      	beq.n	80012f2 <HAL_ADC_Init+0x92>
 80012ee:	2901      	cmp	r1, #1
 80012f0:	d120      	bne.n	8001334 <HAL_ADC_Init+0xd4>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80012f2:	6921      	ldr	r1, [r4, #16]
 80012f4:	3901      	subs	r1, #1
 80012f6:	0509      	lsls	r1, r1, #20
    MODIFY_REG(hadc->Instance->SQR1,
 80012f8:	6add      	ldr	r5, [r3, #44]	; 0x2c
 80012fa:	f425 0570 	bic.w	r5, r5, #15728640	; 0xf00000
 80012fe:	4329      	orrs	r1, r5
 8001300:	62d9      	str	r1, [r3, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001302:	6899      	ldr	r1, [r3, #8]
 8001304:	4b15      	ldr	r3, [pc, #84]	; (800135c <HAL_ADC_Init+0xfc>)
 8001306:	400b      	ands	r3, r1
 8001308:	429a      	cmp	r2, r3
 800130a:	d115      	bne.n	8001338 <HAL_ADC_Init+0xd8>
      ADC_CLEAR_ERRORCODE(hadc);
 800130c:	2300      	movs	r3, #0
 800130e:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 8001310:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001312:	f023 0303 	bic.w	r3, r3, #3
 8001316:	f043 0301 	orr.w	r3, r3, #1
 800131a:	62a3      	str	r3, [r4, #40]	; 0x28
 800131c:	bd70      	pop	{r4, r5, r6, pc}
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800131e:	460e      	mov	r6, r1
 8001320:	e7c9      	b.n	80012b6 <HAL_ADC_Init+0x56>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001322:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001324:	f043 0320 	orr.w	r3, r3, #32
 8001328:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800132a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800132c:	f043 0301 	orr.w	r3, r3, #1
 8001330:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001332:	e7cb      	b.n	80012cc <HAL_ADC_Init+0x6c>
  uint32_t tmp_sqr1 = 0U;
 8001334:	2100      	movs	r1, #0
 8001336:	e7df      	b.n	80012f8 <HAL_ADC_Init+0x98>
      ADC_STATE_CLR_SET(hadc->State,
 8001338:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800133a:	f023 0312 	bic.w	r3, r3, #18
 800133e:	f043 0310 	orr.w	r3, r3, #16
 8001342:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001344:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001346:	f043 0301 	orr.w	r3, r3, #1
 800134a:	62e3      	str	r3, [r4, #44]	; 0x2c
    return HAL_ERROR;
 800134c:	2001      	movs	r0, #1
}
 800134e:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001350:	f043 0310 	orr.w	r3, r3, #16
 8001354:	62a3      	str	r3, [r4, #40]	; 0x28
 8001356:	e7f9      	b.n	800134c <HAL_ADC_Init+0xec>
 8001358:	ffe1f7fd 	.word	0xffe1f7fd
 800135c:	ff1f0efe 	.word	0xff1f0efe

08001360 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001360:	4a07      	ldr	r2, [pc, #28]	; (8001380 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001362:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001364:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001366:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800136a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800136e:	041b      	lsls	r3, r3, #16
 8001370:	0c1b      	lsrs	r3, r3, #16
 8001372:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001376:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 800137a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800137c:	60d3      	str	r3, [r2, #12]
 800137e:	4770      	bx	lr
 8001380:	e000ed00 	.word	0xe000ed00

08001384 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001384:	4b17      	ldr	r3, [pc, #92]	; (80013e4 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001386:	b530      	push	{r4, r5, lr}
 8001388:	68dc      	ldr	r4, [r3, #12]
 800138a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800138e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001392:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001394:	2b04      	cmp	r3, #4
 8001396:	bf28      	it	cs
 8001398:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800139a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800139c:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013a0:	bf98      	it	ls
 80013a2:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013a4:	fa05 f303 	lsl.w	r3, r5, r3
 80013a8:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013ac:	bf88      	it	hi
 80013ae:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013b0:	4019      	ands	r1, r3
 80013b2:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013b4:	fa05 f404 	lsl.w	r4, r5, r4
 80013b8:	3c01      	subs	r4, #1
 80013ba:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 80013bc:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013be:	ea42 0201 	orr.w	r2, r2, r1
 80013c2:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013c6:	bfaf      	iteee	ge
 80013c8:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013cc:	4b06      	ldrlt	r3, [pc, #24]	; (80013e8 <HAL_NVIC_SetPriority+0x64>)
 80013ce:	f000 000f 	andlt.w	r0, r0, #15
 80013d2:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013d4:	bfa5      	ittet	ge
 80013d6:	b2d2      	uxtbge	r2, r2
 80013d8:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013dc:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013de:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80013e2:	bd30      	pop	{r4, r5, pc}
 80013e4:	e000ed00 	.word	0xe000ed00
 80013e8:	e000ed14 	.word	0xe000ed14

080013ec <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80013ec:	2301      	movs	r3, #1
 80013ee:	0942      	lsrs	r2, r0, #5
 80013f0:	f000 001f 	and.w	r0, r0, #31
 80013f4:	fa03 f000 	lsl.w	r0, r3, r0
 80013f8:	4b01      	ldr	r3, [pc, #4]	; (8001400 <HAL_NVIC_EnableIRQ+0x14>)
 80013fa:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80013fe:	4770      	bx	lr
 8001400:	e000e100 	.word	0xe000e100

08001404 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001404:	3801      	subs	r0, #1
 8001406:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800140a:	d20a      	bcs.n	8001422 <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800140c:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800140e:	4b06      	ldr	r3, [pc, #24]	; (8001428 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001410:	4a06      	ldr	r2, [pc, #24]	; (800142c <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001412:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001414:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001418:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800141a:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800141c:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800141e:	601a      	str	r2, [r3, #0]
 8001420:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001422:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001424:	4770      	bx	lr
 8001426:	bf00      	nop
 8001428:	e000e010 	.word	0xe000e010
 800142c:	e000ed00 	.word	0xe000ed00

08001430 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001430:	4b04      	ldr	r3, [pc, #16]	; (8001444 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8001432:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8001434:	681a      	ldr	r2, [r3, #0]
 8001436:	bf0c      	ite	eq
 8001438:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 800143c:	f022 0204 	bicne.w	r2, r2, #4
 8001440:	601a      	str	r2, [r3, #0]
 8001442:	4770      	bx	lr
 8001444:	e000e010 	.word	0xe000e010

08001448 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8001448:	4770      	bx	lr

0800144a <HAL_SYSTICK_IRQHandler>:
{
 800144a:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 800144c:	f7ff fffc 	bl	8001448 <HAL_SYSTICK_Callback>
 8001450:	bd08      	pop	{r3, pc}
	...

08001454 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001454:	b510      	push	{r4, lr}
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001456:	b350      	cbz	r0, 80014ae <HAL_DMA_Init+0x5a>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001458:	2214      	movs	r2, #20
 800145a:	6801      	ldr	r1, [r0, #0]
 800145c:	4b15      	ldr	r3, [pc, #84]	; (80014b4 <HAL_DMA_Init+0x60>)
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800145e:	6884      	ldr	r4, [r0, #8]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001460:	440b      	add	r3, r1
 8001462:	fbb3 f3f2 	udiv	r3, r3, r2
 8001466:	009b      	lsls	r3, r3, #2
 8001468:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800146a:	4b13      	ldr	r3, [pc, #76]	; (80014b8 <HAL_DMA_Init+0x64>)
  tmp = hdma->Instance->CCR;
 800146c:	680a      	ldr	r2, [r1, #0]
  hdma->DmaBaseAddress = DMA1;
 800146e:	63c3      	str	r3, [r0, #60]	; 0x3c
  tmp |=  hdma->Init.Direction        |
 8001470:	6843      	ldr	r3, [r0, #4]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001472:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
  tmp |=  hdma->Init.Direction        |
 8001476:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001478:	68c4      	ldr	r4, [r0, #12]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800147a:	f022 0230 	bic.w	r2, r2, #48	; 0x30
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800147e:	4323      	orrs	r3, r4
 8001480:	6904      	ldr	r4, [r0, #16]
 8001482:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001484:	6944      	ldr	r4, [r0, #20]
 8001486:	4323      	orrs	r3, r4
 8001488:	6984      	ldr	r4, [r0, #24]
 800148a:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 800148c:	69c4      	ldr	r4, [r0, #28]
 800148e:	4323      	orrs	r3, r4
  tmp |=  hdma->Init.Direction        |
 8001490:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001492:	600b      	str	r3, [r1, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001494:	2201      	movs	r2, #1
  hdma->XferCpltCallback = NULL;
 8001496:	2300      	movs	r3, #0
  hdma->State = HAL_DMA_STATE_READY;
 8001498:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
  hdma->XferCpltCallback = NULL;
 800149c:	6283      	str	r3, [r0, #40]	; 0x28
  hdma->XferHalfCpltCallback = NULL;
 800149e:	62c3      	str	r3, [r0, #44]	; 0x2c
  hdma->XferErrorCallback = NULL;
 80014a0:	6303      	str	r3, [r0, #48]	; 0x30
  hdma->XferAbortCallback = NULL;
 80014a2:	6343      	str	r3, [r0, #52]	; 0x34
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80014a4:	6383      	str	r3, [r0, #56]	; 0x38
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80014a6:	f880 3020 	strb.w	r3, [r0, #32]
  
  return HAL_OK;
 80014aa:	4618      	mov	r0, r3
 80014ac:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80014ae:	2001      	movs	r0, #1
}
 80014b0:	bd10      	pop	{r4, pc}
 80014b2:	bf00      	nop
 80014b4:	bffdfff8 	.word	0xbffdfff8
 80014b8:	40020000 	.word	0x40020000

080014bc <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80014bc:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80014be:	f890 4020 	ldrb.w	r4, [r0, #32]
 80014c2:	2c01      	cmp	r4, #1
 80014c4:	d035      	beq.n	8001532 <HAL_DMA_Start_IT+0x76>
 80014c6:	2401      	movs	r4, #1
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80014c8:	f890 5021 	ldrb.w	r5, [r0, #33]	; 0x21
  __HAL_LOCK(hdma);
 80014cc:	f880 4020 	strb.w	r4, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 80014d0:	42a5      	cmp	r5, r4
 80014d2:	f04f 0600 	mov.w	r6, #0
 80014d6:	f04f 0402 	mov.w	r4, #2
 80014da:	d128      	bne.n	800152e <HAL_DMA_Start_IT+0x72>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80014dc:	f880 4021 	strb.w	r4, [r0, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80014e0:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80014e2:	6386      	str	r6, [r0, #56]	; 0x38
    __HAL_DMA_DISABLE(hdma);
 80014e4:	6826      	ldr	r6, [r4, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80014e6:	6c07      	ldr	r7, [r0, #64]	; 0x40
    __HAL_DMA_DISABLE(hdma);
 80014e8:	f026 0601 	bic.w	r6, r6, #1
 80014ec:	6026      	str	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80014ee:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
 80014f0:	40bd      	lsls	r5, r7
 80014f2:	6075      	str	r5, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80014f4:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80014f6:	6843      	ldr	r3, [r0, #4]
 80014f8:	6805      	ldr	r5, [r0, #0]
 80014fa:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback)
 80014fc:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80014fe:	bf0b      	itete	eq
 8001500:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8001502:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8001504:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8001506:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback)
 8001508:	b14b      	cbz	r3, 800151e <HAL_DMA_Start_IT+0x62>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800150a:	6823      	ldr	r3, [r4, #0]
 800150c:	f043 030e 	orr.w	r3, r3, #14
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001510:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8001512:	682b      	ldr	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001514:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8001516:	f043 0301 	orr.w	r3, r3, #1
 800151a:	602b      	str	r3, [r5, #0]
 800151c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800151e:	6823      	ldr	r3, [r4, #0]
 8001520:	f023 0304 	bic.w	r3, r3, #4
 8001524:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001526:	6823      	ldr	r3, [r4, #0]
 8001528:	f043 030a 	orr.w	r3, r3, #10
 800152c:	e7f0      	b.n	8001510 <HAL_DMA_Start_IT+0x54>
    __HAL_UNLOCK(hdma); 
 800152e:	f880 6020 	strb.w	r6, [r0, #32]
  __HAL_LOCK(hdma);
 8001532:	2002      	movs	r0, #2
}
 8001534:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001538 <HAL_DMA_IRQHandler>:
{
 8001538:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800153a:	2504      	movs	r5, #4
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800153c:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800153e:	6c02      	ldr	r2, [r0, #64]	; 0x40
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001540:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8001542:	6803      	ldr	r3, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001544:	4095      	lsls	r5, r2
 8001546:	4225      	tst	r5, r4
  uint32_t source_it = hdma->Instance->CCR;
 8001548:	6819      	ldr	r1, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800154a:	d032      	beq.n	80015b2 <HAL_DMA_IRQHandler+0x7a>
 800154c:	074d      	lsls	r5, r1, #29
 800154e:	d530      	bpl.n	80015b2 <HAL_DMA_IRQHandler+0x7a>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001550:	681a      	ldr	r2, [r3, #0]
 8001552:	0696      	lsls	r6, r2, #26
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001554:	bf5e      	ittt	pl
 8001556:	681a      	ldrpl	r2, [r3, #0]
 8001558:	f022 0204 	bicpl.w	r2, r2, #4
 800155c:	601a      	strpl	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800155e:	4a3e      	ldr	r2, [pc, #248]	; (8001658 <HAL_DMA_IRQHandler+0x120>)
 8001560:	4293      	cmp	r3, r2
 8001562:	d019      	beq.n	8001598 <HAL_DMA_IRQHandler+0x60>
 8001564:	3214      	adds	r2, #20
 8001566:	4293      	cmp	r3, r2
 8001568:	d018      	beq.n	800159c <HAL_DMA_IRQHandler+0x64>
 800156a:	3214      	adds	r2, #20
 800156c:	4293      	cmp	r3, r2
 800156e:	d017      	beq.n	80015a0 <HAL_DMA_IRQHandler+0x68>
 8001570:	3214      	adds	r2, #20
 8001572:	4293      	cmp	r3, r2
 8001574:	d017      	beq.n	80015a6 <HAL_DMA_IRQHandler+0x6e>
 8001576:	3214      	adds	r2, #20
 8001578:	4293      	cmp	r3, r2
 800157a:	d017      	beq.n	80015ac <HAL_DMA_IRQHandler+0x74>
 800157c:	3214      	adds	r2, #20
 800157e:	4293      	cmp	r3, r2
 8001580:	bf0c      	ite	eq
 8001582:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
 8001586:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
 800158a:	4a34      	ldr	r2, [pc, #208]	; (800165c <HAL_DMA_IRQHandler+0x124>)
 800158c:	6053      	str	r3, [r2, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 800158e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    if (hdma->XferErrorCallback != NULL)
 8001590:	2b00      	cmp	r3, #0
 8001592:	d05e      	beq.n	8001652 <HAL_DMA_IRQHandler+0x11a>
}
 8001594:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8001596:	4718      	bx	r3
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001598:	2304      	movs	r3, #4
 800159a:	e7f6      	b.n	800158a <HAL_DMA_IRQHandler+0x52>
 800159c:	2340      	movs	r3, #64	; 0x40
 800159e:	e7f4      	b.n	800158a <HAL_DMA_IRQHandler+0x52>
 80015a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015a4:	e7f1      	b.n	800158a <HAL_DMA_IRQHandler+0x52>
 80015a6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80015aa:	e7ee      	b.n	800158a <HAL_DMA_IRQHandler+0x52>
 80015ac:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80015b0:	e7eb      	b.n	800158a <HAL_DMA_IRQHandler+0x52>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80015b2:	2502      	movs	r5, #2
 80015b4:	4095      	lsls	r5, r2
 80015b6:	4225      	tst	r5, r4
 80015b8:	d035      	beq.n	8001626 <HAL_DMA_IRQHandler+0xee>
 80015ba:	078d      	lsls	r5, r1, #30
 80015bc:	d533      	bpl.n	8001626 <HAL_DMA_IRQHandler+0xee>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80015be:	681a      	ldr	r2, [r3, #0]
 80015c0:	0694      	lsls	r4, r2, #26
 80015c2:	d406      	bmi.n	80015d2 <HAL_DMA_IRQHandler+0x9a>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80015c4:	681a      	ldr	r2, [r3, #0]
 80015c6:	f022 020a 	bic.w	r2, r2, #10
 80015ca:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 80015cc:	2201      	movs	r2, #1
 80015ce:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80015d2:	4a21      	ldr	r2, [pc, #132]	; (8001658 <HAL_DMA_IRQHandler+0x120>)
 80015d4:	4293      	cmp	r3, r2
 80015d6:	d019      	beq.n	800160c <HAL_DMA_IRQHandler+0xd4>
 80015d8:	3214      	adds	r2, #20
 80015da:	4293      	cmp	r3, r2
 80015dc:	d018      	beq.n	8001610 <HAL_DMA_IRQHandler+0xd8>
 80015de:	3214      	adds	r2, #20
 80015e0:	4293      	cmp	r3, r2
 80015e2:	d017      	beq.n	8001614 <HAL_DMA_IRQHandler+0xdc>
 80015e4:	3214      	adds	r2, #20
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d017      	beq.n	800161a <HAL_DMA_IRQHandler+0xe2>
 80015ea:	3214      	adds	r2, #20
 80015ec:	4293      	cmp	r3, r2
 80015ee:	d017      	beq.n	8001620 <HAL_DMA_IRQHandler+0xe8>
 80015f0:	3214      	adds	r2, #20
 80015f2:	4293      	cmp	r3, r2
 80015f4:	bf0c      	ite	eq
 80015f6:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 80015fa:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
 80015fe:	4a17      	ldr	r2, [pc, #92]	; (800165c <HAL_DMA_IRQHandler+0x124>)
 8001600:	6053      	str	r3, [r2, #4]
    __HAL_UNLOCK(hdma);
 8001602:	2300      	movs	r3, #0
 8001604:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 8001608:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800160a:	e7c1      	b.n	8001590 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800160c:	2302      	movs	r3, #2
 800160e:	e7f6      	b.n	80015fe <HAL_DMA_IRQHandler+0xc6>
 8001610:	2320      	movs	r3, #32
 8001612:	e7f4      	b.n	80015fe <HAL_DMA_IRQHandler+0xc6>
 8001614:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001618:	e7f1      	b.n	80015fe <HAL_DMA_IRQHandler+0xc6>
 800161a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800161e:	e7ee      	b.n	80015fe <HAL_DMA_IRQHandler+0xc6>
 8001620:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001624:	e7eb      	b.n	80015fe <HAL_DMA_IRQHandler+0xc6>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001626:	2508      	movs	r5, #8
 8001628:	4095      	lsls	r5, r2
 800162a:	4225      	tst	r5, r4
 800162c:	d011      	beq.n	8001652 <HAL_DMA_IRQHandler+0x11a>
 800162e:	0709      	lsls	r1, r1, #28
 8001630:	d50f      	bpl.n	8001652 <HAL_DMA_IRQHandler+0x11a>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001632:	6819      	ldr	r1, [r3, #0]
 8001634:	f021 010e 	bic.w	r1, r1, #14
 8001638:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800163a:	2301      	movs	r3, #1
 800163c:	fa03 f202 	lsl.w	r2, r3, r2
 8001640:	6072      	str	r2, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001642:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 8001644:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8001648:	2300      	movs	r3, #0
 800164a:	f880 3020 	strb.w	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 800164e:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8001650:	e79e      	b.n	8001590 <HAL_DMA_IRQHandler+0x58>
}
 8001652:	bc70      	pop	{r4, r5, r6}
 8001654:	4770      	bx	lr
 8001656:	bf00      	nop
 8001658:	40020008 	.word	0x40020008
 800165c:	40020000 	.word	0x40020000

08001660 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001660:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 8001664:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 8001666:	4616      	mov	r6, r2
 8001668:	4b65      	ldr	r3, [pc, #404]	; (8001800 <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800166a:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8001810 <HAL_GPIO_Init+0x1b0>
 800166e:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 8001814 <HAL_GPIO_Init+0x1b4>
    ioposition = (0x01U << position);
 8001672:	f04f 0801 	mov.w	r8, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001676:	680c      	ldr	r4, [r1, #0]
    ioposition = (0x01U << position);
 8001678:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800167c:	ea08 0404 	and.w	r4, r8, r4
    if (iocurrent == ioposition)
 8001680:	45a0      	cmp	r8, r4
 8001682:	d17f      	bne.n	8001784 <HAL_GPIO_Init+0x124>
      switch (GPIO_Init->Mode)
 8001684:	684d      	ldr	r5, [r1, #4]
 8001686:	2d12      	cmp	r5, #18
 8001688:	f000 80af 	beq.w	80017ea <HAL_GPIO_Init+0x18a>
 800168c:	f200 8088 	bhi.w	80017a0 <HAL_GPIO_Init+0x140>
 8001690:	2d02      	cmp	r5, #2
 8001692:	f000 80a7 	beq.w	80017e4 <HAL_GPIO_Init+0x184>
 8001696:	d87c      	bhi.n	8001792 <HAL_GPIO_Init+0x132>
 8001698:	2d00      	cmp	r5, #0
 800169a:	f000 808e 	beq.w	80017ba <HAL_GPIO_Init+0x15a>
 800169e:	2d01      	cmp	r5, #1
 80016a0:	f000 809e 	beq.w	80017e0 <HAL_GPIO_Init+0x180>
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80016a4:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80016a8:	2cff      	cmp	r4, #255	; 0xff
 80016aa:	bf93      	iteet	ls
 80016ac:	4682      	movls	sl, r0
 80016ae:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 80016b2:	3d08      	subhi	r5, #8
 80016b4:	f8d0 b000 	ldrls.w	fp, [r0]
 80016b8:	bf92      	itee	ls
 80016ba:	00b5      	lslls	r5, r6, #2
 80016bc:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 80016c0:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80016c2:	fa09 f805 	lsl.w	r8, r9, r5
 80016c6:	ea2b 0808 	bic.w	r8, fp, r8
 80016ca:	fa02 f505 	lsl.w	r5, r2, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80016ce:	bf88      	it	hi
 80016d0:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80016d4:	ea48 0505 	orr.w	r5, r8, r5
 80016d8:	f8ca 5000 	str.w	r5, [sl]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80016dc:	f8d1 a004 	ldr.w	sl, [r1, #4]
 80016e0:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 80016e4:	d04e      	beq.n	8001784 <HAL_GPIO_Init+0x124>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80016e6:	4d47      	ldr	r5, [pc, #284]	; (8001804 <HAL_GPIO_Init+0x1a4>)
 80016e8:	4f46      	ldr	r7, [pc, #280]	; (8001804 <HAL_GPIO_Init+0x1a4>)
 80016ea:	69ad      	ldr	r5, [r5, #24]
 80016ec:	f026 0803 	bic.w	r8, r6, #3
 80016f0:	f045 0501 	orr.w	r5, r5, #1
 80016f4:	61bd      	str	r5, [r7, #24]
 80016f6:	69bd      	ldr	r5, [r7, #24]
 80016f8:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 80016fc:	f005 0501 	and.w	r5, r5, #1
 8001700:	9501      	str	r5, [sp, #4]
 8001702:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8001706:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 800170a:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800170c:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2U];
 8001710:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8001714:	fa09 f90b 	lsl.w	r9, r9, fp
 8001718:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800171c:	4d3a      	ldr	r5, [pc, #232]	; (8001808 <HAL_GPIO_Init+0x1a8>)
 800171e:	42a8      	cmp	r0, r5
 8001720:	d068      	beq.n	80017f4 <HAL_GPIO_Init+0x194>
 8001722:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001726:	42a8      	cmp	r0, r5
 8001728:	d066      	beq.n	80017f8 <HAL_GPIO_Init+0x198>
 800172a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800172e:	42a8      	cmp	r0, r5
 8001730:	d064      	beq.n	80017fc <HAL_GPIO_Init+0x19c>
 8001732:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001736:	42a8      	cmp	r0, r5
 8001738:	bf0c      	ite	eq
 800173a:	2503      	moveq	r5, #3
 800173c:	2504      	movne	r5, #4
 800173e:	fa05 f50b 	lsl.w	r5, r5, fp
 8001742:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2U] = temp;
 8001746:	f8c8 5008 	str.w	r5, [r8, #8]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800174a:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800174c:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8001750:	bf14      	ite	ne
 8001752:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001754:	43a5      	biceq	r5, r4
 8001756:	601d      	str	r5, [r3, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001758:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800175a:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 800175e:	bf14      	ite	ne
 8001760:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001762:	43a5      	biceq	r5, r4
 8001764:	605d      	str	r5, [r3, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001766:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001768:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 800176c:	bf14      	ite	ne
 800176e:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001770:	43a5      	biceq	r5, r4
 8001772:	609d      	str	r5, [r3, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001774:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001776:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 800177a:	bf14      	ite	ne
 800177c:	432c      	orrne	r4, r5
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800177e:	ea25 0404 	biceq.w	r4, r5, r4
 8001782:	60dc      	str	r4, [r3, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8001784:	3601      	adds	r6, #1
 8001786:	2e10      	cmp	r6, #16
 8001788:	f47f af73 	bne.w	8001672 <HAL_GPIO_Init+0x12>
        }
      }
    }
  }
}
 800178c:	b003      	add	sp, #12
 800178e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 8001792:	2d03      	cmp	r5, #3
 8001794:	d022      	beq.n	80017dc <HAL_GPIO_Init+0x17c>
 8001796:	2d11      	cmp	r5, #17
 8001798:	d184      	bne.n	80016a4 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800179a:	68ca      	ldr	r2, [r1, #12]
 800179c:	3204      	adds	r2, #4
          break;
 800179e:	e781      	b.n	80016a4 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 80017a0:	4f1a      	ldr	r7, [pc, #104]	; (800180c <HAL_GPIO_Init+0x1ac>)
 80017a2:	42bd      	cmp	r5, r7
 80017a4:	d009      	beq.n	80017ba <HAL_GPIO_Init+0x15a>
 80017a6:	d812      	bhi.n	80017ce <HAL_GPIO_Init+0x16e>
 80017a8:	f8df 906c 	ldr.w	r9, [pc, #108]	; 8001818 <HAL_GPIO_Init+0x1b8>
 80017ac:	454d      	cmp	r5, r9
 80017ae:	d004      	beq.n	80017ba <HAL_GPIO_Init+0x15a>
 80017b0:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 80017b4:	454d      	cmp	r5, r9
 80017b6:	f47f af75 	bne.w	80016a4 <HAL_GPIO_Init+0x44>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80017ba:	688a      	ldr	r2, [r1, #8]
 80017bc:	b1c2      	cbz	r2, 80017f0 <HAL_GPIO_Init+0x190>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80017be:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 80017c0:	bf0c      	ite	eq
 80017c2:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 80017c6:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80017ca:	2208      	movs	r2, #8
 80017cc:	e76a      	b.n	80016a4 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 80017ce:	4575      	cmp	r5, lr
 80017d0:	d0f3      	beq.n	80017ba <HAL_GPIO_Init+0x15a>
 80017d2:	4565      	cmp	r5, ip
 80017d4:	d0f1      	beq.n	80017ba <HAL_GPIO_Init+0x15a>
 80017d6:	f8df 9044 	ldr.w	r9, [pc, #68]	; 800181c <HAL_GPIO_Init+0x1bc>
 80017da:	e7eb      	b.n	80017b4 <HAL_GPIO_Init+0x154>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80017dc:	2200      	movs	r2, #0
 80017de:	e761      	b.n	80016a4 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80017e0:	68ca      	ldr	r2, [r1, #12]
          break;
 80017e2:	e75f      	b.n	80016a4 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80017e4:	68ca      	ldr	r2, [r1, #12]
 80017e6:	3208      	adds	r2, #8
          break;
 80017e8:	e75c      	b.n	80016a4 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80017ea:	68ca      	ldr	r2, [r1, #12]
 80017ec:	320c      	adds	r2, #12
          break;
 80017ee:	e759      	b.n	80016a4 <HAL_GPIO_Init+0x44>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80017f0:	2204      	movs	r2, #4
 80017f2:	e757      	b.n	80016a4 <HAL_GPIO_Init+0x44>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80017f4:	2500      	movs	r5, #0
 80017f6:	e7a2      	b.n	800173e <HAL_GPIO_Init+0xde>
 80017f8:	2501      	movs	r5, #1
 80017fa:	e7a0      	b.n	800173e <HAL_GPIO_Init+0xde>
 80017fc:	2502      	movs	r5, #2
 80017fe:	e79e      	b.n	800173e <HAL_GPIO_Init+0xde>
 8001800:	40010400 	.word	0x40010400
 8001804:	40021000 	.word	0x40021000
 8001808:	40010800 	.word	0x40010800
 800180c:	10210000 	.word	0x10210000
 8001810:	10310000 	.word	0x10310000
 8001814:	10320000 	.word	0x10320000
 8001818:	10110000 	.word	0x10110000
 800181c:	10220000 	.word	0x10220000

08001820 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001820:	6883      	ldr	r3, [r0, #8]
 8001822:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8001824:	bf14      	ite	ne
 8001826:	2001      	movne	r0, #1
 8001828:	2000      	moveq	r0, #0
 800182a:	4770      	bx	lr

0800182c <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800182c:	6803      	ldr	r3, [r0, #0]
{
 800182e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001832:	07db      	lsls	r3, r3, #31
{
 8001834:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001836:	d410      	bmi.n	800185a <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001838:	682b      	ldr	r3, [r5, #0]
 800183a:	079f      	lsls	r7, r3, #30
 800183c:	d45e      	bmi.n	80018fc <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800183e:	682b      	ldr	r3, [r5, #0]
 8001840:	0719      	lsls	r1, r3, #28
 8001842:	f100 8095 	bmi.w	8001970 <HAL_RCC_OscConfig+0x144>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001846:	682b      	ldr	r3, [r5, #0]
 8001848:	075a      	lsls	r2, r3, #29
 800184a:	f100 80bf 	bmi.w	80019cc <HAL_RCC_OscConfig+0x1a0>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800184e:	69ea      	ldr	r2, [r5, #28]
 8001850:	2a00      	cmp	r2, #0
 8001852:	f040 812d 	bne.w	8001ab0 <HAL_RCC_OscConfig+0x284>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8001856:	2000      	movs	r0, #0
 8001858:	e014      	b.n	8001884 <HAL_RCC_OscConfig+0x58>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800185a:	4c90      	ldr	r4, [pc, #576]	; (8001a9c <HAL_RCC_OscConfig+0x270>)
 800185c:	6863      	ldr	r3, [r4, #4]
 800185e:	f003 030c 	and.w	r3, r3, #12
 8001862:	2b04      	cmp	r3, #4
 8001864:	d007      	beq.n	8001876 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001866:	6863      	ldr	r3, [r4, #4]
 8001868:	f003 030c 	and.w	r3, r3, #12
 800186c:	2b08      	cmp	r3, #8
 800186e:	d10c      	bne.n	800188a <HAL_RCC_OscConfig+0x5e>
 8001870:	6863      	ldr	r3, [r4, #4]
 8001872:	03de      	lsls	r6, r3, #15
 8001874:	d509      	bpl.n	800188a <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001876:	6823      	ldr	r3, [r4, #0]
 8001878:	039c      	lsls	r4, r3, #14
 800187a:	d5dd      	bpl.n	8001838 <HAL_RCC_OscConfig+0xc>
 800187c:	686b      	ldr	r3, [r5, #4]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d1da      	bne.n	8001838 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8001882:	2001      	movs	r0, #1
}
 8001884:	b002      	add	sp, #8
 8001886:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800188a:	686b      	ldr	r3, [r5, #4]
 800188c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001890:	d110      	bne.n	80018b4 <HAL_RCC_OscConfig+0x88>
 8001892:	6823      	ldr	r3, [r4, #0]
 8001894:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001898:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800189a:	f7ff fb33 	bl	8000f04 <HAL_GetTick>
 800189e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018a0:	6823      	ldr	r3, [r4, #0]
 80018a2:	0398      	lsls	r0, r3, #14
 80018a4:	d4c8      	bmi.n	8001838 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018a6:	f7ff fb2d 	bl	8000f04 <HAL_GetTick>
 80018aa:	1b80      	subs	r0, r0, r6
 80018ac:	2864      	cmp	r0, #100	; 0x64
 80018ae:	d9f7      	bls.n	80018a0 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 80018b0:	2003      	movs	r0, #3
 80018b2:	e7e7      	b.n	8001884 <HAL_RCC_OscConfig+0x58>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018b4:	b99b      	cbnz	r3, 80018de <HAL_RCC_OscConfig+0xb2>
 80018b6:	6823      	ldr	r3, [r4, #0]
 80018b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018bc:	6023      	str	r3, [r4, #0]
 80018be:	6823      	ldr	r3, [r4, #0]
 80018c0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018c4:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80018c6:	f7ff fb1d 	bl	8000f04 <HAL_GetTick>
 80018ca:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018cc:	6823      	ldr	r3, [r4, #0]
 80018ce:	0399      	lsls	r1, r3, #14
 80018d0:	d5b2      	bpl.n	8001838 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018d2:	f7ff fb17 	bl	8000f04 <HAL_GetTick>
 80018d6:	1b80      	subs	r0, r0, r6
 80018d8:	2864      	cmp	r0, #100	; 0x64
 80018da:	d9f7      	bls.n	80018cc <HAL_RCC_OscConfig+0xa0>
 80018dc:	e7e8      	b.n	80018b0 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018de:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018e2:	6823      	ldr	r3, [r4, #0]
 80018e4:	d103      	bne.n	80018ee <HAL_RCC_OscConfig+0xc2>
 80018e6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018ea:	6023      	str	r3, [r4, #0]
 80018ec:	e7d1      	b.n	8001892 <HAL_RCC_OscConfig+0x66>
 80018ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018f2:	6023      	str	r3, [r4, #0]
 80018f4:	6823      	ldr	r3, [r4, #0]
 80018f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018fa:	e7cd      	b.n	8001898 <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80018fc:	4c67      	ldr	r4, [pc, #412]	; (8001a9c <HAL_RCC_OscConfig+0x270>)
 80018fe:	6863      	ldr	r3, [r4, #4]
 8001900:	f013 0f0c 	tst.w	r3, #12
 8001904:	d007      	beq.n	8001916 <HAL_RCC_OscConfig+0xea>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001906:	6863      	ldr	r3, [r4, #4]
 8001908:	f003 030c 	and.w	r3, r3, #12
 800190c:	2b08      	cmp	r3, #8
 800190e:	d110      	bne.n	8001932 <HAL_RCC_OscConfig+0x106>
 8001910:	6863      	ldr	r3, [r4, #4]
 8001912:	03da      	lsls	r2, r3, #15
 8001914:	d40d      	bmi.n	8001932 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001916:	6823      	ldr	r3, [r4, #0]
 8001918:	079b      	lsls	r3, r3, #30
 800191a:	d502      	bpl.n	8001922 <HAL_RCC_OscConfig+0xf6>
 800191c:	692b      	ldr	r3, [r5, #16]
 800191e:	2b01      	cmp	r3, #1
 8001920:	d1af      	bne.n	8001882 <HAL_RCC_OscConfig+0x56>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001922:	6823      	ldr	r3, [r4, #0]
 8001924:	696a      	ldr	r2, [r5, #20]
 8001926:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800192a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800192e:	6023      	str	r3, [r4, #0]
 8001930:	e785      	b.n	800183e <HAL_RCC_OscConfig+0x12>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001932:	692a      	ldr	r2, [r5, #16]
 8001934:	4b5a      	ldr	r3, [pc, #360]	; (8001aa0 <HAL_RCC_OscConfig+0x274>)
 8001936:	b16a      	cbz	r2, 8001954 <HAL_RCC_OscConfig+0x128>
        __HAL_RCC_HSI_ENABLE();
 8001938:	2201      	movs	r2, #1
 800193a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800193c:	f7ff fae2 	bl	8000f04 <HAL_GetTick>
 8001940:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001942:	6823      	ldr	r3, [r4, #0]
 8001944:	079f      	lsls	r7, r3, #30
 8001946:	d4ec      	bmi.n	8001922 <HAL_RCC_OscConfig+0xf6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001948:	f7ff fadc 	bl	8000f04 <HAL_GetTick>
 800194c:	1b80      	subs	r0, r0, r6
 800194e:	2802      	cmp	r0, #2
 8001950:	d9f7      	bls.n	8001942 <HAL_RCC_OscConfig+0x116>
 8001952:	e7ad      	b.n	80018b0 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 8001954:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001956:	f7ff fad5 	bl	8000f04 <HAL_GetTick>
 800195a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800195c:	6823      	ldr	r3, [r4, #0]
 800195e:	0798      	lsls	r0, r3, #30
 8001960:	f57f af6d 	bpl.w	800183e <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001964:	f7ff face 	bl	8000f04 <HAL_GetTick>
 8001968:	1b80      	subs	r0, r0, r6
 800196a:	2802      	cmp	r0, #2
 800196c:	d9f6      	bls.n	800195c <HAL_RCC_OscConfig+0x130>
 800196e:	e79f      	b.n	80018b0 <HAL_RCC_OscConfig+0x84>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001970:	69aa      	ldr	r2, [r5, #24]
 8001972:	4c4a      	ldr	r4, [pc, #296]	; (8001a9c <HAL_RCC_OscConfig+0x270>)
 8001974:	4b4b      	ldr	r3, [pc, #300]	; (8001aa4 <HAL_RCC_OscConfig+0x278>)
 8001976:	b1da      	cbz	r2, 80019b0 <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 8001978:	2201      	movs	r2, #1
 800197a:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800197c:	f7ff fac2 	bl	8000f04 <HAL_GetTick>
 8001980:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001982:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001984:	079b      	lsls	r3, r3, #30
 8001986:	d50d      	bpl.n	80019a4 <HAL_RCC_OscConfig+0x178>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001988:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800198c:	4b46      	ldr	r3, [pc, #280]	; (8001aa8 <HAL_RCC_OscConfig+0x27c>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	fbb3 f3f2 	udiv	r3, r3, r2
 8001994:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8001996:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8001998:	9b01      	ldr	r3, [sp, #4]
 800199a:	1e5a      	subs	r2, r3, #1
 800199c:	9201      	str	r2, [sp, #4]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d1f9      	bne.n	8001996 <HAL_RCC_OscConfig+0x16a>
 80019a2:	e750      	b.n	8001846 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019a4:	f7ff faae 	bl	8000f04 <HAL_GetTick>
 80019a8:	1b80      	subs	r0, r0, r6
 80019aa:	2802      	cmp	r0, #2
 80019ac:	d9e9      	bls.n	8001982 <HAL_RCC_OscConfig+0x156>
 80019ae:	e77f      	b.n	80018b0 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 80019b0:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80019b2:	f7ff faa7 	bl	8000f04 <HAL_GetTick>
 80019b6:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80019ba:	079f      	lsls	r7, r3, #30
 80019bc:	f57f af43 	bpl.w	8001846 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019c0:	f7ff faa0 	bl	8000f04 <HAL_GetTick>
 80019c4:	1b80      	subs	r0, r0, r6
 80019c6:	2802      	cmp	r0, #2
 80019c8:	d9f6      	bls.n	80019b8 <HAL_RCC_OscConfig+0x18c>
 80019ca:	e771      	b.n	80018b0 <HAL_RCC_OscConfig+0x84>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019cc:	4c33      	ldr	r4, [pc, #204]	; (8001a9c <HAL_RCC_OscConfig+0x270>)
 80019ce:	69e3      	ldr	r3, [r4, #28]
 80019d0:	00d8      	lsls	r0, r3, #3
 80019d2:	d424      	bmi.n	8001a1e <HAL_RCC_OscConfig+0x1f2>
      pwrclkchanged = SET;
 80019d4:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80019d6:	69e3      	ldr	r3, [r4, #28]
 80019d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019dc:	61e3      	str	r3, [r4, #28]
 80019de:	69e3      	ldr	r3, [r4, #28]
 80019e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019e4:	9300      	str	r3, [sp, #0]
 80019e6:	9b00      	ldr	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019e8:	4e30      	ldr	r6, [pc, #192]	; (8001aac <HAL_RCC_OscConfig+0x280>)
 80019ea:	6833      	ldr	r3, [r6, #0]
 80019ec:	05d9      	lsls	r1, r3, #23
 80019ee:	d518      	bpl.n	8001a22 <HAL_RCC_OscConfig+0x1f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019f0:	68eb      	ldr	r3, [r5, #12]
 80019f2:	2b01      	cmp	r3, #1
 80019f4:	d126      	bne.n	8001a44 <HAL_RCC_OscConfig+0x218>
 80019f6:	6a23      	ldr	r3, [r4, #32]
 80019f8:	f043 0301 	orr.w	r3, r3, #1
 80019fc:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80019fe:	f7ff fa81 	bl	8000f04 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a02:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001a06:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a08:	6a23      	ldr	r3, [r4, #32]
 8001a0a:	079b      	lsls	r3, r3, #30
 8001a0c:	d53f      	bpl.n	8001a8e <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 8001a0e:	2f00      	cmp	r7, #0
 8001a10:	f43f af1d 	beq.w	800184e <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a14:	69e3      	ldr	r3, [r4, #28]
 8001a16:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a1a:	61e3      	str	r3, [r4, #28]
 8001a1c:	e717      	b.n	800184e <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 8001a1e:	2700      	movs	r7, #0
 8001a20:	e7e2      	b.n	80019e8 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a22:	6833      	ldr	r3, [r6, #0]
 8001a24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a28:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001a2a:	f7ff fa6b 	bl	8000f04 <HAL_GetTick>
 8001a2e:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a30:	6833      	ldr	r3, [r6, #0]
 8001a32:	05da      	lsls	r2, r3, #23
 8001a34:	d4dc      	bmi.n	80019f0 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a36:	f7ff fa65 	bl	8000f04 <HAL_GetTick>
 8001a3a:	eba0 0008 	sub.w	r0, r0, r8
 8001a3e:	2864      	cmp	r0, #100	; 0x64
 8001a40:	d9f6      	bls.n	8001a30 <HAL_RCC_OscConfig+0x204>
 8001a42:	e735      	b.n	80018b0 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a44:	b9ab      	cbnz	r3, 8001a72 <HAL_RCC_OscConfig+0x246>
 8001a46:	6a23      	ldr	r3, [r4, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a48:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a4c:	f023 0301 	bic.w	r3, r3, #1
 8001a50:	6223      	str	r3, [r4, #32]
 8001a52:	6a23      	ldr	r3, [r4, #32]
 8001a54:	f023 0304 	bic.w	r3, r3, #4
 8001a58:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001a5a:	f7ff fa53 	bl	8000f04 <HAL_GetTick>
 8001a5e:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a60:	6a23      	ldr	r3, [r4, #32]
 8001a62:	0798      	lsls	r0, r3, #30
 8001a64:	d5d3      	bpl.n	8001a0e <HAL_RCC_OscConfig+0x1e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a66:	f7ff fa4d 	bl	8000f04 <HAL_GetTick>
 8001a6a:	1b80      	subs	r0, r0, r6
 8001a6c:	4540      	cmp	r0, r8
 8001a6e:	d9f7      	bls.n	8001a60 <HAL_RCC_OscConfig+0x234>
 8001a70:	e71e      	b.n	80018b0 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a72:	2b05      	cmp	r3, #5
 8001a74:	6a23      	ldr	r3, [r4, #32]
 8001a76:	d103      	bne.n	8001a80 <HAL_RCC_OscConfig+0x254>
 8001a78:	f043 0304 	orr.w	r3, r3, #4
 8001a7c:	6223      	str	r3, [r4, #32]
 8001a7e:	e7ba      	b.n	80019f6 <HAL_RCC_OscConfig+0x1ca>
 8001a80:	f023 0301 	bic.w	r3, r3, #1
 8001a84:	6223      	str	r3, [r4, #32]
 8001a86:	6a23      	ldr	r3, [r4, #32]
 8001a88:	f023 0304 	bic.w	r3, r3, #4
 8001a8c:	e7b6      	b.n	80019fc <HAL_RCC_OscConfig+0x1d0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a8e:	f7ff fa39 	bl	8000f04 <HAL_GetTick>
 8001a92:	eba0 0008 	sub.w	r0, r0, r8
 8001a96:	42b0      	cmp	r0, r6
 8001a98:	d9b6      	bls.n	8001a08 <HAL_RCC_OscConfig+0x1dc>
 8001a9a:	e709      	b.n	80018b0 <HAL_RCC_OscConfig+0x84>
 8001a9c:	40021000 	.word	0x40021000
 8001aa0:	42420000 	.word	0x42420000
 8001aa4:	42420480 	.word	0x42420480
 8001aa8:	2000000c 	.word	0x2000000c
 8001aac:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ab0:	4c22      	ldr	r4, [pc, #136]	; (8001b3c <HAL_RCC_OscConfig+0x310>)
 8001ab2:	6863      	ldr	r3, [r4, #4]
 8001ab4:	f003 030c 	and.w	r3, r3, #12
 8001ab8:	2b08      	cmp	r3, #8
 8001aba:	f43f aee2 	beq.w	8001882 <HAL_RCC_OscConfig+0x56>
 8001abe:	2300      	movs	r3, #0
 8001ac0:	4e1f      	ldr	r6, [pc, #124]	; (8001b40 <HAL_RCC_OscConfig+0x314>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ac2:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8001ac4:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ac6:	d12b      	bne.n	8001b20 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 8001ac8:	f7ff fa1c 	bl	8000f04 <HAL_GetTick>
 8001acc:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ace:	6823      	ldr	r3, [r4, #0]
 8001ad0:	0199      	lsls	r1, r3, #6
 8001ad2:	d41f      	bmi.n	8001b14 <HAL_RCC_OscConfig+0x2e8>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001ad4:	6a2b      	ldr	r3, [r5, #32]
 8001ad6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ada:	d105      	bne.n	8001ae8 <HAL_RCC_OscConfig+0x2bc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001adc:	6862      	ldr	r2, [r4, #4]
 8001ade:	68a9      	ldr	r1, [r5, #8]
 8001ae0:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8001ae4:	430a      	orrs	r2, r1
 8001ae6:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ae8:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8001aea:	6862      	ldr	r2, [r4, #4]
 8001aec:	430b      	orrs	r3, r1
 8001aee:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8001af2:	4313      	orrs	r3, r2
 8001af4:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8001af6:	2301      	movs	r3, #1
 8001af8:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8001afa:	f7ff fa03 	bl	8000f04 <HAL_GetTick>
 8001afe:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b00:	6823      	ldr	r3, [r4, #0]
 8001b02:	019a      	lsls	r2, r3, #6
 8001b04:	f53f aea7 	bmi.w	8001856 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b08:	f7ff f9fc 	bl	8000f04 <HAL_GetTick>
 8001b0c:	1b40      	subs	r0, r0, r5
 8001b0e:	2802      	cmp	r0, #2
 8001b10:	d9f6      	bls.n	8001b00 <HAL_RCC_OscConfig+0x2d4>
 8001b12:	e6cd      	b.n	80018b0 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b14:	f7ff f9f6 	bl	8000f04 <HAL_GetTick>
 8001b18:	1bc0      	subs	r0, r0, r7
 8001b1a:	2802      	cmp	r0, #2
 8001b1c:	d9d7      	bls.n	8001ace <HAL_RCC_OscConfig+0x2a2>
 8001b1e:	e6c7      	b.n	80018b0 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 8001b20:	f7ff f9f0 	bl	8000f04 <HAL_GetTick>
 8001b24:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b26:	6823      	ldr	r3, [r4, #0]
 8001b28:	019b      	lsls	r3, r3, #6
 8001b2a:	f57f ae94 	bpl.w	8001856 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b2e:	f7ff f9e9 	bl	8000f04 <HAL_GetTick>
 8001b32:	1b40      	subs	r0, r0, r5
 8001b34:	2802      	cmp	r0, #2
 8001b36:	d9f6      	bls.n	8001b26 <HAL_RCC_OscConfig+0x2fa>
 8001b38:	e6ba      	b.n	80018b0 <HAL_RCC_OscConfig+0x84>
 8001b3a:	bf00      	nop
 8001b3c:	40021000 	.word	0x40021000
 8001b40:	42420060 	.word	0x42420060

08001b44 <HAL_RCC_GetSysClockFreq>:
{
 8001b44:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001b46:	4b19      	ldr	r3, [pc, #100]	; (8001bac <HAL_RCC_GetSysClockFreq+0x68>)
{
 8001b48:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001b4a:	ac02      	add	r4, sp, #8
 8001b4c:	f103 0510 	add.w	r5, r3, #16
 8001b50:	4622      	mov	r2, r4
 8001b52:	6818      	ldr	r0, [r3, #0]
 8001b54:	6859      	ldr	r1, [r3, #4]
 8001b56:	3308      	adds	r3, #8
 8001b58:	c203      	stmia	r2!, {r0, r1}
 8001b5a:	42ab      	cmp	r3, r5
 8001b5c:	4614      	mov	r4, r2
 8001b5e:	d1f7      	bne.n	8001b50 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001b60:	2301      	movs	r3, #1
 8001b62:	f88d 3004 	strb.w	r3, [sp, #4]
 8001b66:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 8001b68:	4911      	ldr	r1, [pc, #68]	; (8001bb0 <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001b6a:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 8001b6e:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8001b70:	f003 020c 	and.w	r2, r3, #12
 8001b74:	2a08      	cmp	r2, #8
 8001b76:	d117      	bne.n	8001ba8 <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001b78:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8001b7c:	a806      	add	r0, sp, #24
 8001b7e:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001b80:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001b82:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001b86:	d50c      	bpl.n	8001ba2 <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001b88:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001b8a:	480a      	ldr	r0, [pc, #40]	; (8001bb4 <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001b8c:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001b90:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001b92:	aa06      	add	r2, sp, #24
 8001b94:	4413      	add	r3, r2
 8001b96:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001b9a:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8001b9e:	b007      	add	sp, #28
 8001ba0:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001ba2:	4805      	ldr	r0, [pc, #20]	; (8001bb8 <HAL_RCC_GetSysClockFreq+0x74>)
 8001ba4:	4350      	muls	r0, r2
 8001ba6:	e7fa      	b.n	8001b9e <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 8001ba8:	4802      	ldr	r0, [pc, #8]	; (8001bb4 <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 8001baa:	e7f8      	b.n	8001b9e <HAL_RCC_GetSysClockFreq+0x5a>
 8001bac:	08002d54 	.word	0x08002d54
 8001bb0:	40021000 	.word	0x40021000
 8001bb4:	007a1200 	.word	0x007a1200
 8001bb8:	003d0900 	.word	0x003d0900

08001bbc <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001bbc:	4a4d      	ldr	r2, [pc, #308]	; (8001cf4 <HAL_RCC_ClockConfig+0x138>)
{
 8001bbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001bc2:	6813      	ldr	r3, [r2, #0]
{
 8001bc4:	4605      	mov	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001bc6:	f003 0307 	and.w	r3, r3, #7
 8001bca:	428b      	cmp	r3, r1
{
 8001bcc:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001bce:	d328      	bcc.n	8001c22 <HAL_RCC_ClockConfig+0x66>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bd0:	682a      	ldr	r2, [r5, #0]
 8001bd2:	0791      	lsls	r1, r2, #30
 8001bd4:	d432      	bmi.n	8001c3c <HAL_RCC_ClockConfig+0x80>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bd6:	07d2      	lsls	r2, r2, #31
 8001bd8:	d438      	bmi.n	8001c4c <HAL_RCC_ClockConfig+0x90>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8001bda:	4a46      	ldr	r2, [pc, #280]	; (8001cf4 <HAL_RCC_ClockConfig+0x138>)
 8001bdc:	6813      	ldr	r3, [r2, #0]
 8001bde:	f003 0307 	and.w	r3, r3, #7
 8001be2:	429e      	cmp	r6, r3
 8001be4:	d373      	bcc.n	8001cce <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001be6:	682a      	ldr	r2, [r5, #0]
 8001be8:	4c43      	ldr	r4, [pc, #268]	; (8001cf8 <HAL_RCC_ClockConfig+0x13c>)
 8001bea:	f012 0f04 	tst.w	r2, #4
 8001bee:	d179      	bne.n	8001ce4 <HAL_RCC_ClockConfig+0x128>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bf0:	0713      	lsls	r3, r2, #28
 8001bf2:	d506      	bpl.n	8001c02 <HAL_RCC_ClockConfig+0x46>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001bf4:	6863      	ldr	r3, [r4, #4]
 8001bf6:	692a      	ldr	r2, [r5, #16]
 8001bf8:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001bfc:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001c00:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001c02:	f7ff ff9f 	bl	8001b44 <HAL_RCC_GetSysClockFreq>
 8001c06:	6863      	ldr	r3, [r4, #4]
 8001c08:	4a3c      	ldr	r2, [pc, #240]	; (8001cfc <HAL_RCC_ClockConfig+0x140>)
 8001c0a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001c0e:	5cd3      	ldrb	r3, [r2, r3]
 8001c10:	40d8      	lsrs	r0, r3
 8001c12:	4b3b      	ldr	r3, [pc, #236]	; (8001d00 <HAL_RCC_ClockConfig+0x144>)
 8001c14:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001c16:	2000      	movs	r0, #0
 8001c18:	f7ff f932 	bl	8000e80 <HAL_InitTick>
  return HAL_OK;
 8001c1c:	2000      	movs	r0, #0
}
 8001c1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c22:	6813      	ldr	r3, [r2, #0]
 8001c24:	f023 0307 	bic.w	r3, r3, #7
 8001c28:	430b      	orrs	r3, r1
 8001c2a:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001c2c:	6813      	ldr	r3, [r2, #0]
 8001c2e:	f003 0307 	and.w	r3, r3, #7
 8001c32:	4299      	cmp	r1, r3
 8001c34:	d0cc      	beq.n	8001bd0 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 8001c36:	2001      	movs	r0, #1
 8001c38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c3c:	492e      	ldr	r1, [pc, #184]	; (8001cf8 <HAL_RCC_ClockConfig+0x13c>)
 8001c3e:	68a8      	ldr	r0, [r5, #8]
 8001c40:	684b      	ldr	r3, [r1, #4]
 8001c42:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001c46:	4303      	orrs	r3, r0
 8001c48:	604b      	str	r3, [r1, #4]
 8001c4a:	e7c4      	b.n	8001bd6 <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c4c:	686a      	ldr	r2, [r5, #4]
 8001c4e:	4c2a      	ldr	r4, [pc, #168]	; (8001cf8 <HAL_RCC_ClockConfig+0x13c>)
 8001c50:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c52:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c54:	d11c      	bne.n	8001c90 <HAL_RCC_ClockConfig+0xd4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c56:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c5a:	d0ec      	beq.n	8001c36 <HAL_RCC_ClockConfig+0x7a>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c5c:	6863      	ldr	r3, [r4, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c5e:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c62:	f023 0303 	bic.w	r3, r3, #3
 8001c66:	4313      	orrs	r3, r2
 8001c68:	6063      	str	r3, [r4, #4]
    tickstart = HAL_GetTick();
 8001c6a:	f7ff f94b 	bl	8000f04 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c6e:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 8001c70:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c72:	2b01      	cmp	r3, #1
 8001c74:	d114      	bne.n	8001ca0 <HAL_RCC_ClockConfig+0xe4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c76:	6863      	ldr	r3, [r4, #4]
 8001c78:	f003 030c 	and.w	r3, r3, #12
 8001c7c:	2b04      	cmp	r3, #4
 8001c7e:	d0ac      	beq.n	8001bda <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c80:	f7ff f940 	bl	8000f04 <HAL_GetTick>
 8001c84:	1bc0      	subs	r0, r0, r7
 8001c86:	4540      	cmp	r0, r8
 8001c88:	d9f5      	bls.n	8001c76 <HAL_RCC_ClockConfig+0xba>
          return HAL_TIMEOUT;
 8001c8a:	2003      	movs	r0, #3
 8001c8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c90:	2a02      	cmp	r2, #2
 8001c92:	d102      	bne.n	8001c9a <HAL_RCC_ClockConfig+0xde>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c94:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001c98:	e7df      	b.n	8001c5a <HAL_RCC_ClockConfig+0x9e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c9a:	f013 0f02 	tst.w	r3, #2
 8001c9e:	e7dc      	b.n	8001c5a <HAL_RCC_ClockConfig+0x9e>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ca0:	2b02      	cmp	r3, #2
 8001ca2:	d10f      	bne.n	8001cc4 <HAL_RCC_ClockConfig+0x108>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ca4:	6863      	ldr	r3, [r4, #4]
 8001ca6:	f003 030c 	and.w	r3, r3, #12
 8001caa:	2b08      	cmp	r3, #8
 8001cac:	d095      	beq.n	8001bda <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cae:	f7ff f929 	bl	8000f04 <HAL_GetTick>
 8001cb2:	1bc0      	subs	r0, r0, r7
 8001cb4:	4540      	cmp	r0, r8
 8001cb6:	d9f5      	bls.n	8001ca4 <HAL_RCC_ClockConfig+0xe8>
 8001cb8:	e7e7      	b.n	8001c8a <HAL_RCC_ClockConfig+0xce>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cba:	f7ff f923 	bl	8000f04 <HAL_GetTick>
 8001cbe:	1bc0      	subs	r0, r0, r7
 8001cc0:	4540      	cmp	r0, r8
 8001cc2:	d8e2      	bhi.n	8001c8a <HAL_RCC_ClockConfig+0xce>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001cc4:	6863      	ldr	r3, [r4, #4]
 8001cc6:	f013 0f0c 	tst.w	r3, #12
 8001cca:	d1f6      	bne.n	8001cba <HAL_RCC_ClockConfig+0xfe>
 8001ccc:	e785      	b.n	8001bda <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cce:	6813      	ldr	r3, [r2, #0]
 8001cd0:	f023 0307 	bic.w	r3, r3, #7
 8001cd4:	4333      	orrs	r3, r6
 8001cd6:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001cd8:	6813      	ldr	r3, [r2, #0]
 8001cda:	f003 0307 	and.w	r3, r3, #7
 8001cde:	429e      	cmp	r6, r3
 8001ce0:	d1a9      	bne.n	8001c36 <HAL_RCC_ClockConfig+0x7a>
 8001ce2:	e780      	b.n	8001be6 <HAL_RCC_ClockConfig+0x2a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ce4:	6863      	ldr	r3, [r4, #4]
 8001ce6:	68e9      	ldr	r1, [r5, #12]
 8001ce8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001cec:	430b      	orrs	r3, r1
 8001cee:	6063      	str	r3, [r4, #4]
 8001cf0:	e77e      	b.n	8001bf0 <HAL_RCC_ClockConfig+0x34>
 8001cf2:	bf00      	nop
 8001cf4:	40022000 	.word	0x40022000
 8001cf8:	40021000 	.word	0x40021000
 8001cfc:	08002d71 	.word	0x08002d71
 8001d00:	2000000c 	.word	0x2000000c

08001d04 <HAL_RCC_GetHCLKFreq>:
}
 8001d04:	4b01      	ldr	r3, [pc, #4]	; (8001d0c <HAL_RCC_GetHCLKFreq+0x8>)
 8001d06:	6818      	ldr	r0, [r3, #0]
 8001d08:	4770      	bx	lr
 8001d0a:	bf00      	nop
 8001d0c:	2000000c 	.word	0x2000000c

08001d10 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001d10:	6803      	ldr	r3, [r0, #0]
{
 8001d12:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001d16:	07d9      	lsls	r1, r3, #31
{
 8001d18:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001d1a:	d520      	bpl.n	8001d5e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d1c:	4c35      	ldr	r4, [pc, #212]	; (8001df4 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8001d1e:	69e3      	ldr	r3, [r4, #28]
 8001d20:	00da      	lsls	r2, r3, #3
 8001d22:	d432      	bmi.n	8001d8a <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 8001d24:	2701      	movs	r7, #1
    __HAL_RCC_PWR_CLK_ENABLE();
 8001d26:	69e3      	ldr	r3, [r4, #28]
 8001d28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d2c:	61e3      	str	r3, [r4, #28]
 8001d2e:	69e3      	ldr	r3, [r4, #28]
 8001d30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d34:	9301      	str	r3, [sp, #4]
 8001d36:	9b01      	ldr	r3, [sp, #4]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d38:	4e2f      	ldr	r6, [pc, #188]	; (8001df8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8001d3a:	6833      	ldr	r3, [r6, #0]
 8001d3c:	05db      	lsls	r3, r3, #23
 8001d3e:	d526      	bpl.n	8001d8e <HAL_RCCEx_PeriphCLKConfig+0x7e>
        }
      }
    }
      
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001d40:	6a23      	ldr	r3, [r4, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001d42:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001d46:	d136      	bne.n	8001db6 <HAL_RCCEx_PeriphCLKConfig+0xa6>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8001d48:	6a23      	ldr	r3, [r4, #32]
 8001d4a:	686a      	ldr	r2, [r5, #4]
 8001d4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d50:	4313      	orrs	r3, r2
 8001d52:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001d54:	b11f      	cbz	r7, 8001d5e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d56:	69e3      	ldr	r3, [r4, #28]
 8001d58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d5c:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001d5e:	6828      	ldr	r0, [r5, #0]
 8001d60:	0783      	lsls	r3, r0, #30
 8001d62:	d506      	bpl.n	8001d72 <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
    
    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001d64:	4a23      	ldr	r2, [pc, #140]	; (8001df4 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8001d66:	68a9      	ldr	r1, [r5, #8]
 8001d68:	6853      	ldr	r3, [r2, #4]
 8001d6a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001d6e:	430b      	orrs	r3, r1
 8001d70:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001d72:	f010 0010 	ands.w	r0, r0, #16
 8001d76:	d01b      	beq.n	8001db0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001d78:	4a1e      	ldr	r2, [pc, #120]	; (8001df4 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8001d7a:	68e9      	ldr	r1, [r5, #12]
 8001d7c:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001d7e:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001d80:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001d84:	430b      	orrs	r3, r1
 8001d86:	6053      	str	r3, [r2, #4]
 8001d88:	e012      	b.n	8001db0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus       pwrclkchanged = RESET;
 8001d8a:	2700      	movs	r7, #0
 8001d8c:	e7d4      	b.n	8001d38 <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d8e:	6833      	ldr	r3, [r6, #0]
 8001d90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d94:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001d96:	f7ff f8b5 	bl	8000f04 <HAL_GetTick>
 8001d9a:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d9c:	6833      	ldr	r3, [r6, #0]
 8001d9e:	05d8      	lsls	r0, r3, #23
 8001da0:	d4ce      	bmi.n	8001d40 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001da2:	f7ff f8af 	bl	8000f04 <HAL_GetTick>
 8001da6:	eba0 0008 	sub.w	r0, r0, r8
 8001daa:	2864      	cmp	r0, #100	; 0x64
 8001dac:	d9f6      	bls.n	8001d9c <HAL_RCCEx_PeriphCLKConfig+0x8c>
          return HAL_TIMEOUT;
 8001dae:	2003      	movs	r0, #3
}
 8001db0:	b002      	add	sp, #8
 8001db2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001db6:	686a      	ldr	r2, [r5, #4]
 8001db8:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d0c3      	beq.n	8001d48 <HAL_RCCEx_PeriphCLKConfig+0x38>
      __HAL_RCC_BACKUPRESET_FORCE();
 8001dc0:	2001      	movs	r0, #1
 8001dc2:	4a0e      	ldr	r2, [pc, #56]	; (8001dfc <HAL_RCCEx_PeriphCLKConfig+0xec>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001dc4:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8001dc6:	6010      	str	r0, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001dc8:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001dca:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001dce:	6010      	str	r0, [r2, #0]
      RCC->BDCR = temp_reg;
 8001dd0:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001dd2:	07d9      	lsls	r1, r3, #31
 8001dd4:	d5b8      	bpl.n	8001d48 <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 8001dd6:	f7ff f895 	bl	8000f04 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dda:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8001dde:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001de0:	6a23      	ldr	r3, [r4, #32]
 8001de2:	079a      	lsls	r2, r3, #30
 8001de4:	d4b0      	bmi.n	8001d48 <HAL_RCCEx_PeriphCLKConfig+0x38>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001de6:	f7ff f88d 	bl	8000f04 <HAL_GetTick>
 8001dea:	1b80      	subs	r0, r0, r6
 8001dec:	4540      	cmp	r0, r8
 8001dee:	d9f7      	bls.n	8001de0 <HAL_RCCEx_PeriphCLKConfig+0xd0>
 8001df0:	e7dd      	b.n	8001dae <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8001df2:	bf00      	nop
 8001df4:	40021000 	.word	0x40021000
 8001df8:	40007000 	.word	0x40007000
 8001dfc:	42420440 	.word	0x42420440

08001e00 <HAL_TIM_Base_Start_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001e00:	6803      	ldr	r3, [r0, #0]
   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);

  /* Return function status */
  return HAL_OK;
}
 8001e02:	2000      	movs	r0, #0
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001e04:	68da      	ldr	r2, [r3, #12]
 8001e06:	f042 0201 	orr.w	r2, r2, #1
 8001e0a:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(htim);
 8001e0c:	681a      	ldr	r2, [r3, #0]
 8001e0e:	f042 0201 	orr.w	r2, r2, #1
 8001e12:	601a      	str	r2, [r3, #0]
}
 8001e14:	4770      	bx	lr

08001e16 <HAL_TIM_IC_MspInit>:
 8001e16:	4770      	bx	lr

08001e18 <HAL_TIM_ConfigClockSource>:
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)
{
  uint32_t tmpsmcr = 0U;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001e18:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8001e1c:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 8001e1e:	2b01      	cmp	r3, #1
 8001e20:	f04f 0302 	mov.w	r3, #2
 8001e24:	d01c      	beq.n	8001e60 <HAL_TIM_ConfigClockSource+0x48>
 8001e26:	2201      	movs	r2, #1

  htim->State = HAL_TIM_STATE_BUSY;
 8001e28:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001e2c:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(htim);
 8001e2e:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8001e32:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001e34:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8001e38:	f022 0277 	bic.w	r2, r2, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8001e3c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001e3e:	680a      	ldr	r2, [r1, #0]
 8001e40:	2a40      	cmp	r2, #64	; 0x40
 8001e42:	d079      	beq.n	8001f38 <HAL_TIM_ConfigClockSource+0x120>
 8001e44:	d819      	bhi.n	8001e7a <HAL_TIM_ConfigClockSource+0x62>
 8001e46:	2a10      	cmp	r2, #16
 8001e48:	f000 8093 	beq.w	8001f72 <HAL_TIM_ConfigClockSource+0x15a>
 8001e4c:	d80a      	bhi.n	8001e64 <HAL_TIM_ConfigClockSource+0x4c>
 8001e4e:	2a00      	cmp	r2, #0
 8001e50:	f000 8089 	beq.w	8001f66 <HAL_TIM_ConfigClockSource+0x14e>
    break;

  default:
    break;
  }
  htim->State = HAL_TIM_STATE_READY;
 8001e54:	2301      	movs	r3, #1
 8001e56:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8001e60:	4618      	mov	r0, r3

  return HAL_OK;
}
 8001e62:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8001e64:	2a20      	cmp	r2, #32
 8001e66:	f000 808a 	beq.w	8001f7e <HAL_TIM_ConfigClockSource+0x166>
 8001e6a:	2a30      	cmp	r2, #48	; 0x30
 8001e6c:	d1f2      	bne.n	8001e54 <HAL_TIM_ConfigClockSource+0x3c>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0U;

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8001e6e:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8001e70:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001e74:	f042 0237 	orr.w	r2, r2, #55	; 0x37
 8001e78:	e036      	b.n	8001ee8 <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 8001e7a:	2a70      	cmp	r2, #112	; 0x70
 8001e7c:	d036      	beq.n	8001eec <HAL_TIM_ConfigClockSource+0xd4>
 8001e7e:	d81b      	bhi.n	8001eb8 <HAL_TIM_ConfigClockSource+0xa0>
 8001e80:	2a50      	cmp	r2, #80	; 0x50
 8001e82:	d042      	beq.n	8001f0a <HAL_TIM_ConfigClockSource+0xf2>
 8001e84:	2a60      	cmp	r2, #96	; 0x60
 8001e86:	d1e5      	bne.n	8001e54 <HAL_TIM_ConfigClockSource+0x3c>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001e88:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001e8a:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001e8c:	f024 0410 	bic.w	r4, r4, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001e90:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001e92:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001e94:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 8001e96:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001e98:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001e9c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8001ea0:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001ea4:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8001ea8:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8001eaa:	621a      	str	r2, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8001eac:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001eae:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001eb2:	f042 0267 	orr.w	r2, r2, #103	; 0x67
 8001eb6:	e017      	b.n	8001ee8 <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 8001eb8:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8001ebc:	d011      	beq.n	8001ee2 <HAL_TIM_ConfigClockSource+0xca>
 8001ebe:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8001ec2:	d1c7      	bne.n	8001e54 <HAL_TIM_ConfigClockSource+0x3c>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001ec4:	688a      	ldr	r2, [r1, #8]
 8001ec6:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8001ec8:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001eca:	68c9      	ldr	r1, [r1, #12]
 8001ecc:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001ece:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001ed2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001ed6:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001ed8:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001eda:	689a      	ldr	r2, [r3, #8]
 8001edc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001ee0:	e002      	b.n	8001ee8 <HAL_TIM_ConfigClockSource+0xd0>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8001ee2:	689a      	ldr	r2, [r3, #8]
 8001ee4:	f022 0207 	bic.w	r2, r2, #7
   TIMx->SMCR = tmpsmcr;
 8001ee8:	609a      	str	r2, [r3, #8]
 8001eea:	e7b3      	b.n	8001e54 <HAL_TIM_ConfigClockSource+0x3c>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001eec:	688a      	ldr	r2, [r1, #8]
 8001eee:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8001ef0:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001ef2:	68c9      	ldr	r1, [r1, #12]
 8001ef4:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001ef6:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001efa:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001efe:	4322      	orrs	r2, r4
  TIMx->SMCR = tmpsmcr;
 8001f00:	609a      	str	r2, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 8001f02:	689a      	ldr	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001f04:	f042 0277 	orr.w	r2, r2, #119	; 0x77
 8001f08:	e7ee      	b.n	8001ee8 <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001f0a:	684c      	ldr	r4, [r1, #4]
 8001f0c:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8001f0e:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001f10:	6a1d      	ldr	r5, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001f12:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001f16:	f025 0501 	bic.w	r5, r5, #1
 8001f1a:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001f1c:	699a      	ldr	r2, [r3, #24]
  tmpccer |= TIM_ICPolarity;
 8001f1e:	4321      	orrs	r1, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001f20:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001f24:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8001f28:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001f2a:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8001f2c:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001f2e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001f32:	f042 0257 	orr.w	r2, r2, #87	; 0x57
 8001f36:	e7d7      	b.n	8001ee8 <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001f38:	684c      	ldr	r4, [r1, #4]
 8001f3a:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8001f3c:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001f3e:	6a1d      	ldr	r5, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001f40:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001f44:	f025 0501 	bic.w	r5, r5, #1
 8001f48:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001f4a:	699a      	ldr	r2, [r3, #24]
  tmpccer |= TIM_ICPolarity;
 8001f4c:	4321      	orrs	r1, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001f4e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001f52:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8001f56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001f58:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8001f5a:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001f5c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001f60:	f042 0247 	orr.w	r2, r2, #71	; 0x47
 8001f64:	e7c0      	b.n	8001ee8 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8001f66:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001f68:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001f6c:	f042 0207 	orr.w	r2, r2, #7
 8001f70:	e7ba      	b.n	8001ee8 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8001f72:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001f74:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001f78:	f042 0217 	orr.w	r2, r2, #23
 8001f7c:	e7b4      	b.n	8001ee8 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8001f7e:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001f80:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001f84:	f042 0227 	orr.w	r2, r2, #39	; 0x27
 8001f88:	e7ae      	b.n	8001ee8 <HAL_TIM_ConfigClockSource+0xd0>

08001f8a <HAL_TIM_OC_DelayElapsedCallback>:
 8001f8a:	4770      	bx	lr

08001f8c <HAL_TIM_PWM_PulseFinishedCallback>:
 8001f8c:	4770      	bx	lr

08001f8e <HAL_TIM_TriggerCallback>:
 8001f8e:	4770      	bx	lr

08001f90 <HAL_TIM_IRQHandler>:
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001f90:	6803      	ldr	r3, [r0, #0]
{
 8001f92:	b510      	push	{r4, lr}
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001f94:	691a      	ldr	r2, [r3, #16]
{
 8001f96:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001f98:	0791      	lsls	r1, r2, #30
 8001f9a:	d50e      	bpl.n	8001fba <HAL_TIM_IRQHandler+0x2a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8001f9c:	68da      	ldr	r2, [r3, #12]
 8001f9e:	0792      	lsls	r2, r2, #30
 8001fa0:	d50b      	bpl.n	8001fba <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001fa2:	f06f 0202 	mvn.w	r2, #2
 8001fa6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001fa8:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001faa:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001fac:	7702      	strb	r2, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001fae:	079b      	lsls	r3, r3, #30
 8001fb0:	d077      	beq.n	80020a2 <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 8001fb2:	f000 fae5 	bl	8002580 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001fba:	6823      	ldr	r3, [r4, #0]
 8001fbc:	691a      	ldr	r2, [r3, #16]
 8001fbe:	0750      	lsls	r0, r2, #29
 8001fc0:	d510      	bpl.n	8001fe4 <HAL_TIM_IRQHandler+0x54>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8001fc2:	68da      	ldr	r2, [r3, #12]
 8001fc4:	0751      	lsls	r1, r2, #29
 8001fc6:	d50d      	bpl.n	8001fe4 <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001fc8:	f06f 0204 	mvn.w	r2, #4
 8001fcc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001fce:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001fd0:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001fd2:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001fd4:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8001fd8:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001fda:	d068      	beq.n	80020ae <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8001fdc:	f000 fad0 	bl	8002580 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001fe4:	6823      	ldr	r3, [r4, #0]
 8001fe6:	691a      	ldr	r2, [r3, #16]
 8001fe8:	0712      	lsls	r2, r2, #28
 8001fea:	d50f      	bpl.n	800200c <HAL_TIM_IRQHandler+0x7c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8001fec:	68da      	ldr	r2, [r3, #12]
 8001fee:	0710      	lsls	r0, r2, #28
 8001ff0:	d50c      	bpl.n	800200c <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001ff2:	f06f 0208 	mvn.w	r2, #8
 8001ff6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001ff8:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001ffa:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001ffc:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001ffe:	0799      	lsls	r1, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 8002000:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002002:	d05a      	beq.n	80020ba <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8002004:	f000 fabc 	bl	8002580 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002008:	2300      	movs	r3, #0
 800200a:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800200c:	6823      	ldr	r3, [r4, #0]
 800200e:	691a      	ldr	r2, [r3, #16]
 8002010:	06d2      	lsls	r2, r2, #27
 8002012:	d510      	bpl.n	8002036 <HAL_TIM_IRQHandler+0xa6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8002014:	68da      	ldr	r2, [r3, #12]
 8002016:	06d0      	lsls	r0, r2, #27
 8002018:	d50d      	bpl.n	8002036 <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800201a:	f06f 0210 	mvn.w	r2, #16
 800201e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002020:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002022:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002024:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002026:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 800202a:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800202c:	d04b      	beq.n	80020c6 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 800202e:	f000 faa7 	bl	8002580 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002032:	2300      	movs	r3, #0
 8002034:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002036:	6823      	ldr	r3, [r4, #0]
 8002038:	691a      	ldr	r2, [r3, #16]
 800203a:	07d1      	lsls	r1, r2, #31
 800203c:	d508      	bpl.n	8002050 <HAL_TIM_IRQHandler+0xc0>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 800203e:	68da      	ldr	r2, [r3, #12]
 8002040:	07d2      	lsls	r2, r2, #31
 8002042:	d505      	bpl.n	8002050 <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002044:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 8002048:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800204a:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800204c:	f000 fac2 	bl	80025d4 <HAL_TIM_PeriodElapsedCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002050:	6823      	ldr	r3, [r4, #0]
 8002052:	691a      	ldr	r2, [r3, #16]
 8002054:	0610      	lsls	r0, r2, #24
 8002056:	d508      	bpl.n	800206a <HAL_TIM_IRQHandler+0xda>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8002058:	68da      	ldr	r2, [r3, #12]
 800205a:	0611      	lsls	r1, r2, #24
 800205c:	d505      	bpl.n	800206a <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800205e:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 8002062:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002064:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8002066:	f000 f9ae 	bl	80023c6 <HAL_TIMEx_BreakCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800206a:	6823      	ldr	r3, [r4, #0]
 800206c:	691a      	ldr	r2, [r3, #16]
 800206e:	0652      	lsls	r2, r2, #25
 8002070:	d508      	bpl.n	8002084 <HAL_TIM_IRQHandler+0xf4>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8002072:	68da      	ldr	r2, [r3, #12]
 8002074:	0650      	lsls	r0, r2, #25
 8002076:	d505      	bpl.n	8002084 <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002078:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 800207c:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800207e:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8002080:	f7ff ff85 	bl	8001f8e <HAL_TIM_TriggerCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002084:	6823      	ldr	r3, [r4, #0]
 8002086:	691a      	ldr	r2, [r3, #16]
 8002088:	0691      	lsls	r1, r2, #26
 800208a:	d522      	bpl.n	80020d2 <HAL_TIM_IRQHandler+0x142>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 800208c:	68da      	ldr	r2, [r3, #12]
 800208e:	0692      	lsls	r2, r2, #26
 8002090:	d51f      	bpl.n	80020d2 <HAL_TIM_IRQHandler+0x142>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002092:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 8002096:	4620      	mov	r0, r4
}
 8002098:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800209c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 800209e:	f000 b991 	b.w	80023c4 <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80020a2:	f7ff ff72 	bl	8001f8a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020a6:	4620      	mov	r0, r4
 80020a8:	f7ff ff70 	bl	8001f8c <HAL_TIM_PWM_PulseFinishedCallback>
 80020ac:	e783      	b.n	8001fb6 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020ae:	f7ff ff6c 	bl	8001f8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020b2:	4620      	mov	r0, r4
 80020b4:	f7ff ff6a 	bl	8001f8c <HAL_TIM_PWM_PulseFinishedCallback>
 80020b8:	e792      	b.n	8001fe0 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020ba:	f7ff ff66 	bl	8001f8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020be:	4620      	mov	r0, r4
 80020c0:	f7ff ff64 	bl	8001f8c <HAL_TIM_PWM_PulseFinishedCallback>
 80020c4:	e7a0      	b.n	8002008 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020c6:	f7ff ff60 	bl	8001f8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020ca:	4620      	mov	r0, r4
 80020cc:	f7ff ff5e 	bl	8001f8c <HAL_TIM_PWM_PulseFinishedCallback>
 80020d0:	e7af      	b.n	8002032 <HAL_TIM_IRQHandler+0xa2>
 80020d2:	bd10      	pop	{r4, pc}

080020d4 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80020d4:	4a1a      	ldr	r2, [pc, #104]	; (8002140 <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 80020d6:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80020d8:	4290      	cmp	r0, r2
 80020da:	d00a      	beq.n	80020f2 <TIM_Base_SetConfig+0x1e>
 80020dc:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80020e0:	d007      	beq.n	80020f2 <TIM_Base_SetConfig+0x1e>
 80020e2:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80020e6:	4290      	cmp	r0, r2
 80020e8:	d003      	beq.n	80020f2 <TIM_Base_SetConfig+0x1e>
 80020ea:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80020ee:	4290      	cmp	r0, r2
 80020f0:	d115      	bne.n	800211e <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= Structure->CounterMode;
 80020f2:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80020f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80020f8:	4313      	orrs	r3, r2
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80020fa:	4a11      	ldr	r2, [pc, #68]	; (8002140 <TIM_Base_SetConfig+0x6c>)
 80020fc:	4290      	cmp	r0, r2
 80020fe:	d00a      	beq.n	8002116 <TIM_Base_SetConfig+0x42>
 8002100:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002104:	d007      	beq.n	8002116 <TIM_Base_SetConfig+0x42>
 8002106:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800210a:	4290      	cmp	r0, r2
 800210c:	d003      	beq.n	8002116 <TIM_Base_SetConfig+0x42>
 800210e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002112:	4290      	cmp	r0, r2
 8002114:	d103      	bne.n	800211e <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002116:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8002118:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800211c:	4313      	orrs	r3, r2
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 800211e:	694a      	ldr	r2, [r1, #20]
  tmpcr1 &= ~TIM_CR1_ARPE;
 8002120:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8002124:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8002126:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002128:	688b      	ldr	r3, [r1, #8]
 800212a:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 800212c:	680b      	ldr	r3, [r1, #0]
 800212e:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002130:	4b03      	ldr	r3, [pc, #12]	; (8002140 <TIM_Base_SetConfig+0x6c>)
 8002132:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 8002134:	bf04      	itt	eq
 8002136:	690b      	ldreq	r3, [r1, #16]
 8002138:	6303      	streq	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 800213a:	2301      	movs	r3, #1
 800213c:	6143      	str	r3, [r0, #20]
 800213e:	4770      	bx	lr
 8002140:	40012c00 	.word	0x40012c00

08002144 <HAL_TIM_Base_Init>:
{
 8002144:	b510      	push	{r4, lr}
  if(htim == NULL)
 8002146:	4604      	mov	r4, r0
 8002148:	b1a0      	cbz	r0, 8002174 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 800214a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800214e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002152:	b91b      	cbnz	r3, 800215c <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8002154:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8002158:	f000 fd4e 	bl	8002bf8 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 800215c:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800215e:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8002160:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002164:	1d21      	adds	r1, r4, #4
 8002166:	f7ff ffb5 	bl	80020d4 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 800216a:	2301      	movs	r3, #1
  return HAL_OK;
 800216c:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 800216e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8002172:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002174:	2001      	movs	r0, #1
}
 8002176:	bd10      	pop	{r4, pc}

08002178 <HAL_TIM_IC_Init>:
{
 8002178:	b510      	push	{r4, lr}
  if(htim == NULL)
 800217a:	4604      	mov	r4, r0
 800217c:	b1a0      	cbz	r0, 80021a8 <HAL_TIM_IC_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 800217e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002182:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002186:	b91b      	cbnz	r3, 8002190 <HAL_TIM_IC_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8002188:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_IC_MspInit(htim);
 800218c:	f7ff fe43 	bl	8001e16 <HAL_TIM_IC_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8002190:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002192:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8002194:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002198:	1d21      	adds	r1, r4, #4
 800219a:	f7ff ff9b 	bl	80020d4 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 800219e:	2301      	movs	r3, #1
  return HAL_OK;
 80021a0:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 80021a2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80021a6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80021a8:	2001      	movs	r0, #1
}
 80021aa:	bd10      	pop	{r4, pc}

080021ac <TIM_TI1_SetConfig>:
{
 80021ac:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80021ae:	6a04      	ldr	r4, [r0, #32]
  if(IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80021b0:	4e12      	ldr	r6, [pc, #72]	; (80021fc <TIM_TI1_SetConfig+0x50>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80021b2:	f024 0401 	bic.w	r4, r4, #1
 80021b6:	6204      	str	r4, [r0, #32]
  if(IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80021b8:	42b0      	cmp	r0, r6
  tmpccmr1 = TIMx->CCMR1;
 80021ba:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 80021bc:	6a05      	ldr	r5, [r0, #32]
  if(IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80021be:	d00a      	beq.n	80021d6 <TIM_TI1_SetConfig+0x2a>
 80021c0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80021c4:	d007      	beq.n	80021d6 <TIM_TI1_SetConfig+0x2a>
 80021c6:	f5a6 3694 	sub.w	r6, r6, #75776	; 0x12800
 80021ca:	42b0      	cmp	r0, r6
 80021cc:	d003      	beq.n	80021d6 <TIM_TI1_SetConfig+0x2a>
 80021ce:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80021d2:	42b0      	cmp	r0, r6
 80021d4:	d10f      	bne.n	80021f6 <TIM_TI1_SetConfig+0x4a>
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80021d6:	f024 0403 	bic.w	r4, r4, #3
    tmpccmr1 |= TIM_ICSelection;
 80021da:	4322      	orrs	r2, r4
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80021dc:	011b      	lsls	r3, r3, #4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80021de:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80021e2:	b2db      	uxtb	r3, r3
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80021e4:	f025 050a 	bic.w	r5, r5, #10
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80021e8:	f001 010a 	and.w	r1, r1, #10
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80021ec:	431a      	orrs	r2, r3
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80021ee:	4329      	orrs	r1, r5
  TIMx->CCMR1 = tmpccmr1;
 80021f0:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80021f2:	6201      	str	r1, [r0, #32]
}
 80021f4:	bd70      	pop	{r4, r5, r6, pc}
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80021f6:	f044 0201 	orr.w	r2, r4, #1
 80021fa:	e7ef      	b.n	80021dc <TIM_TI1_SetConfig+0x30>
 80021fc:	40012c00 	.word	0x40012c00

08002200 <HAL_TIM_IC_ConfigChannel>:
{
 8002200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 8002202:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8002206:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8002208:	2b01      	cmp	r3, #1
{
 800220a:	460d      	mov	r5, r1
 800220c:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8002210:	d019      	beq.n	8002246 <HAL_TIM_IC_ConfigChannel+0x46>
 8002212:	2301      	movs	r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8002214:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_LOCK(htim);
 8002218:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  if (Channel == TIM_CHANNEL_1)
 800221c:	b9a2      	cbnz	r2, 8002248 <HAL_TIM_IC_ConfigChannel+0x48>
    TIM_TI1_SetConfig(htim->Instance,
 800221e:	68cb      	ldr	r3, [r1, #12]
 8002220:	6820      	ldr	r0, [r4, #0]
 8002222:	c906      	ldmia	r1, {r1, r2}
 8002224:	f7ff ffc2 	bl	80021ac <TIM_TI1_SetConfig>
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002228:	6823      	ldr	r3, [r4, #0]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800222a:	68a9      	ldr	r1, [r5, #8]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800222c:	699a      	ldr	r2, [r3, #24]
 800222e:	f022 020c 	bic.w	r2, r2, #12
 8002232:	619a      	str	r2, [r3, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002234:	699a      	ldr	r2, [r3, #24]
 8002236:	430a      	orrs	r2, r1
 8002238:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 800223a:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 800223c:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800223e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8002242:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8002246:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (Channel == TIM_CHANNEL_2)
 8002248:	2a04      	cmp	r2, #4
 800224a:	688e      	ldr	r6, [r1, #8]
 800224c:	6823      	ldr	r3, [r4, #0]
 800224e:	c982      	ldmia	r1, {r1, r7}
 8002250:	68e8      	ldr	r0, [r5, #12]
 8002252:	d11f      	bne.n	8002294 <HAL_TIM_IC_ConfigChannel+0x94>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002254:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8002256:	0300      	lsls	r0, r0, #12
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002258:	f022 0210 	bic.w	r2, r2, #16
 800225c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800225e:	699a      	ldr	r2, [r3, #24]
  tmpccer = TIMx->CCER;
 8002260:	6a1d      	ldr	r5, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8002262:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8002266:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800226a:	b280      	uxth	r0, r0
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800226c:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8002270:	0109      	lsls	r1, r1, #4
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8002272:	4302      	orrs	r2, r0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8002274:	f001 01a0 	and.w	r1, r1, #160	; 0xa0
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002278:	f025 00a0 	bic.w	r0, r5, #160	; 0xa0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800227c:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1 ;
 800227e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002280:	6219      	str	r1, [r3, #32]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8002282:	699a      	ldr	r2, [r3, #24]
 8002284:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002288:	619a      	str	r2, [r3, #24]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800228a:	699a      	ldr	r2, [r3, #24]
 800228c:	ea42 2606 	orr.w	r6, r2, r6, lsl #8
 8002290:	619e      	str	r6, [r3, #24]
 8002292:	e7d2      	b.n	800223a <HAL_TIM_IC_ConfigChannel+0x3a>
  else if (Channel == TIM_CHANNEL_3)
 8002294:	2a08      	cmp	r2, #8
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002296:	6a1a      	ldr	r2, [r3, #32]
  else if (Channel == TIM_CHANNEL_3)
 8002298:	d11c      	bne.n	80022d4 <HAL_TIM_IC_ConfigChannel+0xd4>
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800229a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800229e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80022a0:	69da      	ldr	r2, [r3, #28]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80022a2:	0100      	lsls	r0, r0, #4
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80022a4:	f022 0203 	bic.w	r2, r2, #3
  tmpccer = TIMx->CCER;
 80022a8:	6a1d      	ldr	r5, [r3, #32]
  tmpccmr2 |= TIM_ICSelection;
 80022aa:	433a      	orrs	r2, r7
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80022ac:	b2c0      	uxtb	r0, r0
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80022ae:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80022b2:	0209      	lsls	r1, r1, #8
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80022b4:	4302      	orrs	r2, r0
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80022b6:	f401 6120 	and.w	r1, r1, #2560	; 0xa00
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80022ba:	f425 6020 	bic.w	r0, r5, #2560	; 0xa00
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80022be:	4301      	orrs	r1, r0
  TIMx->CCMR2 = tmpccmr2;
 80022c0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80022c2:	6219      	str	r1, [r3, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80022c4:	69da      	ldr	r2, [r3, #28]
 80022c6:	f022 020c 	bic.w	r2, r2, #12
 80022ca:	61da      	str	r2, [r3, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80022cc:	69da      	ldr	r2, [r3, #28]
 80022ce:	4316      	orrs	r6, r2
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80022d0:	61de      	str	r6, [r3, #28]
 80022d2:	e7b2      	b.n	800223a <HAL_TIM_IC_ConfigChannel+0x3a>
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80022d4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80022d8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80022da:	69da      	ldr	r2, [r3, #28]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80022dc:	0300      	lsls	r0, r0, #12
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80022de:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  tmpccer = TIMx->CCER;
 80022e2:	6a1d      	ldr	r5, [r3, #32]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80022e4:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80022e8:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80022ec:	b280      	uxth	r0, r0
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 80022ee:	0309      	lsls	r1, r1, #12
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80022f0:	4310      	orrs	r0, r2
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 80022f2:	f401 5100 	and.w	r1, r1, #8192	; 0x2000
  tmpccer &= ~TIM_CCER_CC4P;
 80022f6:	f425 5200 	bic.w	r2, r5, #8192	; 0x2000
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 80022fa:	4311      	orrs	r1, r2
  TIMx->CCMR2 = tmpccmr2;
 80022fc:	61d8      	str	r0, [r3, #28]
  TIMx->CCER = tmpccer ;
 80022fe:	6219      	str	r1, [r3, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8002300:	69da      	ldr	r2, [r3, #28]
 8002302:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002306:	61da      	str	r2, [r3, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8002308:	69da      	ldr	r2, [r3, #28]
 800230a:	ea42 2606 	orr.w	r6, r2, r6, lsl #8
 800230e:	e7df      	b.n	80022d0 <HAL_TIM_IC_ConfigChannel+0xd0>

08002310 <TIM_CCxChannelCmd>:
  * @param  ChannelState : specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002310:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 8002312:	2401      	movs	r4, #1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002314:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << Channel;
 8002316:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 8002318:	ea23 0304 	bic.w	r3, r3, r4
 800231c:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 800231e:	6a03      	ldr	r3, [r0, #32]
 8002320:	408a      	lsls	r2, r1
 8002322:	431a      	orrs	r2, r3
 8002324:	6202      	str	r2, [r0, #32]
 8002326:	bd10      	pop	{r4, pc}

08002328 <HAL_TIM_IC_Start_IT>:
{
 8002328:	b510      	push	{r4, lr}
 800232a:	4604      	mov	r4, r0
  switch (Channel)
 800232c:	290c      	cmp	r1, #12
 800232e:	d80d      	bhi.n	800234c <HAL_TIM_IC_Start_IT+0x24>
 8002330:	e8df f001 	tbb	[pc, r1]
 8002334:	0c0c0c07 	.word	0x0c0c0c07
 8002338:	0c0c0c17 	.word	0x0c0c0c17
 800233c:	0c0c0c1c 	.word	0x0c0c0c1c
 8002340:	21          	.byte	0x21
 8002341:	00          	.byte	0x00
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002342:	6802      	ldr	r2, [r0, #0]
 8002344:	68d3      	ldr	r3, [r2, #12]
 8002346:	f043 0302 	orr.w	r3, r3, #2
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800234a:	60d3      	str	r3, [r2, #12]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800234c:	6820      	ldr	r0, [r4, #0]
 800234e:	2201      	movs	r2, #1
 8002350:	f7ff ffde 	bl	8002310 <TIM_CCxChannelCmd>
  __HAL_TIM_ENABLE(htim);
 8002354:	6822      	ldr	r2, [r4, #0]
}
 8002356:	2000      	movs	r0, #0
  __HAL_TIM_ENABLE(htim);
 8002358:	6813      	ldr	r3, [r2, #0]
 800235a:	f043 0301 	orr.w	r3, r3, #1
 800235e:	6013      	str	r3, [r2, #0]
}
 8002360:	bd10      	pop	{r4, pc}
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002362:	6802      	ldr	r2, [r0, #0]
 8002364:	68d3      	ldr	r3, [r2, #12]
 8002366:	f043 0304 	orr.w	r3, r3, #4
 800236a:	e7ee      	b.n	800234a <HAL_TIM_IC_Start_IT+0x22>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800236c:	6802      	ldr	r2, [r0, #0]
 800236e:	68d3      	ldr	r3, [r2, #12]
 8002370:	f043 0308 	orr.w	r3, r3, #8
 8002374:	e7e9      	b.n	800234a <HAL_TIM_IC_Start_IT+0x22>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002376:	6802      	ldr	r2, [r0, #0]
 8002378:	68d3      	ldr	r3, [r2, #12]
 800237a:	f043 0310 	orr.w	r3, r3, #16
 800237e:	e7e4      	b.n	800234a <HAL_TIM_IC_Start_IT+0x22>

08002380 <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 8002380:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8002384:	b510      	push	{r4, lr}
  __HAL_LOCK(htim);
 8002386:	2b01      	cmp	r3, #1
 8002388:	f04f 0302 	mov.w	r3, #2
 800238c:	d018      	beq.n	80023c0 <HAL_TIMEx_MasterConfigSynchronization+0x40>

  htim->State = HAL_TIM_STATE_BUSY;
 800238e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8002392:	6803      	ldr	r3, [r0, #0]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8002394:	680c      	ldr	r4, [r1, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8002396:	685a      	ldr	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8002398:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800239a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800239e:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 80023a0:	685a      	ldr	r2, [r3, #4]
 80023a2:	4322      	orrs	r2, r4
 80023a4:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 80023a6:	689a      	ldr	r2, [r3, #8]
 80023a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80023ac:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 80023ae:	689a      	ldr	r2, [r3, #8]
 80023b0:	430a      	orrs	r2, r1
 80023b2:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 80023b4:	2301      	movs	r3, #1
 80023b6:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80023ba:	2300      	movs	r3, #0
 80023bc:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 80023c0:	4618      	mov	r0, r3

  return HAL_OK;
}
 80023c2:	bd10      	pop	{r4, pc}

080023c4 <HAL_TIMEx_CommutationCallback>:
 80023c4:	4770      	bx	lr

080023c6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80023c6:	4770      	bx	lr

080023c8 <MX_ADC1_Init>:
{
  ADC_ChannelConfTypeDef sConfig;

    /**Common config 
    */
  hadc1.Instance = ADC1;
 80023c8:	4825      	ldr	r0, [pc, #148]	; (8002460 <MX_ADC1_Init+0x98>)
 80023ca:	4b26      	ldr	r3, [pc, #152]	; (8002464 <MX_ADC1_Init+0x9c>)
{
 80023cc:	b530      	push	{r4, r5, lr}
  hadc1.Instance = ADC1;
 80023ce:	6003      	str	r3, [r0, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80023d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80023d4:	6083      	str	r3, [r0, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 80023d6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  hadc1.Init.ContinuousConvMode = DISABLE;
 80023da:	2400      	movs	r4, #0
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 80023dc:	61c3      	str	r3, [r0, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.NbrOfConversion = 4;
 80023de:	2304      	movs	r3, #4
{
 80023e0:	b085      	sub	sp, #20
  hadc1.Init.ContinuousConvMode = DISABLE;
 80023e2:	60c4      	str	r4, [r0, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80023e4:	6144      	str	r4, [r0, #20]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80023e6:	6044      	str	r4, [r0, #4]
  hadc1.Init.NbrOfConversion = 4;
 80023e8:	6103      	str	r3, [r0, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80023ea:	f7fe ff39 	bl	8001260 <HAL_ADC_Init>
 80023ee:	b118      	cbz	r0, 80023f8 <MX_ADC1_Init+0x30>
  {
    _Error_Handler(__FILE__, __LINE__);
 80023f0:	2145      	movs	r1, #69	; 0x45
 80023f2:	481d      	ldr	r0, [pc, #116]	; (8002468 <MX_ADC1_Init+0xa0>)
 80023f4:	f000 fabc 	bl	8002970 <_Error_Handler>
  }

    /**Configure Regular Channel 
    */
  sConfig.Channel = ADC_CHANNEL_0;
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80023f8:	2501      	movs	r5, #1
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80023fa:	a901      	add	r1, sp, #4
 80023fc:	4818      	ldr	r0, [pc, #96]	; (8002460 <MX_ADC1_Init+0x98>)
  sConfig.Channel = ADC_CHANNEL_0;
 80023fe:	9401      	str	r4, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002400:	9502      	str	r5, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8002402:	9403      	str	r4, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002404:	f7fe fdc0 	bl	8000f88 <HAL_ADC_ConfigChannel>
 8002408:	b118      	cbz	r0, 8002412 <MX_ADC1_Init+0x4a>
  {
    _Error_Handler(__FILE__, __LINE__);
 800240a:	214f      	movs	r1, #79	; 0x4f
 800240c:	4816      	ldr	r0, [pc, #88]	; (8002468 <MX_ADC1_Init+0xa0>)
 800240e:	f000 faaf 	bl	8002970 <_Error_Handler>
  }

    /**Configure Regular Channel 
    */
  sConfig.Channel = ADC_CHANNEL_1;
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002412:	2402      	movs	r4, #2
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002414:	a901      	add	r1, sp, #4
 8002416:	4812      	ldr	r0, [pc, #72]	; (8002460 <MX_ADC1_Init+0x98>)
  sConfig.Channel = ADC_CHANNEL_1;
 8002418:	9501      	str	r5, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800241a:	9402      	str	r4, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800241c:	f7fe fdb4 	bl	8000f88 <HAL_ADC_ConfigChannel>
 8002420:	b118      	cbz	r0, 800242a <MX_ADC1_Init+0x62>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002422:	2158      	movs	r1, #88	; 0x58
 8002424:	4810      	ldr	r0, [pc, #64]	; (8002468 <MX_ADC1_Init+0xa0>)
 8002426:	f000 faa3 	bl	8002970 <_Error_Handler>
  }

    /**Configure Regular Channel 
    */
  sConfig.Channel = ADC_CHANNEL_2;
 800242a:	9401      	str	r4, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800242c:	2403      	movs	r4, #3
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800242e:	a901      	add	r1, sp, #4
 8002430:	480b      	ldr	r0, [pc, #44]	; (8002460 <MX_ADC1_Init+0x98>)
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8002432:	9402      	str	r4, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002434:	f7fe fda8 	bl	8000f88 <HAL_ADC_ConfigChannel>
 8002438:	b118      	cbz	r0, 8002442 <MX_ADC1_Init+0x7a>
  {
    _Error_Handler(__FILE__, __LINE__);
 800243a:	2161      	movs	r1, #97	; 0x61
 800243c:	480a      	ldr	r0, [pc, #40]	; (8002468 <MX_ADC1_Init+0xa0>)
 800243e:	f000 fa97 	bl	8002970 <_Error_Handler>
  }

    /**Configure Regular Channel 
    */
  sConfig.Channel = ADC_CHANNEL_3;
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8002442:	2304      	movs	r3, #4
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002444:	4806      	ldr	r0, [pc, #24]	; (8002460 <MX_ADC1_Init+0x98>)
 8002446:	eb0d 0103 	add.w	r1, sp, r3
  sConfig.Channel = ADC_CHANNEL_3;
 800244a:	9401      	str	r4, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800244c:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800244e:	f7fe fd9b 	bl	8000f88 <HAL_ADC_ConfigChannel>
 8002452:	b118      	cbz	r0, 800245c <MX_ADC1_Init+0x94>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002454:	216a      	movs	r1, #106	; 0x6a
 8002456:	4804      	ldr	r0, [pc, #16]	; (8002468 <MX_ADC1_Init+0xa0>)
 8002458:	f000 fa8a 	bl	8002970 <_Error_Handler>
  }

}
 800245c:	b005      	add	sp, #20
 800245e:	bd30      	pop	{r4, r5, pc}
 8002460:	20000060 	.word	0x20000060
 8002464:	40012400 	.word	0x40012400
 8002468:	08002d64 	.word	0x08002d64

0800246c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800246c:	b530      	push	{r4, r5, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(adcHandle->Instance==ADC1)
 800246e:	6802      	ldr	r2, [r0, #0]
 8002470:	4b1b      	ldr	r3, [pc, #108]	; (80024e0 <HAL_ADC_MspInit+0x74>)
{
 8002472:	b087      	sub	sp, #28
  if(adcHandle->Instance==ADC1)
 8002474:	429a      	cmp	r2, r3
{
 8002476:	4605      	mov	r5, r0
  if(adcHandle->Instance==ADC1)
 8002478:	d12f      	bne.n	80024da <HAL_ADC_MspInit+0x6e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800247a:	f503 436c 	add.w	r3, r3, #60416	; 0xec00
 800247e:	699a      	ldr	r2, [r3, #24]
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002480:	4818      	ldr	r0, [pc, #96]	; (80024e4 <HAL_ADC_MspInit+0x78>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002482:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002486:	619a      	str	r2, [r3, #24]
 8002488:	699b      	ldr	r3, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800248a:	a902      	add	r1, sp, #8
    __HAL_RCC_ADC1_CLK_ENABLE();
 800248c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002490:	9301      	str	r3, [sp, #4]
 8002492:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8002494:	230f      	movs	r3, #15
 8002496:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002498:	2303      	movs	r3, #3

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800249a:	4c13      	ldr	r4, [pc, #76]	; (80024e8 <HAL_ADC_MspInit+0x7c>)
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800249c:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800249e:	f7ff f8df 	bl	8001660 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Channel1;
 80024a2:	4b12      	ldr	r3, [pc, #72]	; (80024ec <HAL_ADC_MspInit+0x80>)
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80024a4:	4620      	mov	r0, r4
    hdma_adc1.Instance = DMA1_Channel1;
 80024a6:	6023      	str	r3, [r4, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80024a8:	2300      	movs	r3, #0
 80024aa:	6063      	str	r3, [r4, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80024ac:	60a3      	str	r3, [r4, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80024ae:	2380      	movs	r3, #128	; 0x80
 80024b0:	60e3      	str	r3, [r4, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80024b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80024b6:	6123      	str	r3, [r4, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80024b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80024bc:	6163      	str	r3, [r4, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80024be:	2320      	movs	r3, #32
 80024c0:	61a3      	str	r3, [r4, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 80024c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024c6:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80024c8:	f7fe ffc4 	bl	8001454 <HAL_DMA_Init>
 80024cc:	b118      	cbz	r0, 80024d6 <HAL_ADC_MspInit+0x6a>
    {
      _Error_Handler(__FILE__, __LINE__);
 80024ce:	2191      	movs	r1, #145	; 0x91
 80024d0:	4807      	ldr	r0, [pc, #28]	; (80024f0 <HAL_ADC_MspInit+0x84>)
 80024d2:	f000 fa4d 	bl	8002970 <_Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80024d6:	622c      	str	r4, [r5, #32]
 80024d8:	6265      	str	r5, [r4, #36]	; 0x24

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80024da:	b007      	add	sp, #28
 80024dc:	bd30      	pop	{r4, r5, pc}
 80024de:	bf00      	nop
 80024e0:	40012400 	.word	0x40012400
 80024e4:	40010800 	.word	0x40010800
 80024e8:	20000090 	.word	0x20000090
 80024ec:	40020008 	.word	0x40020008
 80024f0:	08002d64 	.word	0x08002d64

080024f4 <MX_DMA_Init>:
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80024f4:	4b0a      	ldr	r3, [pc, #40]	; (8002520 <MX_DMA_Init+0x2c>)
{
 80024f6:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_DMA1_CLK_ENABLE();
 80024f8:	695a      	ldr	r2, [r3, #20]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80024fa:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 80024fc:	f042 0201 	orr.w	r2, r2, #1
 8002500:	615a      	str	r2, [r3, #20]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002502:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002504:	695b      	ldr	r3, [r3, #20]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002506:	4611      	mov	r1, r2
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002508:	f003 0301 	and.w	r3, r3, #1
 800250c:	9301      	str	r3, [sp, #4]
 800250e:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002510:	f7fe ff38 	bl	8001384 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002514:	200b      	movs	r0, #11
 8002516:	f7fe ff69 	bl	80013ec <HAL_NVIC_EnableIRQ>

}
 800251a:	b003      	add	sp, #12
 800251c:	f85d fb04 	ldr.w	pc, [sp], #4
 8002520:	40021000 	.word	0x40021000

08002524 <MX_GPIO_Init>:
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002524:	4b14      	ldr	r3, [pc, #80]	; (8002578 <MX_GPIO_Init+0x54>)
{
 8002526:	b500      	push	{lr}
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002528:	699a      	ldr	r2, [r3, #24]
{
 800252a:	b089      	sub	sp, #36	; 0x24
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800252c:	f042 0220 	orr.w	r2, r2, #32
 8002530:	619a      	str	r2, [r3, #24]
 8002532:	699a      	ldr	r2, [r3, #24]

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002534:	a904      	add	r1, sp, #16
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002536:	f002 0220 	and.w	r2, r2, #32
 800253a:	9201      	str	r2, [sp, #4]
 800253c:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800253e:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002540:	480e      	ldr	r0, [pc, #56]	; (800257c <MX_GPIO_Init+0x58>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002542:	f042 0204 	orr.w	r2, r2, #4
 8002546:	619a      	str	r2, [r3, #24]
 8002548:	699a      	ldr	r2, [r3, #24]
 800254a:	f002 0204 	and.w	r2, r2, #4
 800254e:	9202      	str	r2, [sp, #8]
 8002550:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002552:	699a      	ldr	r2, [r3, #24]
 8002554:	f042 0208 	orr.w	r2, r2, #8
 8002558:	619a      	str	r2, [r3, #24]
 800255a:	699b      	ldr	r3, [r3, #24]
 800255c:	f003 0308 	and.w	r3, r3, #8
 8002560:	9303      	str	r3, [sp, #12]
 8002562:	9b03      	ldr	r3, [sp, #12]
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002564:	2301      	movs	r3, #1
 8002566:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002568:	2300      	movs	r3, #0
 800256a:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800256c:	9306      	str	r3, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800256e:	f7ff f877 	bl	8001660 <HAL_GPIO_Init>

}
 8002572:	b009      	add	sp, #36	; 0x24
 8002574:	f85d fb04 	ldr.w	pc, [sp], #4
 8002578:	40021000 	.word	0x40021000
 800257c:	40010c00 	.word	0x40010c00

08002580 <HAL_TIM_IC_CaptureCallback>:
/* USER CODE BEGIN 0 */

/* --------- functions of wheel speed sensor --------*/
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 if (htim->Instance==TIM1)
 8002580:	4b0f      	ldr	r3, [pc, #60]	; (80025c0 <HAL_TIM_IC_CaptureCallback+0x40>)
 8002582:	6802      	ldr	r2, [r0, #0]
 8002584:	429a      	cmp	r2, r3
 8002586:	d11a      	bne.n	80025be <HAL_TIM_IC_CaptureCallback+0x3e>
  {
		if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U){	 // check if channel 1 has been interrupted
 8002588:	699a      	ldr	r2, [r3, #24]
			frontRightFlag =1 ;
		}
    if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U){		// check if channel 2 has been interrupted
 800258a:	699b      	ldr	r3, [r3, #24]
		if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U){	 // check if channel 1 has been interrupted
 800258c:	0791      	lsls	r1, r2, #30
			frontRightFlag =1 ;
 800258e:	bf1e      	ittt	ne
 8002590:	2101      	movne	r1, #1
 8002592:	4a0c      	ldrne	r2, [pc, #48]	; (80025c4 <HAL_TIM_IC_CaptureCallback+0x44>)
 8002594:	8011      	strhne	r1, [r2, #0]
    if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U){		// check if channel 2 has been interrupted
 8002596:	f413 7f40 	tst.w	r3, #768	; 0x300
			frontLeftFlag = 1 ;
 800259a:	bf1e      	ittt	ne
 800259c:	2201      	movne	r2, #1
 800259e:	4b0a      	ldrne	r3, [pc, #40]	; (80025c8 <HAL_TIM_IC_CaptureCallback+0x48>)
 80025a0:	801a      	strhne	r2, [r3, #0]
		}
		if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U){	  // check if channel 3 has been interrupted
 80025a2:	4b07      	ldr	r3, [pc, #28]	; (80025c0 <HAL_TIM_IC_CaptureCallback+0x40>)
 80025a4:	69da      	ldr	r2, [r3, #28]
		rearRightFlag =1 ;
	}
    if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U){		// check if channel 4 has been interrupted
 80025a6:	69db      	ldr	r3, [r3, #28]
		if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U){	  // check if channel 3 has been interrupted
 80025a8:	0792      	lsls	r2, r2, #30
		rearRightFlag =1 ;
 80025aa:	bf1e      	ittt	ne
 80025ac:	2101      	movne	r1, #1
 80025ae:	4a07      	ldrne	r2, [pc, #28]	; (80025cc <HAL_TIM_IC_CaptureCallback+0x4c>)
 80025b0:	8011      	strhne	r1, [r2, #0]
    if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U){		// check if channel 4 has been interrupted
 80025b2:	f413 7f40 	tst.w	r3, #768	; 0x300
			rearLeftFlag =1 ;
 80025b6:	bf1e      	ittt	ne
 80025b8:	2201      	movne	r2, #1
 80025ba:	4b05      	ldrne	r3, [pc, #20]	; (80025d0 <HAL_TIM_IC_CaptureCallback+0x50>)
 80025bc:	801a      	strhne	r2, [r3, #0]
 80025be:	4770      	bx	lr
 80025c0:	40012c00 	.word	0x40012c00
 80025c4:	20000038 	.word	0x20000038
 80025c8:	2000002e 	.word	0x2000002e
 80025cc:	20000050 	.word	0x20000050
 80025d0:	20000048 	.word	0x20000048

080025d4 <HAL_TIM_PeriodElapsedCallback>:

	}
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) // check the update of timer
	{
 80025d4:	b538      	push	{r3, r4, r5, lr}
		if (htim->Instance==TIM1){     // update of timer 1 for Wheel speed sensor
 80025d6:	4a1d      	ldr	r2, [pc, #116]	; (800264c <HAL_TIM_PeriodElapsedCallback+0x78>)
 80025d8:	6803      	ldr	r3, [r0, #0]
 80025da:	4293      	cmp	r3, r2
 80025dc:	d104      	bne.n	80025e8 <HAL_TIM_PeriodElapsedCallback+0x14>
		updateCounter ++ ;
 80025de:	4a1c      	ldr	r2, [pc, #112]	; (8002650 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80025e0:	8813      	ldrh	r3, [r2, #0]
 80025e2:	3301      	adds	r3, #1
 80025e4:	8013      	strh	r3, [r2, #0]
 80025e6:	bd38      	pop	{r3, r4, r5, pc}
	}
		if (htim->Instance==TIM3)  {	 // update of timer 3 for suspension sensor
 80025e8:	4a1a      	ldr	r2, [pc, #104]	; (8002654 <HAL_TIM_PeriodElapsedCallback+0x80>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d12d      	bne.n	800264a <HAL_TIM_PeriodElapsedCallback+0x76>

					displacement[0]=((float)adc_data[0]/4096)*50;
 80025ee:	4d1a      	ldr	r5, [pc, #104]	; (8002658 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80025f0:	4c1a      	ldr	r4, [pc, #104]	; (800265c <HAL_TIM_PeriodElapsedCallback+0x88>)
 80025f2:	8828      	ldrh	r0, [r5, #0]
 80025f4:	f7fe fa7c 	bl	8000af0 <__aeabi_ui2f>
 80025f8:	f04f 5166 	mov.w	r1, #964689920	; 0x39800000
 80025fc:	f7fe fad0 	bl	8000ba0 <__aeabi_fmul>
 8002600:	4917      	ldr	r1, [pc, #92]	; (8002660 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8002602:	f7fe facd 	bl	8000ba0 <__aeabi_fmul>
 8002606:	6020      	str	r0, [r4, #0]
					displacement[1]=((float)adc_data[1]/4096)*50;
 8002608:	8868      	ldrh	r0, [r5, #2]
 800260a:	f7fe fa71 	bl	8000af0 <__aeabi_ui2f>
 800260e:	f04f 5166 	mov.w	r1, #964689920	; 0x39800000
 8002612:	f7fe fac5 	bl	8000ba0 <__aeabi_fmul>
 8002616:	4912      	ldr	r1, [pc, #72]	; (8002660 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8002618:	f7fe fac2 	bl	8000ba0 <__aeabi_fmul>
 800261c:	6060      	str	r0, [r4, #4]
					displacement[2]=((float)adc_data[2]/4096)*50;
 800261e:	88a8      	ldrh	r0, [r5, #4]
 8002620:	f7fe fa66 	bl	8000af0 <__aeabi_ui2f>
 8002624:	f04f 5166 	mov.w	r1, #964689920	; 0x39800000
 8002628:	f7fe faba 	bl	8000ba0 <__aeabi_fmul>
 800262c:	490c      	ldr	r1, [pc, #48]	; (8002660 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800262e:	f7fe fab7 	bl	8000ba0 <__aeabi_fmul>
 8002632:	60a0      	str	r0, [r4, #8]
					displacement[3]=((float)adc_data[3]/4096)*50;
 8002634:	88e8      	ldrh	r0, [r5, #6]
 8002636:	f7fe fa5b 	bl	8000af0 <__aeabi_ui2f>
 800263a:	f04f 5166 	mov.w	r1, #964689920	; 0x39800000
 800263e:	f7fe faaf 	bl	8000ba0 <__aeabi_fmul>
 8002642:	4907      	ldr	r1, [pc, #28]	; (8002660 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8002644:	f7fe faac 	bl	8000ba0 <__aeabi_fmul>
 8002648:	60e0      	str	r0, [r4, #12]
 800264a:	bd38      	pop	{r3, r4, r5, pc}
 800264c:	40012c00 	.word	0x40012c00
 8002650:	20000058 	.word	0x20000058
 8002654:	40000400 	.word	0x40000400
 8002658:	200000e4 	.word	0x200000e4
 800265c:	200000d4 	.word	0x200000d4
 8002660:	42480000 	.word	0x42480000

08002664 <shift_bit>:
}
}
void shift_bit(uint16_t reading_bit)
{

    g_complete_reading+=reading_bit*g_mul;
 8002664:	4a09      	ldr	r2, [pc, #36]	; (800268c <shift_bit+0x28>)
 8002666:	490a      	ldr	r1, [pc, #40]	; (8002690 <shift_bit+0x2c>)
 8002668:	6813      	ldr	r3, [r2, #0]
{
 800266a:	b510      	push	{r4, lr}
    g_complete_reading+=reading_bit*g_mul;
 800266c:	680c      	ldr	r4, [r1, #0]
 800266e:	fb04 3000 	mla	r0, r4, r0, r3
 8002672:	6010      	str	r0, [r2, #0]
    g_flag++;
 8002674:	4a07      	ldr	r2, [pc, #28]	; (8002694 <shift_bit+0x30>)
 8002676:	6813      	ldr	r3, [r2, #0]
 8002678:	3301      	adds	r3, #1
 800267a:	6013      	str	r3, [r2, #0]
    g_mul*=10;
 800267c:	220a      	movs	r2, #10
 800267e:	4362      	muls	r2, r4
    if(g_flag==max_no_of_bits)
 8002680:	2b0a      	cmp	r3, #10
    g_mul*=10;
 8002682:	600a      	str	r2, [r1, #0]
    if(g_flag==max_no_of_bits)
 8002684:	d100      	bne.n	8002688 <shift_bit+0x24>
 8002686:	e7fe      	b.n	8002686 <shift_bit+0x22>
 8002688:	bd10      	pop	{r4, pc}
 800268a:	bf00      	nop
 800268c:	20000040 	.word	0x20000040
 8002690:	20000008 	.word	0x20000008
 8002694:	20000044 	.word	0x20000044

08002698 <SystemClock_Config>:
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002698:	f44f 3380 	mov.w	r3, #65536	; 0x10000
{
 800269c:	b510      	push	{r4, lr}
 800269e:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80026a0:	2201      	movs	r2, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80026a2:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80026a4:	2100      	movs	r1, #0
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80026a6:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80026a8:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80026aa:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80026ae:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80026b0:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80026b2:	910c      	str	r1, [sp, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80026b4:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80026b6:	9411      	str	r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80026b8:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80026ba:	f7ff f8b7 	bl	800182c <HAL_RCC_OscConfig>
 80026be:	b100      	cbz	r0, 80026c2 <SystemClock_Config+0x2a>
 80026c0:	e7fe      	b.n	80026c0 <SystemClock_Config+0x28>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80026c2:	230f      	movs	r3, #15
 80026c4:	9305      	str	r3, [sp, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80026c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80026ca:	9007      	str	r0, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80026cc:	9009      	str	r0, [sp, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80026ce:	4621      	mov	r1, r4
 80026d0:	a805      	add	r0, sp, #20
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80026d2:	9406      	str	r4, [sp, #24]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80026d4:	9308      	str	r3, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80026d6:	f7ff fa71 	bl	8001bbc <HAL_RCC_ClockConfig>
 80026da:	b100      	cbz	r0, 80026de <SystemClock_Config+0x46>
 80026dc:	e7fe      	b.n	80026dc <SystemClock_Config+0x44>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80026de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80026e2:	a801      	add	r0, sp, #4
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80026e4:	9401      	str	r4, [sp, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80026e6:	9303      	str	r3, [sp, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80026e8:	f7ff fb12 	bl	8001d10 <HAL_RCCEx_PeriphCLKConfig>
 80026ec:	4604      	mov	r4, r0
 80026ee:	b100      	cbz	r0, 80026f2 <SystemClock_Config+0x5a>
 80026f0:	e7fe      	b.n	80026f0 <SystemClock_Config+0x58>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80026f2:	f7ff fb07 	bl	8001d04 <HAL_RCC_GetHCLKFreq>
 80026f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026fa:	fbb0 f0f3 	udiv	r0, r0, r3
 80026fe:	f7fe fe81 	bl	8001404 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8002702:	2004      	movs	r0, #4
 8002704:	f7fe fe94 	bl	8001430 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002708:	4622      	mov	r2, r4
 800270a:	4621      	mov	r1, r4
 800270c:	f04f 30ff 	mov.w	r0, #4294967295
 8002710:	f7fe fe38 	bl	8001384 <HAL_NVIC_SetPriority>
}
 8002714:	b014      	add	sp, #80	; 0x50
 8002716:	bd10      	pop	{r4, pc}

08002718 <main>:
{
 8002718:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	  		rearLeftWheelSpeed = ((((60 /(4*rearleftDuration)) *(2*pi/60)) * radiusOfWheel )*(18/5)) ;// 60 to convert to min,*4 to make it for one revolution, 2pi/60 to convert to rad/sec, *raduis to convert to m/sec ,*(18/5) to convert to km/h
 800271c:	f20f 1bf0 	addw	fp, pc, #496	; 0x1f0
 8002720:	e9db ab00 	ldrd	sl, fp, [fp]
	uint8_t rearLeftWheelCheck =0; 			// variable to check if the steps of calculation of the rear left Wheel duration have been done or not
 8002724:	2400      	movs	r4, #0
  HAL_Init();
 8002726:	f7fe fbcf 	bl	8000ec8 <HAL_Init>
  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 800272a:	2100      	movs	r1, #0
 800272c:	487c      	ldr	r0, [pc, #496]	; (8002920 <main+0x208>)
 800272e:	f7ff fdfb 	bl	8002328 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_2);
 8002732:	2104      	movs	r1, #4
 8002734:	487a      	ldr	r0, [pc, #488]	; (8002920 <main+0x208>)
 8002736:	f7ff fdf7 	bl	8002328 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_3);
 800273a:	2108      	movs	r1, #8
 800273c:	4878      	ldr	r0, [pc, #480]	; (8002920 <main+0x208>)
 800273e:	f7ff fdf3 	bl	8002328 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_4);
 8002742:	210c      	movs	r1, #12
 8002744:	4876      	ldr	r0, [pc, #472]	; (8002920 <main+0x208>)
 8002746:	f7ff fdef 	bl	8002328 <HAL_TIM_IC_Start_IT>
  SystemClock_Config();
 800274a:	f7ff ffa5 	bl	8002698 <SystemClock_Config>
  MX_GPIO_Init();
 800274e:	f7ff fee9 	bl	8002524 <MX_GPIO_Init>
  MX_DMA_Init();
 8002752:	f7ff fecf 	bl	80024f4 <MX_DMA_Init>
  MX_ADC1_Init();
 8002756:	f7ff fe37 	bl	80023c8 <MX_ADC1_Init>
  MX_TIM3_Init();
 800275a:	f000 fa15 	bl	8002b88 <MX_TIM3_Init>
  MX_TIM1_Init();
 800275e:	f000 f9a7 	bl	8002ab0 <MX_TIM1_Init>
  HAL_TIM_Base_Start_IT(&htim3);
 8002762:	4870      	ldr	r0, [pc, #448]	; (8002924 <main+0x20c>)
 8002764:	f7ff fb4c 	bl	8001e00 <HAL_TIM_Base_Start_IT>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_data,4);
 8002768:	2204      	movs	r2, #4
 800276a:	496f      	ldr	r1, [pc, #444]	; (8002928 <main+0x210>)
 800276c:	486f      	ldr	r0, [pc, #444]	; (800292c <main+0x214>)
 800276e:	f7fe fcc7 	bl	8001100 <HAL_ADC_Start_DMA>
	uint8_t rearRightWheelCheck =0; 		// variable to check if the steps of calculation of the rear Right Wheel duration have been done or not
 8002772:	4627      	mov	r7, r4
	uint8_t frontLeftWheelCheck =0; 		// variable to check if the steps of calculation of the front left Wheel duration have been done or not
 8002774:	4626      	mov	r6, r4
	uint8_t frontRightWheelCheck =0; 		// variable to check if the steps of calculation of the front right wheel duration have been done or not
 8002776:	4625      	mov	r5, r4
	  if (updateCounter <100 )
 8002778:	4b6d      	ldr	r3, [pc, #436]	; (8002930 <main+0x218>)
 800277a:	881b      	ldrh	r3, [r3, #0]
 800277c:	2b63      	cmp	r3, #99	; 0x63
 800277e:	f200 80bf 	bhi.w	8002900 <main+0x1e8>
	  	if (frontRightFlag == 1){
 8002782:	f8df 91dc 	ldr.w	r9, [pc, #476]	; 8002960 <main+0x248>
 8002786:	f8b9 8000 	ldrh.w	r8, [r9]
 800278a:	f1b8 0f01 	cmp.w	r8, #1
 800278e:	d120      	bne.n	80027d2 <main+0xba>
	  		frontRightWheelSpeed = ((((60 /(4*frontRightDuration)) *(2*pi/60)) * radiusOfWheel )* (18/5)) ; // 60 to convert to min,*4 to make it for one revolution ,2pi/60 to convert to rad/sec, *raduis to convert to m/sec, *(18/5) to convert to km/h
 8002790:	2500      	movs	r5, #0
 8002792:	203c      	movs	r0, #60	; 0x3c
	  		frontRightInputCapture= (((updateCounter * maximumValueOfTimer) + __HAL_TIM_GetCompare(&htim1, TIM_CHANNEL_1))- frontRightInputCapture);    //read TIM1 channel 1 capture value
 8002794:	4b62      	ldr	r3, [pc, #392]	; (8002920 <main+0x208>)
 8002796:	4a67      	ldr	r2, [pc, #412]	; (8002934 <main+0x21c>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	8811      	ldrh	r1, [r2, #0]
 800279c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
	  		frontRightWheelSpeed = ((((60 /(4*frontRightDuration)) *(2*pi/60)) * radiusOfWheel )* (18/5)) ; // 60 to convert to min,*4 to make it for one revolution ,2pi/60 to convert to rad/sec, *raduis to convert to m/sec, *(18/5) to convert to km/h
 800279e:	fbb0 f0f5 	udiv	r0, r0, r5
	  		frontRightInputCapture= (((updateCounter * maximumValueOfTimer) + __HAL_TIM_GetCompare(&htim1, TIM_CHANNEL_1))- frontRightInputCapture);    //read TIM1 channel 1 capture value
 80027a2:	1a5b      	subs	r3, r3, r1
 80027a4:	8013      	strh	r3, [r2, #0]
	  		frontRightWheelSpeed = ((((60 /(4*frontRightDuration)) *(2*pi/60)) * radiusOfWheel )* (18/5)) ; // 60 to convert to min,*4 to make it for one revolution ,2pi/60 to convert to rad/sec, *raduis to convert to m/sec, *(18/5) to convert to km/h
 80027a6:	f7fd fe15 	bl	80003d4 <__aeabi_ui2d>
 80027aa:	4652      	mov	r2, sl
 80027ac:	465b      	mov	r3, fp
 80027ae:	f7fd fe87 	bl	80004c0 <__aeabi_dmul>
 80027b2:	a359      	add	r3, pc, #356	; (adr r3, 8002918 <main+0x200>)
 80027b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027b8:	f7fd fe82 	bl	80004c0 <__aeabi_dmul>
 80027bc:	4b5e      	ldr	r3, [pc, #376]	; (8002938 <main+0x220>)
 80027be:	2200      	movs	r2, #0
 80027c0:	f7fd fe7e 	bl	80004c0 <__aeabi_dmul>
 80027c4:	f7fe f88e 	bl	80008e4 <__aeabi_d2f>
	  		frontRightFlag =0 ;
 80027c8:	f8a9 5000 	strh.w	r5, [r9]
	  		frontRightWheelCheck =1 ;  // change 	front Right Wheel Check value to 1 to make sure the calculations have been done
 80027cc:	4645      	mov	r5, r8
	  		frontRightWheelSpeed = ((((60 /(4*frontRightDuration)) *(2*pi/60)) * radiusOfWheel )* (18/5)) ; // 60 to convert to min,*4 to make it for one revolution ,2pi/60 to convert to rad/sec, *raduis to convert to m/sec, *(18/5) to convert to km/h
 80027ce:	4b5b      	ldr	r3, [pc, #364]	; (800293c <main+0x224>)
 80027d0:	6018      	str	r0, [r3, #0]
	  	if (frontLeftFlag == 1){
 80027d2:	f8df 9190 	ldr.w	r9, [pc, #400]	; 8002964 <main+0x24c>
 80027d6:	f8b9 8000 	ldrh.w	r8, [r9]
 80027da:	f1b8 0f01 	cmp.w	r8, #1
 80027de:	d120      	bne.n	8002822 <main+0x10a>
	  		frontLeftWheelSpeed = ((((60 /(4*frontLeftDuration)) *(2*pi/60)) * radiusOfWheel )*(18/5)) ; // 60 to convert to min,*4 to make it for one revolution, 2pi/60 to convert to rad/sec, *raduis to convert to m/sec, *(18/5) to convert to km/h
 80027e0:	2600      	movs	r6, #0
 80027e2:	203c      	movs	r0, #60	; 0x3c
	  		frontLeftInputCapture= (((updateCounter * maximumValueOfTimer) + __HAL_TIM_GetCompare(&htim1, TIM_CHANNEL_2))- frontLeftInputCapture);    //read TIM1 channel 2 capture value
 80027e4:	4b4e      	ldr	r3, [pc, #312]	; (8002920 <main+0x208>)
 80027e6:	4a56      	ldr	r2, [pc, #344]	; (8002940 <main+0x228>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	8811      	ldrh	r1, [r2, #0]
 80027ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
	  		frontLeftWheelSpeed = ((((60 /(4*frontLeftDuration)) *(2*pi/60)) * radiusOfWheel )*(18/5)) ; // 60 to convert to min,*4 to make it for one revolution, 2pi/60 to convert to rad/sec, *raduis to convert to m/sec, *(18/5) to convert to km/h
 80027ee:	fbb0 f0f6 	udiv	r0, r0, r6
	  		frontLeftInputCapture= (((updateCounter * maximumValueOfTimer) + __HAL_TIM_GetCompare(&htim1, TIM_CHANNEL_2))- frontLeftInputCapture);    //read TIM1 channel 2 capture value
 80027f2:	1a5b      	subs	r3, r3, r1
 80027f4:	8013      	strh	r3, [r2, #0]
	  		frontLeftWheelSpeed = ((((60 /(4*frontLeftDuration)) *(2*pi/60)) * radiusOfWheel )*(18/5)) ; // 60 to convert to min,*4 to make it for one revolution, 2pi/60 to convert to rad/sec, *raduis to convert to m/sec, *(18/5) to convert to km/h
 80027f6:	f7fd fded 	bl	80003d4 <__aeabi_ui2d>
 80027fa:	4652      	mov	r2, sl
 80027fc:	465b      	mov	r3, fp
 80027fe:	f7fd fe5f 	bl	80004c0 <__aeabi_dmul>
 8002802:	a345      	add	r3, pc, #276	; (adr r3, 8002918 <main+0x200>)
 8002804:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002808:	f7fd fe5a 	bl	80004c0 <__aeabi_dmul>
 800280c:	4b4a      	ldr	r3, [pc, #296]	; (8002938 <main+0x220>)
 800280e:	2200      	movs	r2, #0
 8002810:	f7fd fe56 	bl	80004c0 <__aeabi_dmul>
 8002814:	f7fe f866 	bl	80008e4 <__aeabi_d2f>
	  		frontLeftFlag =0 ;
 8002818:	f8a9 6000 	strh.w	r6, [r9]
	  		frontLeftWheelCheck = 1 ;  // change 	front Left Wheel Check value to 1 to make sure the calculations have been done
 800281c:	4646      	mov	r6, r8
	  		frontLeftWheelSpeed = ((((60 /(4*frontLeftDuration)) *(2*pi/60)) * radiusOfWheel )*(18/5)) ; // 60 to convert to min,*4 to make it for one revolution, 2pi/60 to convert to rad/sec, *raduis to convert to m/sec, *(18/5) to convert to km/h
 800281e:	4b49      	ldr	r3, [pc, #292]	; (8002944 <main+0x22c>)
 8002820:	6018      	str	r0, [r3, #0]
	  	if (rearRightFlag == 1){
 8002822:	f8df 9144 	ldr.w	r9, [pc, #324]	; 8002968 <main+0x250>
 8002826:	f8b9 8000 	ldrh.w	r8, [r9]
 800282a:	f1b8 0f01 	cmp.w	r8, #1
 800282e:	d120      	bne.n	8002872 <main+0x15a>
	  		rearRightWheelSpeed = ((((60 /(4*rearRightDuration)) *(2*pi/60)) * radiusOfWheel )*(18/5)) ;// 60 to convert to min,*4 to make it for one revolution, 2pi/60 to convert to rad/sec, *raduis to convert to m/sec ,*(18/5) to convert to km/h
 8002830:	2700      	movs	r7, #0
 8002832:	203c      	movs	r0, #60	; 0x3c
	  		rearRightInputCapture= (((updateCounter * maximumValueOfTimer) + __HAL_TIM_GetCompare(&htim1, TIM_CHANNEL_3))- rearRightInputCapture);    //read TIM1 channel 3 capture value
 8002834:	4b3a      	ldr	r3, [pc, #232]	; (8002920 <main+0x208>)
 8002836:	4a44      	ldr	r2, [pc, #272]	; (8002948 <main+0x230>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	8811      	ldrh	r1, [r2, #0]
 800283c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
	  		rearRightWheelSpeed = ((((60 /(4*rearRightDuration)) *(2*pi/60)) * radiusOfWheel )*(18/5)) ;// 60 to convert to min,*4 to make it for one revolution, 2pi/60 to convert to rad/sec, *raduis to convert to m/sec ,*(18/5) to convert to km/h
 800283e:	fbb0 f0f7 	udiv	r0, r0, r7
	  		rearRightInputCapture= (((updateCounter * maximumValueOfTimer) + __HAL_TIM_GetCompare(&htim1, TIM_CHANNEL_3))- rearRightInputCapture);    //read TIM1 channel 3 capture value
 8002842:	1a5b      	subs	r3, r3, r1
 8002844:	8013      	strh	r3, [r2, #0]
	  		rearRightWheelSpeed = ((((60 /(4*rearRightDuration)) *(2*pi/60)) * radiusOfWheel )*(18/5)) ;// 60 to convert to min,*4 to make it for one revolution, 2pi/60 to convert to rad/sec, *raduis to convert to m/sec ,*(18/5) to convert to km/h
 8002846:	f7fd fdc5 	bl	80003d4 <__aeabi_ui2d>
 800284a:	4652      	mov	r2, sl
 800284c:	465b      	mov	r3, fp
 800284e:	f7fd fe37 	bl	80004c0 <__aeabi_dmul>
 8002852:	a331      	add	r3, pc, #196	; (adr r3, 8002918 <main+0x200>)
 8002854:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002858:	f7fd fe32 	bl	80004c0 <__aeabi_dmul>
 800285c:	4b36      	ldr	r3, [pc, #216]	; (8002938 <main+0x220>)
 800285e:	2200      	movs	r2, #0
 8002860:	f7fd fe2e 	bl	80004c0 <__aeabi_dmul>
 8002864:	f7fe f83e 	bl	80008e4 <__aeabi_d2f>
	  		rearRightFlag =0 ;
 8002868:	f8a9 7000 	strh.w	r7, [r9]
	  		rearRightWheelCheck =1;  // change 	rear Right Wheel Check value to 1 to make sure the calculations have been done
 800286c:	4647      	mov	r7, r8
	  		rearRightWheelSpeed = ((((60 /(4*rearRightDuration)) *(2*pi/60)) * radiusOfWheel )*(18/5)) ;// 60 to convert to min,*4 to make it for one revolution, 2pi/60 to convert to rad/sec, *raduis to convert to m/sec ,*(18/5) to convert to km/h
 800286e:	4b37      	ldr	r3, [pc, #220]	; (800294c <main+0x234>)
 8002870:	6018      	str	r0, [r3, #0]
	  	if (rearLeftFlag== 1){
 8002872:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 800296c <main+0x254>
 8002876:	f8b9 8000 	ldrh.w	r8, [r9]
 800287a:	f1b8 0f01 	cmp.w	r8, #1
 800287e:	d120      	bne.n	80028c2 <main+0x1aa>
	  		rearLeftWheelSpeed = ((((60 /(4*rearleftDuration)) *(2*pi/60)) * radiusOfWheel )*(18/5)) ;// 60 to convert to min,*4 to make it for one revolution, 2pi/60 to convert to rad/sec, *raduis to convert to m/sec ,*(18/5) to convert to km/h
 8002880:	2400      	movs	r4, #0
 8002882:	203c      	movs	r0, #60	; 0x3c
	  		rearLeftInputCapture= (((updateCounter * maximumValueOfTimer) +__HAL_TIM_GetCompare(&htim1, TIM_CHANNEL_4))- rearLeftInputCapture);    //read TIM1 channel 4 capture value
 8002884:	4b26      	ldr	r3, [pc, #152]	; (8002920 <main+0x208>)
 8002886:	4a32      	ldr	r2, [pc, #200]	; (8002950 <main+0x238>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	8811      	ldrh	r1, [r2, #0]
 800288c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
	  		rearLeftWheelSpeed = ((((60 /(4*rearleftDuration)) *(2*pi/60)) * radiusOfWheel )*(18/5)) ;// 60 to convert to min,*4 to make it for one revolution, 2pi/60 to convert to rad/sec, *raduis to convert to m/sec ,*(18/5) to convert to km/h
 800288e:	fbb0 f0f4 	udiv	r0, r0, r4
	  		rearLeftInputCapture= (((updateCounter * maximumValueOfTimer) +__HAL_TIM_GetCompare(&htim1, TIM_CHANNEL_4))- rearLeftInputCapture);    //read TIM1 channel 4 capture value
 8002892:	1a5b      	subs	r3, r3, r1
 8002894:	8013      	strh	r3, [r2, #0]
	  		rearLeftWheelSpeed = ((((60 /(4*rearleftDuration)) *(2*pi/60)) * radiusOfWheel )*(18/5)) ;// 60 to convert to min,*4 to make it for one revolution, 2pi/60 to convert to rad/sec, *raduis to convert to m/sec ,*(18/5) to convert to km/h
 8002896:	f7fd fd9d 	bl	80003d4 <__aeabi_ui2d>
 800289a:	4652      	mov	r2, sl
 800289c:	465b      	mov	r3, fp
 800289e:	f7fd fe0f 	bl	80004c0 <__aeabi_dmul>
 80028a2:	a31d      	add	r3, pc, #116	; (adr r3, 8002918 <main+0x200>)
 80028a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028a8:	f7fd fe0a 	bl	80004c0 <__aeabi_dmul>
 80028ac:	4b22      	ldr	r3, [pc, #136]	; (8002938 <main+0x220>)
 80028ae:	2200      	movs	r2, #0
 80028b0:	f7fd fe06 	bl	80004c0 <__aeabi_dmul>
 80028b4:	f7fe f816 	bl	80008e4 <__aeabi_d2f>
	  		rearLeftFlag = 0;
 80028b8:	f8a9 4000 	strh.w	r4, [r9]
	  		rearLeftWheelCheck = 1 ;  // change rear Left Wheel Check value to 1 to make sure the calculations have been done
 80028bc:	4644      	mov	r4, r8
	  		rearLeftWheelSpeed = ((((60 /(4*rearleftDuration)) *(2*pi/60)) * radiusOfWheel )*(18/5)) ;// 60 to convert to min,*4 to make it for one revolution, 2pi/60 to convert to rad/sec, *raduis to convert to m/sec ,*(18/5) to convert to km/h
 80028be:	4b25      	ldr	r3, [pc, #148]	; (8002954 <main+0x23c>)
 80028c0:	6018      	str	r0, [r3, #0]
	  	if ((frontRightWheelCheck & frontLeftWheelCheck & rearRightWheelCheck & rearLeftWheelCheck)== 1){
 80028c2:	ea05 0306 	and.w	r3, r5, r6
 80028c6:	403b      	ands	r3, r7
 80028c8:	421c      	tst	r4, r3
 80028ca:	d019      	beq.n	8002900 <main+0x1e8>
	  	rearLeftWheelCheck = 0 ;		 // return the value of check to 0 to be aware of changing the value when the calculations happen
 80028cc:	2400      	movs	r4, #0
	  	carAvarageSpeed = ((frontRightWheelSpeed + frontLeftWheelSpeed + rearRightWheelSpeed + rearLeftWheelSpeed )/4) ; // avarage speed of the car
 80028ce:	4b1d      	ldr	r3, [pc, #116]	; (8002944 <main+0x22c>)
	  	rearRightWheelCheck = 0 ;		 // return the value of check to 0 to be aware of changing the value when the calculations happen
 80028d0:	4627      	mov	r7, r4
	  	carAvarageSpeed = ((frontRightWheelSpeed + frontLeftWheelSpeed + rearRightWheelSpeed + rearLeftWheelSpeed )/4) ; // avarage speed of the car
 80028d2:	6819      	ldr	r1, [r3, #0]
 80028d4:	4b19      	ldr	r3, [pc, #100]	; (800293c <main+0x224>)
	  	frontLeftWheelCheck = 0 ;		 // return the value of check to 0 to be aware of changing the value when the calculations happen
 80028d6:	4626      	mov	r6, r4
	  	carAvarageSpeed = ((frontRightWheelSpeed + frontLeftWheelSpeed + rearRightWheelSpeed + rearLeftWheelSpeed )/4) ; // avarage speed of the car
 80028d8:	6818      	ldr	r0, [r3, #0]
 80028da:	f7fe f859 	bl	8000990 <__addsf3>
 80028de:	4b1b      	ldr	r3, [pc, #108]	; (800294c <main+0x234>)
	    frontRightWheelCheck = 0 ;   // return the value of check to 0 to be aware of changing the value when the calculations happen
 80028e0:	4625      	mov	r5, r4
	  	carAvarageSpeed = ((frontRightWheelSpeed + frontLeftWheelSpeed + rearRightWheelSpeed + rearLeftWheelSpeed )/4) ; // avarage speed of the car
 80028e2:	6819      	ldr	r1, [r3, #0]
 80028e4:	f7fe f854 	bl	8000990 <__addsf3>
 80028e8:	4b1a      	ldr	r3, [pc, #104]	; (8002954 <main+0x23c>)
 80028ea:	6819      	ldr	r1, [r3, #0]
 80028ec:	f7fe f850 	bl	8000990 <__addsf3>
 80028f0:	f04f 517a 	mov.w	r1, #1048576000	; 0x3e800000
 80028f4:	f7fe f954 	bl	8000ba0 <__aeabi_fmul>
 80028f8:	f7fe faa2 	bl	8000e40 <__aeabi_f2uiz>
 80028fc:	4b16      	ldr	r3, [pc, #88]	; (8002958 <main+0x240>)
 80028fe:	8018      	strh	r0, [r3, #0]
	  reading_bit=HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_0);
 8002900:	2101      	movs	r1, #1
 8002902:	4816      	ldr	r0, [pc, #88]	; (800295c <main+0x244>)
 8002904:	f7fe ff8c 	bl	8001820 <HAL_GPIO_ReadPin>
	  shift_bit(reading_bit);
 8002908:	b280      	uxth	r0, r0
 800290a:	f7ff feab 	bl	8002664 <shift_bit>
	  if (updateCounter <100 )
 800290e:	e733      	b.n	8002778 <main+0x60>
 8002910:	22adf187 	.word	0x22adf187
 8002914:	3fbaceb6 	.word	0x3fbaceb6
 8002918:	9999999a 	.word	0x9999999a
 800291c:	3fb99999 	.word	0x3fb99999
 8002920:	2000012c 	.word	0x2000012c
 8002924:	200000ec 	.word	0x200000ec
 8002928:	200000e4 	.word	0x200000e4
 800292c:	20000060 	.word	0x20000060
 8002930:	20000058 	.word	0x20000058
 8002934:	2000003a 	.word	0x2000003a
 8002938:	40080000 	.word	0x40080000
 800293c:	2000003c 	.word	0x2000003c
 8002940:	20000030 	.word	0x20000030
 8002944:	20000034 	.word	0x20000034
 8002948:	20000052 	.word	0x20000052
 800294c:	20000054 	.word	0x20000054
 8002950:	2000004a 	.word	0x2000004a
 8002954:	2000004c 	.word	0x2000004c
 8002958:	2000002c 	.word	0x2000002c
 800295c:	40010c00 	.word	0x40010c00
 8002960:	20000038 	.word	0x20000038
 8002964:	2000002e 	.word	0x2000002e
 8002968:	20000050 	.word	0x20000050
 800296c:	20000048 	.word	0x20000048

08002970 <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 8002970:	e7fe      	b.n	8002970 <_Error_Handler>
	...

08002974 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002974:	4b25      	ldr	r3, [pc, #148]	; (8002a0c <HAL_MspInit+0x98>)
{
 8002976:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_AFIO_CLK_ENABLE();
 8002978:	699a      	ldr	r2, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800297a:	2003      	movs	r0, #3
  __HAL_RCC_AFIO_CLK_ENABLE();
 800297c:	f042 0201 	orr.w	r2, r2, #1
 8002980:	619a      	str	r2, [r3, #24]
 8002982:	699a      	ldr	r2, [r3, #24]
 8002984:	f002 0201 	and.w	r2, r2, #1
 8002988:	9200      	str	r2, [sp, #0]
 800298a:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800298c:	69da      	ldr	r2, [r3, #28]
 800298e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002992:	61da      	str	r2, [r3, #28]
 8002994:	69db      	ldr	r3, [r3, #28]
 8002996:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800299a:	9301      	str	r3, [sp, #4]
 800299c:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800299e:	f7fe fcdf 	bl	8001360 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80029a2:	2200      	movs	r2, #0
 80029a4:	f06f 000b 	mvn.w	r0, #11
 80029a8:	4611      	mov	r1, r2
 80029aa:	f7fe fceb 	bl	8001384 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 80029ae:	2200      	movs	r2, #0
 80029b0:	f06f 000a 	mvn.w	r0, #10
 80029b4:	4611      	mov	r1, r2
 80029b6:	f7fe fce5 	bl	8001384 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 80029ba:	2200      	movs	r2, #0
 80029bc:	f06f 0009 	mvn.w	r0, #9
 80029c0:	4611      	mov	r1, r2
 80029c2:	f7fe fcdf 	bl	8001384 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 80029c6:	2200      	movs	r2, #0
 80029c8:	f06f 0004 	mvn.w	r0, #4
 80029cc:	4611      	mov	r1, r2
 80029ce:	f7fe fcd9 	bl	8001384 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 80029d2:	2200      	movs	r2, #0
 80029d4:	f06f 0003 	mvn.w	r0, #3
 80029d8:	4611      	mov	r1, r2
 80029da:	f7fe fcd3 	bl	8001384 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 80029de:	2200      	movs	r2, #0
 80029e0:	f06f 0001 	mvn.w	r0, #1
 80029e4:	4611      	mov	r1, r2
 80029e6:	f7fe fccd 	bl	8001384 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80029ea:	2200      	movs	r2, #0
 80029ec:	f04f 30ff 	mov.w	r0, #4294967295
 80029f0:	4611      	mov	r1, r2
 80029f2:	f7fe fcc7 	bl	8001384 <HAL_NVIC_SetPriority>

    /**NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
    */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80029f6:	4a06      	ldr	r2, [pc, #24]	; (8002a10 <HAL_MspInit+0x9c>)
 80029f8:	6853      	ldr	r3, [r2, #4]
 80029fa:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80029fe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002a02:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a04:	b003      	add	sp, #12
 8002a06:	f85d fb04 	ldr.w	pc, [sp], #4
 8002a0a:	bf00      	nop
 8002a0c:	40021000 	.word	0x40021000
 8002a10:	40010000 	.word	0x40010000

08002a14 <NMI_Handler>:
 8002a14:	4770      	bx	lr

08002a16 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8002a16:	e7fe      	b.n	8002a16 <HardFault_Handler>

08002a18 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8002a18:	e7fe      	b.n	8002a18 <MemManage_Handler>

08002a1a <BusFault_Handler>:

/**
* @brief This function handles Prefetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8002a1a:	e7fe      	b.n	8002a1a <BusFault_Handler>

08002a1c <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8002a1c:	e7fe      	b.n	8002a1c <UsageFault_Handler>

08002a1e <SVC_Handler>:
 8002a1e:	4770      	bx	lr

08002a20 <DebugMon_Handler>:
 8002a20:	4770      	bx	lr

08002a22 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8002a22:	4770      	bx	lr

08002a24 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8002a24:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a26:	f7fe fa61 	bl	8000eec <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a2a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 8002a2e:	f7fe bd0c 	b.w	800144a <HAL_SYSTICK_IRQHandler>
	...

08002a34 <DMA1_Channel1_IRQHandler>:
void DMA1_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002a34:	4801      	ldr	r0, [pc, #4]	; (8002a3c <DMA1_Channel1_IRQHandler+0x8>)
 8002a36:	f7fe bd7f 	b.w	8001538 <HAL_DMA_IRQHandler>
 8002a3a:	bf00      	nop
 8002a3c:	20000090 	.word	0x20000090

08002a40 <TIM1_CC_IRQHandler>:
void TIM1_CC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002a40:	4801      	ldr	r0, [pc, #4]	; (8002a48 <TIM1_CC_IRQHandler+0x8>)
 8002a42:	f7ff baa5 	b.w	8001f90 <HAL_TIM_IRQHandler>
 8002a46:	bf00      	nop
 8002a48:	2000012c 	.word	0x2000012c

08002a4c <TIM1_TRG_COM_IRQHandler>:
 8002a4c:	f7ff bff8 	b.w	8002a40 <TIM1_CC_IRQHandler>

08002a50 <TIM1_UP_IRQHandler>:
 8002a50:	f7ff bff6 	b.w	8002a40 <TIM1_CC_IRQHandler>

08002a54 <TIM1_BRK_IRQHandler>:
 8002a54:	f7ff bff4 	b.w	8002a40 <TIM1_CC_IRQHandler>

08002a58 <TIM3_IRQHandler>:
void TIM3_IRQHandler(void)
{
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002a58:	4801      	ldr	r0, [pc, #4]	; (8002a60 <TIM3_IRQHandler+0x8>)
 8002a5a:	f7ff ba99 	b.w	8001f90 <HAL_TIM_IRQHandler>
 8002a5e:	bf00      	nop
 8002a60:	200000ec 	.word	0x200000ec

08002a64 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002a64:	4b0f      	ldr	r3, [pc, #60]	; (8002aa4 <SystemInit+0x40>)
 8002a66:	681a      	ldr	r2, [r3, #0]
 8002a68:	f042 0201 	orr.w	r2, r2, #1
 8002a6c:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8002a6e:	6859      	ldr	r1, [r3, #4]
 8002a70:	4a0d      	ldr	r2, [pc, #52]	; (8002aa8 <SystemInit+0x44>)
 8002a72:	400a      	ands	r2, r1
 8002a74:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8002a76:	681a      	ldr	r2, [r3, #0]
 8002a78:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8002a7c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002a80:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002a82:	681a      	ldr	r2, [r3, #0]
 8002a84:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002a88:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8002a8a:	685a      	ldr	r2, [r3, #4]
 8002a8c:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8002a90:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8002a92:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8002a96:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002a98:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002a9c:	4b03      	ldr	r3, [pc, #12]	; (8002aac <SystemInit+0x48>)
 8002a9e:	609a      	str	r2, [r3, #8]
 8002aa0:	4770      	bx	lr
 8002aa2:	bf00      	nop
 8002aa4:	40021000 	.word	0x40021000
 8002aa8:	f8ff0000 	.word	0xf8ff0000
 8002aac:	e000ed00 	.word	0xe000ed00

08002ab0 <MX_TIM1_Init>:
{
  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_IC_InitTypeDef sConfigIC;

  htim1.Instance = TIM1;
 8002ab0:	4832      	ldr	r0, [pc, #200]	; (8002b7c <MX_TIM1_Init+0xcc>)
 8002ab2:	4b33      	ldr	r3, [pc, #204]	; (8002b80 <MX_TIM1_Init+0xd0>)
{
 8002ab4:	b510      	push	{r4, lr}
  htim1.Init.Prescaler = 0;
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim1.Init.Period = 65535;
 8002ab6:	f64f 72ff 	movw	r2, #65535	; 0xffff
  htim1.Instance = TIM1;
 8002aba:	6003      	str	r3, [r0, #0]
  htim1.Init.Prescaler = 0;
 8002abc:	2300      	movs	r3, #0
{
 8002abe:	b08a      	sub	sp, #40	; 0x28
  htim1.Init.Prescaler = 0;
 8002ac0:	6043      	str	r3, [r0, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ac2:	6083      	str	r3, [r0, #8]
  htim1.Init.Period = 65535;
 8002ac4:	60c2      	str	r2, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ac6:	6103      	str	r3, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 8002ac8:	6143      	str	r3, [r0, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002aca:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002acc:	f7ff fb3a 	bl	8002144 <HAL_TIM_Base_Init>
 8002ad0:	b118      	cbz	r0, 8002ada <MX_TIM1_Init+0x2a>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002ad2:	2144      	movs	r1, #68	; 0x44
 8002ad4:	482b      	ldr	r0, [pc, #172]	; (8002b84 <MX_TIM1_Init+0xd4>)
 8002ad6:	f7ff ff4b 	bl	8002970 <_Error_Handler>
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002ada:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ade:	a90a      	add	r1, sp, #40	; 0x28
 8002ae0:	f841 3d20 	str.w	r3, [r1, #-32]!
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002ae4:	4825      	ldr	r0, [pc, #148]	; (8002b7c <MX_TIM1_Init+0xcc>)
 8002ae6:	f7ff f997 	bl	8001e18 <HAL_TIM_ConfigClockSource>
 8002aea:	b118      	cbz	r0, 8002af4 <MX_TIM1_Init+0x44>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002aec:	214a      	movs	r1, #74	; 0x4a
 8002aee:	4825      	ldr	r0, [pc, #148]	; (8002b84 <MX_TIM1_Init+0xd4>)
 8002af0:	f7ff ff3e 	bl	8002970 <_Error_Handler>
  }

  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8002af4:	4821      	ldr	r0, [pc, #132]	; (8002b7c <MX_TIM1_Init+0xcc>)
 8002af6:	f7ff fb3f 	bl	8002178 <HAL_TIM_IC_Init>
 8002afa:	b118      	cbz	r0, 8002b04 <MX_TIM1_Init+0x54>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002afc:	214f      	movs	r1, #79	; 0x4f
 8002afe:	4821      	ldr	r0, [pc, #132]	; (8002b84 <MX_TIM1_Init+0xd4>)
 8002b00:	f7ff ff36 	bl	8002970 <_Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b04:	2400      	movs	r4, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002b06:	4669      	mov	r1, sp
 8002b08:	481c      	ldr	r0, [pc, #112]	; (8002b7c <MX_TIM1_Init+0xcc>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b0a:	9400      	str	r4, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b0c:	9401      	str	r4, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002b0e:	f7ff fc37 	bl	8002380 <HAL_TIMEx_MasterConfigSynchronization>
 8002b12:	b118      	cbz	r0, 8002b1c <MX_TIM1_Init+0x6c>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002b14:	2156      	movs	r1, #86	; 0x56
 8002b16:	481b      	ldr	r0, [pc, #108]	; (8002b84 <MX_TIM1_Init+0xd4>)
 8002b18:	f7ff ff2a 	bl	8002970 <_Error_Handler>
  }

  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	9307      	str	r3, [sp, #28]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
  sConfigIC.ICFilter = 15;
 8002b20:	230f      	movs	r3, #15
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002b22:	2200      	movs	r2, #0
 8002b24:	a906      	add	r1, sp, #24
 8002b26:	4815      	ldr	r0, [pc, #84]	; (8002b7c <MX_TIM1_Init+0xcc>)
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002b28:	9406      	str	r4, [sp, #24]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002b2a:	9408      	str	r4, [sp, #32]
  sConfigIC.ICFilter = 15;
 8002b2c:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002b2e:	f7ff fb67 	bl	8002200 <HAL_TIM_IC_ConfigChannel>
 8002b32:	b118      	cbz	r0, 8002b3c <MX_TIM1_Init+0x8c>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002b34:	215f      	movs	r1, #95	; 0x5f
 8002b36:	4813      	ldr	r0, [pc, #76]	; (8002b84 <MX_TIM1_Init+0xd4>)
 8002b38:	f7ff ff1a 	bl	8002970 <_Error_Handler>
  }

  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8002b3c:	2204      	movs	r2, #4
 8002b3e:	a906      	add	r1, sp, #24
 8002b40:	480e      	ldr	r0, [pc, #56]	; (8002b7c <MX_TIM1_Init+0xcc>)
 8002b42:	f7ff fb5d 	bl	8002200 <HAL_TIM_IC_ConfigChannel>
 8002b46:	b118      	cbz	r0, 8002b50 <MX_TIM1_Init+0xa0>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002b48:	2164      	movs	r1, #100	; 0x64
 8002b4a:	480e      	ldr	r0, [pc, #56]	; (8002b84 <MX_TIM1_Init+0xd4>)
 8002b4c:	f7ff ff10 	bl	8002970 <_Error_Handler>
  }

  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8002b50:	2208      	movs	r2, #8
 8002b52:	a906      	add	r1, sp, #24
 8002b54:	4809      	ldr	r0, [pc, #36]	; (8002b7c <MX_TIM1_Init+0xcc>)
 8002b56:	f7ff fb53 	bl	8002200 <HAL_TIM_IC_ConfigChannel>
 8002b5a:	b118      	cbz	r0, 8002b64 <MX_TIM1_Init+0xb4>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002b5c:	2169      	movs	r1, #105	; 0x69
 8002b5e:	4809      	ldr	r0, [pc, #36]	; (8002b84 <MX_TIM1_Init+0xd4>)
 8002b60:	f7ff ff06 	bl	8002970 <_Error_Handler>
  }

  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8002b64:	220c      	movs	r2, #12
 8002b66:	a906      	add	r1, sp, #24
 8002b68:	4804      	ldr	r0, [pc, #16]	; (8002b7c <MX_TIM1_Init+0xcc>)
 8002b6a:	f7ff fb49 	bl	8002200 <HAL_TIM_IC_ConfigChannel>
 8002b6e:	b118      	cbz	r0, 8002b78 <MX_TIM1_Init+0xc8>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002b70:	216e      	movs	r1, #110	; 0x6e
 8002b72:	4804      	ldr	r0, [pc, #16]	; (8002b84 <MX_TIM1_Init+0xd4>)
 8002b74:	f7ff fefc 	bl	8002970 <_Error_Handler>
  }

}
 8002b78:	b00a      	add	sp, #40	; 0x28
 8002b7a:	bd10      	pop	{r4, pc}
 8002b7c:	2000012c 	.word	0x2000012c
 8002b80:	40012c00 	.word	0x40012c00
 8002b84:	08002d81 	.word	0x08002d81

08002b88 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002b88:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim3.Instance = TIM3;
  htim3.Init.Prescaler = 71;
 8002b8a:	2347      	movs	r3, #71	; 0x47
  htim3.Instance = TIM3;
 8002b8c:	4817      	ldr	r0, [pc, #92]	; (8002bec <MX_TIM3_Init+0x64>)
  htim3.Init.Prescaler = 71;
 8002b8e:	4918      	ldr	r1, [pc, #96]	; (8002bf0 <MX_TIM3_Init+0x68>)
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim3.Init.Period = 1000;
 8002b90:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  htim3.Init.Prescaler = 71;
 8002b94:	e880 000a 	stmia.w	r0, {r1, r3}
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b98:	2300      	movs	r3, #0
  htim3.Init.Period = 1000;
 8002b9a:	60c2      	str	r2, [r0, #12]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b9c:	6083      	str	r3, [r0, #8]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b9e:	6103      	str	r3, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ba0:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002ba2:	f7ff facf 	bl	8002144 <HAL_TIM_Base_Init>
 8002ba6:	b118      	cbz	r0, 8002bb0 <MX_TIM3_Init+0x28>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002ba8:	2180      	movs	r1, #128	; 0x80
 8002baa:	4812      	ldr	r0, [pc, #72]	; (8002bf4 <MX_TIM3_Init+0x6c>)
 8002bac:	f7ff fee0 	bl	8002970 <_Error_Handler>
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002bb0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002bb4:	a906      	add	r1, sp, #24
 8002bb6:	f841 3d10 	str.w	r3, [r1, #-16]!
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002bba:	480c      	ldr	r0, [pc, #48]	; (8002bec <MX_TIM3_Init+0x64>)
 8002bbc:	f7ff f92c 	bl	8001e18 <HAL_TIM_ConfigClockSource>
 8002bc0:	b118      	cbz	r0, 8002bca <MX_TIM3_Init+0x42>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002bc2:	2186      	movs	r1, #134	; 0x86
 8002bc4:	480b      	ldr	r0, [pc, #44]	; (8002bf4 <MX_TIM3_Init+0x6c>)
 8002bc6:	f7ff fed3 	bl	8002970 <_Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002bca:	2220      	movs	r2, #32
 8002bcc:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002bce:	4669      	mov	r1, sp
 8002bd0:	4806      	ldr	r0, [pc, #24]	; (8002bec <MX_TIM3_Init+0x64>)
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002bd2:	e88d 000c 	stmia.w	sp, {r2, r3}
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002bd6:	f7ff fbd3 	bl	8002380 <HAL_TIMEx_MasterConfigSynchronization>
 8002bda:	b118      	cbz	r0, 8002be4 <MX_TIM3_Init+0x5c>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002bdc:	218d      	movs	r1, #141	; 0x8d
 8002bde:	4805      	ldr	r0, [pc, #20]	; (8002bf4 <MX_TIM3_Init+0x6c>)
 8002be0:	f7ff fec6 	bl	8002970 <_Error_Handler>
  }

}
 8002be4:	b007      	add	sp, #28
 8002be6:	f85d fb04 	ldr.w	pc, [sp], #4
 8002bea:	bf00      	nop
 8002bec:	200000ec 	.word	0x200000ec
 8002bf0:	40000400 	.word	0x40000400
 8002bf4:	08002d81 	.word	0x08002d81

08002bf8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002bf8:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(tim_baseHandle->Instance==TIM1)
 8002bfa:	6803      	ldr	r3, [r0, #0]
 8002bfc:	4a26      	ldr	r2, [pc, #152]	; (8002c98 <HAL_TIM_Base_MspInit+0xa0>)
{
 8002bfe:	b086      	sub	sp, #24
  if(tim_baseHandle->Instance==TIM1)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d135      	bne.n	8002c70 <HAL_TIM_Base_MspInit+0x78>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002c04:	4b25      	ldr	r3, [pc, #148]	; (8002c9c <HAL_TIM_Base_MspInit+0xa4>)
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c06:	2400      	movs	r4, #0
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002c08:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c0a:	a902      	add	r1, sp, #8
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002c0c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c10:	619a      	str	r2, [r3, #24]
 8002c12:	699b      	ldr	r3, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c14:	4822      	ldr	r0, [pc, #136]	; (8002ca0 <HAL_TIM_Base_MspInit+0xa8>)
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002c16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c1a:	9301      	str	r3, [sp, #4]
 8002c1c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8002c1e:	f44f 6370 	mov.w	r3, #3840	; 0xf00
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c22:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8002c24:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c26:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c28:	f7fe fd1a 	bl	8001660 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 8002c2c:	4622      	mov	r2, r4
 8002c2e:	4621      	mov	r1, r4
 8002c30:	2018      	movs	r0, #24
 8002c32:	f7fe fba7 	bl	8001384 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 8002c36:	2018      	movs	r0, #24
 8002c38:	f7fe fbd8 	bl	80013ec <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8002c3c:	4622      	mov	r2, r4
 8002c3e:	4621      	mov	r1, r4
 8002c40:	2019      	movs	r0, #25
 8002c42:	f7fe fb9f 	bl	8001384 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8002c46:	2019      	movs	r0, #25
 8002c48:	f7fe fbd0 	bl	80013ec <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 8002c4c:	4622      	mov	r2, r4
 8002c4e:	4621      	mov	r1, r4
 8002c50:	201a      	movs	r0, #26
 8002c52:	f7fe fb97 	bl	8001384 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 8002c56:	201a      	movs	r0, #26
 8002c58:	f7fe fbc8 	bl	80013ec <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8002c5c:	201b      	movs	r0, #27
 8002c5e:	4622      	mov	r2, r4
 8002c60:	4621      	mov	r1, r4
 8002c62:	f7fe fb8f 	bl	8001384 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8002c66:	201b      	movs	r0, #27
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002c68:	f7fe fbc0 	bl	80013ec <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002c6c:	b006      	add	sp, #24
 8002c6e:	bd10      	pop	{r4, pc}
  else if(tim_baseHandle->Instance==TIM3)
 8002c70:	4a0c      	ldr	r2, [pc, #48]	; (8002ca4 <HAL_TIM_Base_MspInit+0xac>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d1fa      	bne.n	8002c6c <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002c76:	4b09      	ldr	r3, [pc, #36]	; (8002c9c <HAL_TIM_Base_MspInit+0xa4>)
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002c78:	201d      	movs	r0, #29
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002c7a:	69da      	ldr	r2, [r3, #28]
 8002c7c:	f042 0202 	orr.w	r2, r2, #2
 8002c80:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002c82:	2200      	movs	r2, #0
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002c84:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002c86:	4611      	mov	r1, r2
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002c88:	f003 0302 	and.w	r3, r3, #2
 8002c8c:	9302      	str	r3, [sp, #8]
 8002c8e:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002c90:	f7fe fb78 	bl	8001384 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002c94:	201d      	movs	r0, #29
 8002c96:	e7e7      	b.n	8002c68 <HAL_TIM_Base_MspInit+0x70>
 8002c98:	40012c00 	.word	0x40012c00
 8002c9c:	40021000 	.word	0x40021000
 8002ca0:	40010800 	.word	0x40010800
 8002ca4:	40000400 	.word	0x40000400

08002ca8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002ca8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002caa:	e003      	b.n	8002cb4 <LoopCopyDataInit>

08002cac <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002cac:	4b0b      	ldr	r3, [pc, #44]	; (8002cdc <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002cae:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002cb0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002cb2:	3104      	adds	r1, #4

08002cb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002cb4:	480a      	ldr	r0, [pc, #40]	; (8002ce0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002cb6:	4b0b      	ldr	r3, [pc, #44]	; (8002ce4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002cb8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002cba:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002cbc:	d3f6      	bcc.n	8002cac <CopyDataInit>
  ldr r2, =_sbss
 8002cbe:	4a0a      	ldr	r2, [pc, #40]	; (8002ce8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002cc0:	e002      	b.n	8002cc8 <LoopFillZerobss>

08002cc2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002cc2:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002cc4:	f842 3b04 	str.w	r3, [r2], #4

08002cc8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002cc8:	4b08      	ldr	r3, [pc, #32]	; (8002cec <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002cca:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002ccc:	d3f9      	bcc.n	8002cc2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002cce:	f7ff fec9 	bl	8002a64 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002cd2:	f000 f80f 	bl	8002cf4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002cd6:	f7ff fd1f 	bl	8002718 <main>
  bx lr
 8002cda:	4770      	bx	lr
  ldr r3, =_sidata
 8002cdc:	08002d98 	.word	0x08002d98
  ldr r0, =_sdata
 8002ce0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002ce4:	20000010 	.word	0x20000010
  ldr r2, =_sbss
 8002ce8:	20000010 	.word	0x20000010
  ldr r3, = _ebss
 8002cec:	2000016c 	.word	0x2000016c

08002cf0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002cf0:	e7fe      	b.n	8002cf0 <ADC1_2_IRQHandler>
	...

08002cf4 <__libc_init_array>:
 8002cf4:	b570      	push	{r4, r5, r6, lr}
 8002cf6:	2500      	movs	r5, #0
 8002cf8:	4e0c      	ldr	r6, [pc, #48]	; (8002d2c <__libc_init_array+0x38>)
 8002cfa:	4c0d      	ldr	r4, [pc, #52]	; (8002d30 <__libc_init_array+0x3c>)
 8002cfc:	1ba4      	subs	r4, r4, r6
 8002cfe:	10a4      	asrs	r4, r4, #2
 8002d00:	42a5      	cmp	r5, r4
 8002d02:	d109      	bne.n	8002d18 <__libc_init_array+0x24>
 8002d04:	f000 f81a 	bl	8002d3c <_init>
 8002d08:	2500      	movs	r5, #0
 8002d0a:	4e0a      	ldr	r6, [pc, #40]	; (8002d34 <__libc_init_array+0x40>)
 8002d0c:	4c0a      	ldr	r4, [pc, #40]	; (8002d38 <__libc_init_array+0x44>)
 8002d0e:	1ba4      	subs	r4, r4, r6
 8002d10:	10a4      	asrs	r4, r4, #2
 8002d12:	42a5      	cmp	r5, r4
 8002d14:	d105      	bne.n	8002d22 <__libc_init_array+0x2e>
 8002d16:	bd70      	pop	{r4, r5, r6, pc}
 8002d18:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002d1c:	4798      	blx	r3
 8002d1e:	3501      	adds	r5, #1
 8002d20:	e7ee      	b.n	8002d00 <__libc_init_array+0xc>
 8002d22:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002d26:	4798      	blx	r3
 8002d28:	3501      	adds	r5, #1
 8002d2a:	e7f2      	b.n	8002d12 <__libc_init_array+0x1e>
 8002d2c:	08002d90 	.word	0x08002d90
 8002d30:	08002d90 	.word	0x08002d90
 8002d34:	08002d90 	.word	0x08002d90
 8002d38:	08002d94 	.word	0x08002d94

08002d3c <_init>:
 8002d3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d3e:	bf00      	nop
 8002d40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d42:	bc08      	pop	{r3}
 8002d44:	469e      	mov	lr, r3
 8002d46:	4770      	bx	lr

08002d48 <_fini>:
 8002d48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d4a:	bf00      	nop
 8002d4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d4e:	bc08      	pop	{r3}
 8002d50:	469e      	mov	lr, r3
 8002d52:	4770      	bx	lr
