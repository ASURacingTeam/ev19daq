
f103can.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000013e8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  080014f4  080014f4  000114f4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001528  08001528  00011528  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800152c  0800152c  0001152c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000000c  20000000  08001530  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000090  2000000c  0800153c  0002000c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  2000009c  0800153c  0002009c  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
  9 .debug_line   00002f3a  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0000b589  00000000  00000000  00022f6f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001cf9  00000000  00000000  0002e4f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000408  00000000  00000000  000301f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000538  00000000  00000000  00030600  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000186f  00000000  00000000  00030b38  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00001b10  00000000  00000000  000323a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00033eb7  2**0
                  CONTENTS, READONLY
 17 .debug_frame  0000090c  00000000  00000000  00033f34  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	080014dc 	.word	0x080014dc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	080014dc 	.word	0x080014dc

0800014c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800014c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800014e:	e003      	b.n	8000158 <LoopCopyDataInit>

08000150 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000150:	4b0b      	ldr	r3, [pc, #44]	; (8000180 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000152:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000154:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000156:	3104      	adds	r1, #4

08000158 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000158:	480a      	ldr	r0, [pc, #40]	; (8000184 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800015a:	4b0b      	ldr	r3, [pc, #44]	; (8000188 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800015c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800015e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000160:	d3f6      	bcc.n	8000150 <CopyDataInit>
  ldr r2, =_sbss
 8000162:	4a0a      	ldr	r2, [pc, #40]	; (800018c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000164:	e002      	b.n	800016c <LoopFillZerobss>

08000166 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000166:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000168:	f842 3b04 	str.w	r3, [r2], #4

0800016c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800016c:	4b08      	ldr	r3, [pc, #32]	; (8000190 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800016e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000170:	d3f9      	bcc.n	8000166 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000172:	f000 f9b9 	bl	80004e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000176:	f001 f98d 	bl	8001494 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800017a:	f000 f901 	bl	8000380 <main>
  bx lr
 800017e:	4770      	bx	lr
  ldr r3, =_sidata
 8000180:	08001530 	.word	0x08001530
  ldr r0, =_sdata
 8000184:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000188:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 800018c:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8000190:	2000009c 	.word	0x2000009c

08000194 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000194:	e7fe      	b.n	8000194 <ADC1_2_IRQHandler>
	...

08000198 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 8000198:	b508      	push	{r3, lr}

  hcan.Instance = CAN1;
  hcan.Init.Prescaler = 16;
  hcan.Init.Mode = CAN_MODE_NORMAL;
  hcan.Init.SJW = CAN_SJW_1TQ;
  hcan.Init.BS1 = CAN_BS1_3TQ;
 800019a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
  hcan.Init.Prescaler = 16;
 800019e:	f04f 0e10 	mov.w	lr, #16
  hcan.Instance = CAN1;
 80001a2:	480d      	ldr	r0, [pc, #52]	; (80001d8 <MX_CAN_Init+0x40>)
  hcan.Init.Prescaler = 16;
 80001a4:	4b0d      	ldr	r3, [pc, #52]	; (80001dc <MX_CAN_Init+0x44>)
  hcan.Init.BS1 = CAN_BS1_3TQ;
 80001a6:	6102      	str	r2, [r0, #16]
  hcan.Init.Prescaler = 16;
 80001a8:	e880 4008 	stmia.w	r0, {r3, lr}
  hcan.Init.BS2 = CAN_BS2_5TQ;
 80001ac:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80001b0:	2300      	movs	r3, #0
  hcan.Init.BS2 = CAN_BS2_5TQ;
 80001b2:	6142      	str	r2, [r0, #20]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80001b4:	6083      	str	r3, [r0, #8]
  hcan.Init.SJW = CAN_SJW_1TQ;
 80001b6:	60c3      	str	r3, [r0, #12]
  hcan.Init.TTCM = DISABLE;
 80001b8:	6183      	str	r3, [r0, #24]
  hcan.Init.ABOM = DISABLE;
 80001ba:	61c3      	str	r3, [r0, #28]
  hcan.Init.AWUM = DISABLE;
 80001bc:	6203      	str	r3, [r0, #32]
  hcan.Init.NART = DISABLE;
 80001be:	6243      	str	r3, [r0, #36]	; 0x24
  hcan.Init.RFLM = DISABLE;
 80001c0:	6283      	str	r3, [r0, #40]	; 0x28
  hcan.Init.TXFP = DISABLE;
 80001c2:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80001c4:	f000 fa61 	bl	800068a <HAL_CAN_Init>
 80001c8:	b128      	cbz	r0, 80001d6 <MX_CAN_Init+0x3e>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

}
 80001ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 80001ce:	2145      	movs	r1, #69	; 0x45
 80001d0:	4803      	ldr	r0, [pc, #12]	; (80001e0 <MX_CAN_Init+0x48>)
 80001d2:	f000 b917 	b.w	8000404 <_Error_Handler>
 80001d6:	bd08      	pop	{r3, pc}
 80001d8:	20000028 	.word	0x20000028
 80001dc:	40006400 	.word	0x40006400
 80001e0:	08001504 	.word	0x08001504

080001e4 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80001e4:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(canHandle->Instance==CAN1)
 80001e6:	6802      	ldr	r2, [r0, #0]
 80001e8:	4b1b      	ldr	r3, [pc, #108]	; (8000258 <HAL_CAN_MspInit+0x74>)
{
 80001ea:	b086      	sub	sp, #24
  if(canHandle->Instance==CAN1)
 80001ec:	429a      	cmp	r2, r3
 80001ee:	d130      	bne.n	8000252 <HAL_CAN_MspInit+0x6e>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80001f0:	f503 33d6 	add.w	r3, r3, #109568	; 0x1ac00
 80001f4:	69da      	ldr	r2, [r3, #28]
    /**CAN GPIO Configuration    
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80001f6:	2400      	movs	r4, #0
    __HAL_RCC_CAN1_CLK_ENABLE();
 80001f8:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 80001fc:	61da      	str	r2, [r3, #28]
 80001fe:	69db      	ldr	r3, [r3, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000200:	a902      	add	r1, sp, #8
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000202:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000206:	9301      	str	r3, [sp, #4]
 8000208:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800020a:	f44f 7380 	mov.w	r3, #256	; 0x100
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800020e:	4813      	ldr	r0, [pc, #76]	; (800025c <HAL_CAN_MspInit+0x78>)
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000210:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000212:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000214:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000216:	f000 fdd9 	bl	8000dcc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800021a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800021e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000220:	2302      	movs	r3, #2
 8000222:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000224:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000226:	a902      	add	r1, sp, #8
 8000228:	480c      	ldr	r0, [pc, #48]	; (800025c <HAL_CAN_MspInit+0x78>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800022a:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800022c:	f000 fdce 	bl	8000dcc <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8000230:	4a0b      	ldr	r2, [pc, #44]	; (8000260 <HAL_CAN_MspInit+0x7c>)

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8000232:	2014      	movs	r0, #20
    __HAL_AFIO_REMAP_CAN1_2();
 8000234:	6853      	ldr	r3, [r2, #4]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8000236:	4621      	mov	r1, r4
    __HAL_AFIO_REMAP_CAN1_2();
 8000238:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 800023c:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000240:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000244:	6053      	str	r3, [r2, #4]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8000246:	4622      	mov	r2, r4
 8000248:	f000 fd58 	bl	8000cfc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800024c:	2014      	movs	r0, #20
 800024e:	f000 fd89 	bl	8000d64 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000252:	b006      	add	sp, #24
 8000254:	bd10      	pop	{r4, pc}
 8000256:	bf00      	nop
 8000258:	40006400 	.word	0x40006400
 800025c:	40010c00 	.word	0x40010c00
 8000260:	40010000 	.word	0x40010000

08000264 <MX_GPIO_Init>:
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000264:	4b26      	ldr	r3, [pc, #152]	; (8000300 <MX_GPIO_Init+0x9c>)
{
 8000266:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000268:	699a      	ldr	r2, [r3, #24]
{
 800026a:	b089      	sub	sp, #36	; 0x24
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800026c:	f042 0210 	orr.w	r2, r2, #16
 8000270:	619a      	str	r2, [r3, #24]
 8000272:	699a      	ldr	r2, [r3, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000274:	4f23      	ldr	r7, [pc, #140]	; (8000304 <MX_GPIO_Init+0xa0>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000276:	f002 0210 	and.w	r2, r2, #16
 800027a:	9200      	str	r2, [sp, #0]
 800027c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800027e:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000280:	4638      	mov	r0, r7
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000282:	f042 0220 	orr.w	r2, r2, #32
 8000286:	619a      	str	r2, [r3, #24]
 8000288:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800028a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800028e:	f002 0220 	and.w	r2, r2, #32
 8000292:	9201      	str	r2, [sp, #4]
 8000294:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000296:	699a      	ldr	r2, [r3, #24]

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000298:	2400      	movs	r4, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800029a:	f042 0204 	orr.w	r2, r2, #4
 800029e:	619a      	str	r2, [r3, #24]
 80002a0:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002a2:	2601      	movs	r6, #1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002a4:	f002 0204 	and.w	r2, r2, #4
 80002a8:	9202      	str	r2, [sp, #8]
 80002aa:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002ac:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002ae:	2502      	movs	r5, #2
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002b0:	f042 0208 	orr.w	r2, r2, #8
 80002b4:	619a      	str	r2, [r3, #24]
 80002b6:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80002b8:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002ba:	f003 0308 	and.w	r3, r3, #8
 80002be:	9303      	str	r3, [sp, #12]
 80002c0:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80002c2:	f000 fe63 	bl	8000f8c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80002c6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80002ca:	a904      	add	r1, sp, #16
 80002cc:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80002ce:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002d0:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002d2:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002d4:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80002d6:	f000 fd79 	bl	8000dcc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80002da:	4b0b      	ldr	r3, [pc, #44]	; (8000308 <MX_GPIO_Init+0xa4>)
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002dc:	a904      	add	r1, sp, #16
 80002de:	480b      	ldr	r0, [pc, #44]	; (800030c <MX_GPIO_Init+0xa8>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80002e0:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80002e2:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80002e4:	9506      	str	r5, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002e6:	f000 fd71 	bl	8000dcc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80002ea:	4622      	mov	r2, r4
 80002ec:	4621      	mov	r1, r4
 80002ee:	2006      	movs	r0, #6
 80002f0:	f000 fd04 	bl	8000cfc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80002f4:	2006      	movs	r0, #6
 80002f6:	f000 fd35 	bl	8000d64 <HAL_NVIC_EnableIRQ>

}
 80002fa:	b009      	add	sp, #36	; 0x24
 80002fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002fe:	bf00      	nop
 8000300:	40021000 	.word	0x40021000
 8000304:	40011000 	.word	0x40011000
 8000308:	10110000 	.word	0x10110000
 800030c:	40010800 	.word	0x40010800

08000310 <SystemClock_Config>:
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000310:	f44f 3380 	mov.w	r3, #65536	; 0x10000
{
 8000314:	b510      	push	{r4, lr}
 8000316:	b090      	sub	sp, #64	; 0x40
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000318:	2201      	movs	r2, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800031a:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800031c:	2100      	movs	r1, #0
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800031e:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000320:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000322:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000326:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000328:	9206      	str	r2, [sp, #24]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800032a:	9108      	str	r1, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800032c:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800032e:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000330:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000332:	f000 fe3d 	bl	8000fb0 <HAL_RCC_OscConfig>
 8000336:	b100      	cbz	r0, 800033a <SystemClock_Config+0x2a>
 8000338:	e7fe      	b.n	8000338 <SystemClock_Config+0x28>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800033a:	230f      	movs	r3, #15
 800033c:	9301      	str	r3, [sp, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800033e:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000342:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000344:	9005      	str	r0, [sp, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000346:	4621      	mov	r1, r4
 8000348:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800034a:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800034c:	9304      	str	r3, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800034e:	f000 fff7 	bl	8001340 <HAL_RCC_ClockConfig>
 8000352:	4604      	mov	r4, r0
 8000354:	b100      	cbz	r0, 8000358 <SystemClock_Config+0x48>
 8000356:	e7fe      	b.n	8000356 <SystemClock_Config+0x46>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8000358:	f001 f896 	bl	8001488 <HAL_RCC_GetHCLKFreq>
 800035c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000360:	fbb0 f0f3 	udiv	r0, r0, r3
 8000364:	f000 fd0a 	bl	8000d7c <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000368:	2004      	movs	r0, #4
 800036a:	f000 fd1d 	bl	8000da8 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800036e:	4622      	mov	r2, r4
 8000370:	4621      	mov	r1, r4
 8000372:	f04f 30ff 	mov.w	r0, #4294967295
 8000376:	f000 fcc1 	bl	8000cfc <HAL_NVIC_SetPriority>
}
 800037a:	b010      	add	sp, #64	; 0x40
 800037c:	bd10      	pop	{r4, pc}
	...

08000380 <main>:
{
 8000380:	b508      	push	{r3, lr}
sFilterConfig.FilterNumber=0;
 8000382:	2400      	movs	r4, #0
  HAL_Init();
 8000384:	f000 f8fa 	bl	800057c <HAL_Init>
  SystemClock_Config();
 8000388:	f7ff ffc2 	bl	8000310 <SystemClock_Config>
  MX_GPIO_Init();
 800038c:	f7ff ff6a 	bl	8000264 <MX_GPIO_Init>
  MX_CAN_Init();
 8000390:	f7ff ff02 	bl	8000198 <MX_CAN_Init>
sFilterConfig.FilterIdHigh=0x245<<5;
 8000394:	f644 03a0 	movw	r3, #18592	; 0x48a0
sFilterConfig.FilterNumber=0;
 8000398:	4917      	ldr	r1, [pc, #92]	; (80003f8 <main+0x78>)
sFilterConfig.FilterMode=CAN_FILTERMODE_IDLIST;
 800039a:	2601      	movs	r6, #1
sFilterConfig.FilterIdLow=0;
 800039c:	e881 0018 	stmia.w	r1, {r3, r4}
sFilterConfig.BankNumber=14;
 80003a0:	230e      	movs	r3, #14
HAL_CAN_ConfigFilter(&hcan, &sFilterConfig);
 80003a2:	4d16      	ldr	r5, [pc, #88]	; (80003fc <main+0x7c>)
sFilterConfig.FilterNumber=0;
 80003a4:	614c      	str	r4, [r1, #20]
HAL_CAN_ConfigFilter(&hcan, &sFilterConfig);
 80003a6:	4628      	mov	r0, r5
sFilterConfig.FilterMode=CAN_FILTERMODE_IDLIST;
 80003a8:	618e      	str	r6, [r1, #24]
sFilterConfig.FilterScale=CAN_FILTERSCALE_32BIT;
 80003aa:	61ce      	str	r6, [r1, #28]
sFilterConfig.FilterMaskIdHigh=0;
 80003ac:	608c      	str	r4, [r1, #8]
sFilterConfig.FilterMaskIdLow=0;
 80003ae:	60cc      	str	r4, [r1, #12]
sFilterConfig.FilterFIFOAssignment=0;
 80003b0:	610c      	str	r4, [r1, #16]
sFilterConfig.BankNumber=14;
 80003b2:	624b      	str	r3, [r1, #36]	; 0x24
HAL_CAN_ConfigFilter(&hcan, &sFilterConfig);
 80003b4:	f000 f906 	bl	80005c4 <HAL_CAN_ConfigFilter>
hcan.pTxMsg->StdId=0x244;
 80003b8:	f44f 7211 	mov.w	r2, #580	; 0x244
 80003bc:	6b2b      	ldr	r3, [r5, #48]	; 0x30
HAL_CAN_Receive_IT(&hcan ,  CAN_FIFO0) ;
 80003be:	4621      	mov	r1, r4
hcan.pTxMsg->StdId=0x244;
 80003c0:	601a      	str	r2, [r3, #0]
hcan.pTxMsg->RTR=CAN_RTR_DATA ;
 80003c2:	60dc      	str	r4, [r3, #12]
hcan.pTxMsg->IDE=CAN_ID_STD ;
 80003c4:	609c      	str	r4, [r3, #8]
hcan.pTxMsg->DLC=1;
 80003c6:	611e      	str	r6, [r3, #16]
HAL_CAN_Receive_IT(&hcan ,  CAN_FIFO0) ;
 80003c8:	4628      	mov	r0, r5
 80003ca:	f000 fabb 	bl	8000944 <HAL_CAN_Receive_IT>
suspenssion_displacement[0]=150;
 80003ce:	2296      	movs	r2, #150	; 0x96
 80003d0:	4c0b      	ldr	r4, [pc, #44]	; (8000400 <main+0x80>)
	  HAL_CAN_Transmit(&hcan, 1);
 80003d2:	462e      	mov	r6, r5
suspenssion_displacement[0]=150;
 80003d4:	7022      	strb	r2, [r4, #0]
suspenssion_displacement[1]=100;
 80003d6:	2264      	movs	r2, #100	; 0x64
 80003d8:	7062      	strb	r2, [r4, #1]
suspenssion_displacement[2]=50;
 80003da:	2232      	movs	r2, #50	; 0x32
 80003dc:	70a2      	strb	r2, [r4, #2]
suspenssion_displacement[3]=20;
 80003de:	2214      	movs	r2, #20
 80003e0:	70e2      	strb	r2, [r4, #3]
	 hcan.pTxMsg->Data[0]=(suspenssion_displacement[0] );
 80003e2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80003e4:	7822      	ldrb	r2, [r4, #0]
	  HAL_CAN_Transmit(&hcan, 1);
 80003e6:	2101      	movs	r1, #1
	 hcan.pTxMsg->Data[0]=(suspenssion_displacement[0] );
 80003e8:	751a      	strb	r2, [r3, #20]
	 hcan.pTxMsg->Data[1]=(suspenssion_displacement[1]);
 80003ea:	7862      	ldrb	r2, [r4, #1]
	  HAL_CAN_Transmit(&hcan, 1);
 80003ec:	4630      	mov	r0, r6
	 hcan.pTxMsg->Data[1]=(suspenssion_displacement[1]);
 80003ee:	755a      	strb	r2, [r3, #21]
	  HAL_CAN_Transmit(&hcan, 1);
 80003f0:	f000 f9d8 	bl	80007a4 <HAL_CAN_Transmit>
 80003f4:	e7f5      	b.n	80003e2 <main+0x62>
 80003f6:	bf00      	nop
 80003f8:	2000006c 	.word	0x2000006c
 80003fc:	20000028 	.word	0x20000028
 8000400:	20000094 	.word	0x20000094

08000404 <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 8000404:	e7fe      	b.n	8000404 <_Error_Handler>
	...

08000408 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000408:	4b25      	ldr	r3, [pc, #148]	; (80004a0 <HAL_MspInit+0x98>)
{
 800040a:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_AFIO_CLK_ENABLE();
 800040c:	699a      	ldr	r2, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800040e:	2003      	movs	r0, #3
  __HAL_RCC_AFIO_CLK_ENABLE();
 8000410:	f042 0201 	orr.w	r2, r2, #1
 8000414:	619a      	str	r2, [r3, #24]
 8000416:	699a      	ldr	r2, [r3, #24]
 8000418:	f002 0201 	and.w	r2, r2, #1
 800041c:	9200      	str	r2, [sp, #0]
 800041e:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000420:	69da      	ldr	r2, [r3, #28]
 8000422:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000426:	61da      	str	r2, [r3, #28]
 8000428:	69db      	ldr	r3, [r3, #28]
 800042a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800042e:	9301      	str	r3, [sp, #4]
 8000430:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000432:	f000 fc51 	bl	8000cd8 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8000436:	2200      	movs	r2, #0
 8000438:	f06f 000b 	mvn.w	r0, #11
 800043c:	4611      	mov	r1, r2
 800043e:	f000 fc5d 	bl	8000cfc <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8000442:	2200      	movs	r2, #0
 8000444:	f06f 000a 	mvn.w	r0, #10
 8000448:	4611      	mov	r1, r2
 800044a:	f000 fc57 	bl	8000cfc <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 800044e:	2200      	movs	r2, #0
 8000450:	f06f 0009 	mvn.w	r0, #9
 8000454:	4611      	mov	r1, r2
 8000456:	f000 fc51 	bl	8000cfc <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 800045a:	2200      	movs	r2, #0
 800045c:	f06f 0004 	mvn.w	r0, #4
 8000460:	4611      	mov	r1, r2
 8000462:	f000 fc4b 	bl	8000cfc <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8000466:	2200      	movs	r2, #0
 8000468:	f06f 0003 	mvn.w	r0, #3
 800046c:	4611      	mov	r1, r2
 800046e:	f000 fc45 	bl	8000cfc <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8000472:	2200      	movs	r2, #0
 8000474:	f06f 0001 	mvn.w	r0, #1
 8000478:	4611      	mov	r1, r2
 800047a:	f000 fc3f 	bl	8000cfc <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800047e:	2200      	movs	r2, #0
 8000480:	f04f 30ff 	mov.w	r0, #4294967295
 8000484:	4611      	mov	r1, r2
 8000486:	f000 fc39 	bl	8000cfc <HAL_NVIC_SetPriority>

    /**NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
    */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800048a:	4a06      	ldr	r2, [pc, #24]	; (80004a4 <HAL_MspInit+0x9c>)
 800048c:	6853      	ldr	r3, [r2, #4]
 800048e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000492:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000496:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000498:	b003      	add	sp, #12
 800049a:	f85d fb04 	ldr.w	pc, [sp], #4
 800049e:	bf00      	nop
 80004a0:	40021000 	.word	0x40021000
 80004a4:	40010000 	.word	0x40010000

080004a8 <NMI_Handler>:
 80004a8:	4770      	bx	lr

080004aa <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 80004aa:	e7fe      	b.n	80004aa <HardFault_Handler>

080004ac <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 80004ac:	e7fe      	b.n	80004ac <MemManage_Handler>

080004ae <BusFault_Handler>:

/**
* @brief This function handles Prefetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 80004ae:	e7fe      	b.n	80004ae <BusFault_Handler>

080004b0 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 80004b0:	e7fe      	b.n	80004b0 <UsageFault_Handler>

080004b2 <SVC_Handler>:
 80004b2:	4770      	bx	lr

080004b4 <DebugMon_Handler>:
 80004b4:	4770      	bx	lr

080004b6 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 80004b6:	4770      	bx	lr

080004b8 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 80004b8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004ba:	f000 f871 	bl	80005a0 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004be:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 80004c2:	f000 bc7e 	b.w	8000dc2 <HAL_SYSTICK_IRQHandler>

080004c6 <EXTI0_IRQHandler>:
void EXTI0_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80004c6:	2001      	movs	r0, #1
 80004c8:	f000 bd66 	b.w	8000f98 <HAL_GPIO_EXTI_IRQHandler>

080004cc <USB_LP_CAN1_RX0_IRQHandler>:

/**
* @brief This function handles USB low priority or CAN RX0 interrupts.
*/
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80004cc:	b510      	push	{r4, lr}
	uint8_t recieved_data;

  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80004ce:	4c05      	ldr	r4, [pc, #20]	; (80004e4 <USB_LP_CAN1_RX0_IRQHandler+0x18>)
 80004d0:	4620      	mov	r0, r4
 80004d2:	f000 fb15 	bl	8000b00 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */
  HAL_CAN_Receive_IT(&hcan, CAN_FIFO0);
 80004d6:	4620      	mov	r0, r4
  // to get the recieved data use this



  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80004d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_CAN_Receive_IT(&hcan, CAN_FIFO0);
 80004dc:	2100      	movs	r1, #0
 80004de:	f000 ba31 	b.w	8000944 <HAL_CAN_Receive_IT>
 80004e2:	bf00      	nop
 80004e4:	20000028 	.word	0x20000028

080004e8 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80004e8:	4b0f      	ldr	r3, [pc, #60]	; (8000528 <SystemInit+0x40>)
 80004ea:	681a      	ldr	r2, [r3, #0]
 80004ec:	f042 0201 	orr.w	r2, r2, #1
 80004f0:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80004f2:	6859      	ldr	r1, [r3, #4]
 80004f4:	4a0d      	ldr	r2, [pc, #52]	; (800052c <SystemInit+0x44>)
 80004f6:	400a      	ands	r2, r1
 80004f8:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80004fa:	681a      	ldr	r2, [r3, #0]
 80004fc:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8000500:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000504:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000506:	681a      	ldr	r2, [r3, #0]
 8000508:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800050c:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800050e:	685a      	ldr	r2, [r3, #4]
 8000510:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8000514:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8000516:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800051a:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800051c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000520:	4b03      	ldr	r3, [pc, #12]	; (8000530 <SystemInit+0x48>)
 8000522:	609a      	str	r2, [r3, #8]
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop
 8000528:	40021000 	.word	0x40021000
 800052c:	f8ff0000 	.word	0xf8ff0000
 8000530:	e000ed00 	.word	0xe000ed00

08000534 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000534:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000536:	4b0e      	ldr	r3, [pc, #56]	; (8000570 <HAL_InitTick+0x3c>)
{
 8000538:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800053a:	7818      	ldrb	r0, [r3, #0]
 800053c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000540:	fbb3 f3f0 	udiv	r3, r3, r0
 8000544:	4a0b      	ldr	r2, [pc, #44]	; (8000574 <HAL_InitTick+0x40>)
 8000546:	6810      	ldr	r0, [r2, #0]
 8000548:	fbb0 f0f3 	udiv	r0, r0, r3
 800054c:	f000 fc16 	bl	8000d7c <HAL_SYSTICK_Config>
 8000550:	4604      	mov	r4, r0
 8000552:	b958      	cbnz	r0, 800056c <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000554:	2d0f      	cmp	r5, #15
 8000556:	d809      	bhi.n	800056c <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000558:	4602      	mov	r2, r0
 800055a:	4629      	mov	r1, r5
 800055c:	f04f 30ff 	mov.w	r0, #4294967295
 8000560:	f000 fbcc 	bl	8000cfc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000564:	4b04      	ldr	r3, [pc, #16]	; (8000578 <HAL_InitTick+0x44>)
 8000566:	4620      	mov	r0, r4
 8000568:	601d      	str	r5, [r3, #0]
 800056a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800056c:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800056e:	bd38      	pop	{r3, r4, r5, pc}
 8000570:	20000004 	.word	0x20000004
 8000574:	20000000 	.word	0x20000000
 8000578:	20000008 	.word	0x20000008

0800057c <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800057c:	4a07      	ldr	r2, [pc, #28]	; (800059c <HAL_Init+0x20>)
{
 800057e:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000580:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000582:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000584:	f043 0310 	orr.w	r3, r3, #16
 8000588:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800058a:	f000 fba5 	bl	8000cd8 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800058e:	2000      	movs	r0, #0
 8000590:	f7ff ffd0 	bl	8000534 <HAL_InitTick>
  HAL_MspInit();
 8000594:	f7ff ff38 	bl	8000408 <HAL_MspInit>
}
 8000598:	2000      	movs	r0, #0
 800059a:	bd08      	pop	{r3, pc}
 800059c:	40022000 	.word	0x40022000

080005a0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80005a0:	4a03      	ldr	r2, [pc, #12]	; (80005b0 <HAL_IncTick+0x10>)
 80005a2:	4b04      	ldr	r3, [pc, #16]	; (80005b4 <HAL_IncTick+0x14>)
 80005a4:	6811      	ldr	r1, [r2, #0]
 80005a6:	781b      	ldrb	r3, [r3, #0]
 80005a8:	440b      	add	r3, r1
 80005aa:	6013      	str	r3, [r2, #0]
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop
 80005b0:	20000098 	.word	0x20000098
 80005b4:	20000004 	.word	0x20000004

080005b8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80005b8:	4b01      	ldr	r3, [pc, #4]	; (80005c0 <HAL_GetTick+0x8>)
 80005ba:	6818      	ldr	r0, [r3, #0]
}
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop
 80005c0:	20000098 	.word	0x20000098

080005c4 <HAL_CAN_ConfigFilter>:
  assert_param(IS_CAN_FILTER_SCALE(sFilterConfig->FilterScale));
  assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
  assert_param(IS_FUNCTIONAL_STATE(sFilterConfig->FilterActivation));
  assert_param(IS_CAN_BANKNUMBER(sFilterConfig->BankNumber));
  
  filternbrbitpos = (1U) << sFilterConfig->FilterNumber;
 80005c4:	2201      	movs	r2, #1

  /* Initialisation mode for the filter */
  /* Select the start slave bank */
  MODIFY_REG(hcan->Instance->FMR                         ,
 80005c6:	6803      	ldr	r3, [r0, #0]
{
 80005c8:	b570      	push	{r4, r5, r6, lr}
  MODIFY_REG(hcan->Instance->FMR                         ,
 80005ca:	f8d3 0200 	ldr.w	r0, [r3, #512]	; 0x200
 80005ce:	6a4d      	ldr	r5, [r1, #36]	; 0x24
  filternbrbitpos = (1U) << sFilterConfig->FilterNumber;
 80005d0:	694c      	ldr	r4, [r1, #20]
  MODIFY_REG(hcan->Instance->FMR                         ,
 80005d2:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
 80005d6:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
 80005da:	f040 0001 	orr.w	r0, r0, #1
  filternbrbitpos = (1U) << sFilterConfig->FilterNumber;
 80005de:	40a2      	lsls	r2, r4
  MODIFY_REG(hcan->Instance->FMR                         ,
 80005e0:	f8c3 0200 	str.w	r0, [r3, #512]	; 0x200
             CAN_FMR_CAN2SB                              ,
             CAN_FMR_FINIT                              |
             (uint32_t)(sFilterConfig->BankNumber << 8U)   );

  /* Filter Deactivation */
  CLEAR_BIT(hcan->Instance->FA1R, filternbrbitpos);
 80005e4:	43d0      	mvns	r0, r2
 80005e6:	f8d3 521c 	ldr.w	r5, [r3, #540]	; 0x21c
 80005ea:	4005      	ands	r5, r0
 80005ec:	f8c3 521c 	str.w	r5, [r3, #540]	; 0x21c

  /* Filter Scale */
  if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80005f0:	69cd      	ldr	r5, [r1, #28]
 80005f2:	bb85      	cbnz	r5, 8000656 <HAL_CAN_ConfigFilter+0x92>
  {
    /* 16-bit scale for the filter */
    CLEAR_BIT(hcan->Instance->FS1R, filternbrbitpos);
 80005f4:	f8d3 520c 	ldr.w	r5, [r3, #524]	; 0x20c

    /* First 16-bit identifier and First 16-bit mask */
    /* Or First 16-bit identifier and Second 16-bit identifier */
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR1 = 
       ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80005f8:	68ce      	ldr	r6, [r1, #12]
    CLEAR_BIT(hcan->Instance->FS1R, filternbrbitpos);
 80005fa:	4005      	ands	r5, r0
 80005fc:	f8c3 520c 	str.w	r5, [r3, #524]	; 0x20c
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000600:	888d      	ldrh	r5, [r1, #4]
 8000602:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
       ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000606:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR1 = 
 800060a:	f8c4 5240 	str.w	r5, [r4, #576]	; 0x240

    /* Second 16-bit identifier and Second 16-bit mask */
    /* Or Third 16-bit identifier and Fourth 16-bit identifier */
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR2 = 
       ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800060e:	688e      	ldr	r6, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000610:	880d      	ldrh	r5, [r1, #0]
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR1 = 
       ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
    /* 32-bit mask or Second 32-bit identifier */
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR2 = 
       ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000612:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR2 = 
 8000616:	f8c4 5244 	str.w	r5, [r4, #580]	; 0x244
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
  }

  /* Filter Mode */
  if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800061a:	698c      	ldr	r4, [r1, #24]
 800061c:	bb6c      	cbnz	r4, 800067a <HAL_CAN_ConfigFilter+0xb6>
  {
    /*Id/Mask mode for the filter*/
    CLEAR_BIT(hcan->Instance->FM1R, filternbrbitpos);
 800061e:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
 8000622:	4004      	ands	r4, r0
  }
  else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
  {
    /*Identifier list mode for the filter*/
    SET_BIT(hcan->Instance->FM1R, filternbrbitpos);
 8000624:	f8c3 4204 	str.w	r4, [r3, #516]	; 0x204
  }

  /* Filter FIFO assignment */
  if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000628:	690c      	ldr	r4, [r1, #16]
 800062a:	bb54      	cbnz	r4, 8000682 <HAL_CAN_ConfigFilter+0xbe>
  {
    /* FIFO 0 assignation for the filter */
    CLEAR_BIT(hcan->Instance->FFA1R, filternbrbitpos);
 800062c:	f8d3 4214 	ldr.w	r4, [r3, #532]	; 0x214
 8000630:	4020      	ands	r0, r4
  }
  else
  {
    /* FIFO 1 assignation for the filter */
    SET_BIT(hcan->Instance->FFA1R, filternbrbitpos);
 8000632:	f8c3 0214 	str.w	r0, [r3, #532]	; 0x214
  }
  
  /* Filter activation */
  if (sFilterConfig->FilterActivation == ENABLE)
 8000636:	6a09      	ldr	r1, [r1, #32]
  /* Leave the initialisation mode for the filter */
  CLEAR_BIT(hcan->Instance->FMR, ((uint32_t)CAN_FMR_FINIT));
  
  /* Return function status */
  return HAL_OK;
}
 8000638:	2000      	movs	r0, #0
  if (sFilterConfig->FilterActivation == ENABLE)
 800063a:	2901      	cmp	r1, #1
    SET_BIT(hcan->Instance->FA1R, filternbrbitpos);
 800063c:	bf02      	ittt	eq
 800063e:	f8d3 121c 	ldreq.w	r1, [r3, #540]	; 0x21c
 8000642:	430a      	orreq	r2, r1
 8000644:	f8c3 221c 	streq.w	r2, [r3, #540]	; 0x21c
  CLEAR_BIT(hcan->Instance->FMR, ((uint32_t)CAN_FMR_FINIT));
 8000648:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800064c:	f022 0201 	bic.w	r2, r2, #1
 8000650:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8000654:	bd70      	pop	{r4, r5, r6, pc}
  if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000656:	2d01      	cmp	r5, #1
 8000658:	d1df      	bne.n	800061a <HAL_CAN_ConfigFilter+0x56>
    SET_BIT(hcan->Instance->FS1R, filternbrbitpos);
 800065a:	f8d3 520c 	ldr.w	r5, [r3, #524]	; 0x20c
       ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800065e:	680e      	ldr	r6, [r1, #0]
    SET_BIT(hcan->Instance->FS1R, filternbrbitpos);
 8000660:	4315      	orrs	r5, r2
 8000662:	f8c3 520c 	str.w	r5, [r3, #524]	; 0x20c
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000666:	888d      	ldrh	r5, [r1, #4]
 8000668:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
       ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800066c:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR1 = 
 8000670:	f8c4 5240 	str.w	r5, [r4, #576]	; 0x240
       ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000674:	688e      	ldr	r6, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000676:	898d      	ldrh	r5, [r1, #12]
 8000678:	e7cb      	b.n	8000612 <HAL_CAN_ConfigFilter+0x4e>
    SET_BIT(hcan->Instance->FM1R, filternbrbitpos);
 800067a:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
 800067e:	4314      	orrs	r4, r2
 8000680:	e7d0      	b.n	8000624 <HAL_CAN_ConfigFilter+0x60>
    SET_BIT(hcan->Instance->FFA1R, filternbrbitpos);
 8000682:	f8d3 0214 	ldr.w	r0, [r3, #532]	; 0x214
 8000686:	4310      	orrs	r0, r2
 8000688:	e7d3      	b.n	8000632 <HAL_CAN_ConfigFilter+0x6e>

0800068a <HAL_CAN_Init>:
{
 800068a:	b570      	push	{r4, r5, r6, lr}
  if(hcan == NULL)
 800068c:	4604      	mov	r4, r0
 800068e:	2800      	cmp	r0, #0
 8000690:	d069      	beq.n	8000766 <HAL_CAN_Init+0xdc>
  if(hcan->State == HAL_CAN_STATE_RESET)
 8000692:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8000696:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800069a:	b91b      	cbnz	r3, 80006a4 <HAL_CAN_Init+0x1a>
    hcan->Lock = HAL_UNLOCKED;
 800069c:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    HAL_CAN_MspInit(hcan);
 80006a0:	f7ff fda0 	bl	80001e4 <HAL_CAN_MspInit>
  hcan->State = HAL_CAN_STATE_BUSY;
 80006a4:	2302      	movs	r3, #2
 80006a6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80006aa:	6823      	ldr	r3, [r4, #0]
 80006ac:	681a      	ldr	r2, [r3, #0]
 80006ae:	f022 0202 	bic.w	r2, r2, #2
 80006b2:	601a      	str	r2, [r3, #0]
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80006b4:	681a      	ldr	r2, [r3, #0]
 80006b6:	f042 0201 	orr.w	r2, r2, #1
 80006ba:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();   
 80006bc:	f7ff ff7c 	bl	80005b8 <HAL_GetTick>
 80006c0:	4606      	mov	r6, r0
  while(HAL_IS_BIT_CLR(hcan->Instance->MSR, CAN_MSR_INAK))
 80006c2:	6822      	ldr	r2, [r4, #0]
 80006c4:	6855      	ldr	r5, [r2, #4]
 80006c6:	f015 0501 	ands.w	r5, r5, #1
 80006ca:	d04e      	beq.n	800076a <HAL_CAN_Init+0xe0>
  if ((hcan->Instance->MSR & CAN_MSR_INAK) == CAN_MSR_INAK)
 80006cc:	6853      	ldr	r3, [r2, #4]
 80006ce:	07d9      	lsls	r1, r3, #31
 80006d0:	d546      	bpl.n	8000760 <HAL_CAN_Init+0xd6>
    if (hcan->Init.TTCM == ENABLE)
 80006d2:	69a3      	ldr	r3, [r4, #24]
    if (hcan->Init.ABOM == ENABLE)
 80006d4:	69e1      	ldr	r1, [r4, #28]
      CLEAR_BIT(tmp_mcr, CAN_MCR_TTCM);
 80006d6:	2b01      	cmp	r3, #1
 80006d8:	bf0c      	ite	eq
 80006da:	2380      	moveq	r3, #128	; 0x80
 80006dc:	2300      	movne	r3, #0
    if (hcan->Init.ABOM == ENABLE)
 80006de:	2901      	cmp	r1, #1
    if (hcan->Init.AWUM == ENABLE)
 80006e0:	6a21      	ldr	r1, [r4, #32]
      SET_BIT(tmp_mcr, CAN_MCR_ABOM);
 80006e2:	bf0c      	ite	eq
 80006e4:	f043 0340 	orreq.w	r3, r3, #64	; 0x40
      CLEAR_BIT(tmp_mcr, CAN_MCR_ABOM);
 80006e8:	f023 0340 	bicne.w	r3, r3, #64	; 0x40
    if (hcan->Init.AWUM == ENABLE)
 80006ec:	2901      	cmp	r1, #1
    if (hcan->Init.NART == ENABLE)
 80006ee:	6a61      	ldr	r1, [r4, #36]	; 0x24
      SET_BIT(tmp_mcr, CAN_MCR_AWUM);
 80006f0:	bf0c      	ite	eq
 80006f2:	f043 0320 	orreq.w	r3, r3, #32
      CLEAR_BIT(tmp_mcr, CAN_MCR_AWUM);
 80006f6:	f023 0320 	bicne.w	r3, r3, #32
    if (hcan->Init.NART == ENABLE)
 80006fa:	2901      	cmp	r1, #1
    if (hcan->Init.RFLM == ENABLE)
 80006fc:	6aa1      	ldr	r1, [r4, #40]	; 0x28
      SET_BIT(tmp_mcr, CAN_MCR_NART);
 80006fe:	bf0c      	ite	eq
 8000700:	f043 0310 	orreq.w	r3, r3, #16
      CLEAR_BIT(tmp_mcr, CAN_MCR_NART);
 8000704:	f023 0310 	bicne.w	r3, r3, #16
    if (hcan->Init.RFLM == ENABLE)
 8000708:	2901      	cmp	r1, #1
    if (hcan->Init.TXFP == ENABLE)
 800070a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
      SET_BIT(tmp_mcr, CAN_MCR_RFLM);
 800070c:	bf0c      	ite	eq
 800070e:	f043 0308 	orreq.w	r3, r3, #8
      CLEAR_BIT(tmp_mcr, CAN_MCR_RFLM);
 8000712:	f023 0308 	bicne.w	r3, r3, #8
    if (hcan->Init.TXFP == ENABLE)
 8000716:	2901      	cmp	r1, #1
    MODIFY_REG(hcan->Instance->MCR,
 8000718:	6811      	ldr	r1, [r2, #0]
      SET_BIT(tmp_mcr, CAN_MCR_TXFP);
 800071a:	bf0c      	ite	eq
 800071c:	f043 0304 	orreq.w	r3, r3, #4
      CLEAR_BIT(tmp_mcr, CAN_MCR_TXFP);
 8000720:	f023 0304 	bicne.w	r3, r3, #4
    MODIFY_REG(hcan->Instance->MCR,
 8000724:	f021 01fc 	bic.w	r1, r1, #252	; 0xfc
 8000728:	430b      	orrs	r3, r1
 800072a:	6013      	str	r3, [r2, #0]
    WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800072c:	68e1      	ldr	r1, [r4, #12]
 800072e:	68a3      	ldr	r3, [r4, #8]
 8000730:	430b      	orrs	r3, r1
 8000732:	6921      	ldr	r1, [r4, #16]
 8000734:	430b      	orrs	r3, r1
 8000736:	6961      	ldr	r1, [r4, #20]
 8000738:	430b      	orrs	r3, r1
 800073a:	6861      	ldr	r1, [r4, #4]
 800073c:	3901      	subs	r1, #1
 800073e:	430b      	orrs	r3, r1
 8000740:	61d3      	str	r3, [r2, #28]
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000742:	6813      	ldr	r3, [r2, #0]
 8000744:	f023 0301 	bic.w	r3, r3, #1
 8000748:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();   
 800074a:	f7ff ff35 	bl	80005b8 <HAL_GetTick>
 800074e:	4605      	mov	r5, r0
    while(HAL_IS_BIT_SET(hcan->Instance->MSR, CAN_MSR_INAK))
 8000750:	6823      	ldr	r3, [r4, #0]
 8000752:	685a      	ldr	r2, [r3, #4]
 8000754:	07d2      	lsls	r2, r2, #31
 8000756:	d413      	bmi.n	8000780 <HAL_CAN_Init+0xf6>
    if(HAL_IS_BIT_CLR(hcan->Instance->MSR, CAN_MSR_INAK))
 8000758:	6858      	ldr	r0, [r3, #4]
 800075a:	f010 0001 	ands.w	r0, r0, #1
 800075e:	d01b      	beq.n	8000798 <HAL_CAN_Init+0x10e>
    hcan->State = HAL_CAN_STATE_ERROR;
 8000760:	2304      	movs	r3, #4
 8000762:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_ERROR;
 8000766:	2001      	movs	r0, #1
 8000768:	bd70      	pop	{r4, r5, r6, pc}
    if((HAL_GetTick()-tickstart) > CAN_TIMEOUT_VALUE)
 800076a:	f7ff ff25 	bl	80005b8 <HAL_GetTick>
 800076e:	1b80      	subs	r0, r0, r6
 8000770:	280a      	cmp	r0, #10
 8000772:	d9a6      	bls.n	80006c2 <HAL_CAN_Init+0x38>
      hcan->State= HAL_CAN_STATE_TIMEOUT;
 8000774:	2003      	movs	r0, #3
      __HAL_UNLOCK(hcan);
 8000776:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
      hcan->State= HAL_CAN_STATE_TIMEOUT;
 800077a:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
      return HAL_TIMEOUT;
 800077e:	bd70      	pop	{r4, r5, r6, pc}
      if((HAL_GetTick()-tickstart) > CAN_TIMEOUT_VALUE)
 8000780:	f7ff ff1a 	bl	80005b8 <HAL_GetTick>
 8000784:	1b40      	subs	r0, r0, r5
 8000786:	280a      	cmp	r0, #10
 8000788:	d9e2      	bls.n	8000750 <HAL_CAN_Init+0xc6>
        hcan->State= HAL_CAN_STATE_TIMEOUT;
 800078a:	2003      	movs	r0, #3
        __HAL_UNLOCK(hcan);
 800078c:	2300      	movs	r3, #0
        hcan->State= HAL_CAN_STATE_TIMEOUT;
 800078e:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
        __HAL_UNLOCK(hcan);
 8000792:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        return HAL_TIMEOUT;
 8000796:	bd70      	pop	{r4, r5, r6, pc}
    hcan->State = HAL_CAN_STATE_READY;
 8000798:	2301      	movs	r3, #1
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800079a:	6420      	str	r0, [r4, #64]	; 0x40
    hcan->State = HAL_CAN_STATE_READY;
 800079c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 80007a0:	bd70      	pop	{r4, r5, r6, pc}
	...

080007a4 <HAL_CAN_Transmit>:
  /* Check the parameters */
  assert_param(IS_CAN_IDTYPE(hcan->pTxMsg->IDE));
  assert_param(IS_CAN_RTR(hcan->pTxMsg->RTR));
  assert_param(IS_CAN_DLC(hcan->pTxMsg->DLC));

  if(((hcan->Instance->TSR&CAN_TSR_TME0) == CAN_TSR_TME0) || \
 80007a4:	6802      	ldr	r2, [r0, #0]
{
 80007a6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if(((hcan->Instance->TSR&CAN_TSR_TME0) == CAN_TSR_TME0) || \
 80007aa:	6893      	ldr	r3, [r2, #8]
{
 80007ac:	4604      	mov	r4, r0
  if(((hcan->Instance->TSR&CAN_TSR_TME0) == CAN_TSR_TME0) || \
 80007ae:	015b      	lsls	r3, r3, #5
{
 80007b0:	460f      	mov	r7, r1
  if(((hcan->Instance->TSR&CAN_TSR_TME0) == CAN_TSR_TME0) || \
 80007b2:	d406      	bmi.n	80007c2 <HAL_CAN_Transmit+0x1e>
     ((hcan->Instance->TSR&CAN_TSR_TME1) == CAN_TSR_TME1) || \
 80007b4:	6893      	ldr	r3, [r2, #8]
  if(((hcan->Instance->TSR&CAN_TSR_TME0) == CAN_TSR_TME0) || \
 80007b6:	011d      	lsls	r5, r3, #4
 80007b8:	d403      	bmi.n	80007c2 <HAL_CAN_Transmit+0x1e>
     ((hcan->Instance->TSR&CAN_TSR_TME2) == CAN_TSR_TME2))
 80007ba:	6893      	ldr	r3, [r2, #8]
     ((hcan->Instance->TSR&CAN_TSR_TME1) == CAN_TSR_TME1) || \
 80007bc:	00d8      	lsls	r0, r3, #3
 80007be:	f140 80b1 	bpl.w	8000924 <HAL_CAN_Transmit+0x180>
  {
    /* Process locked */
    __HAL_LOCK(hcan);
 80007c2:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80007c6:	2b01      	cmp	r3, #1
 80007c8:	f000 80b2 	beq.w	8000930 <HAL_CAN_Transmit+0x18c>
 80007cc:	2301      	movs	r3, #1
 80007ce:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d

    /* Change CAN state */
    switch(hcan->State)
 80007d2:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80007d6:	b2db      	uxtb	r3, r3
 80007d8:	2b32      	cmp	r3, #50	; 0x32
 80007da:	d066      	beq.n	80008aa <HAL_CAN_Transmit+0x106>
 80007dc:	2b62      	cmp	r3, #98	; 0x62
 80007de:	d066      	beq.n	80008ae <HAL_CAN_Transmit+0x10a>
 80007e0:	2b22      	cmp	r3, #34	; 0x22
 80007e2:	d166      	bne.n	80008b2 <HAL_CAN_Transmit+0x10e>
    {
      case(HAL_CAN_STATE_BUSY_RX0):
          hcan->State = HAL_CAN_STATE_BUSY_TX_RX0;
 80007e4:	2342      	movs	r3, #66	; 0x42
          break;
      case(HAL_CAN_STATE_BUSY_RX0_RX1):
          hcan->State = HAL_CAN_STATE_BUSY_TX_RX0_RX1;
          break;
      default: /* HAL_CAN_STATE_READY */
          hcan->State = HAL_CAN_STATE_BUSY_TX;
 80007e6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
          break;
    }

    /* Select one empty transmit mailbox */
    if (HAL_IS_BIT_SET(hcan->Instance->TSR, CAN_TSR_TME0))
 80007ea:	6893      	ldr	r3, [r2, #8]
 80007ec:	0159      	lsls	r1, r3, #5
 80007ee:	d462      	bmi.n	80008b6 <HAL_CAN_Transmit+0x112>
    {
      transmitmailbox = CAN_TXMAILBOX_0;
    }
    else if (HAL_IS_BIT_SET(hcan->Instance->TSR, CAN_TSR_TME1))
 80007f0:	6893      	ldr	r3, [r2, #8]
    {
      transmitmailbox = CAN_TXMAILBOX_1;
    }
    else
    {
      transmitmailbox = CAN_TXMAILBOX_2;
 80007f2:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 80007f6:	bf14      	ite	ne
 80007f8:	2601      	movne	r6, #1
 80007fa:	2602      	moveq	r6, #2
 80007fc:	ea4f 1e06 	mov.w	lr, r6, lsl #4
 8000800:	eb02 030e 	add.w	r3, r2, lr
    }

    /* Set up the Id */
    hcan->Instance->sTxMailBox[transmitmailbox].TIR &= CAN_TI0R_TXRQ;
    if (hcan->pTxMsg->IDE == CAN_ID_STD)
 8000804:	6b20      	ldr	r0, [r4, #48]	; 0x30
    hcan->Instance->sTxMailBox[transmitmailbox].TIR &= CAN_TI0R_TXRQ;
 8000806:	f8d3 1180 	ldr.w	r1, [r3, #384]	; 0x180
    if (hcan->pTxMsg->IDE == CAN_ID_STD)
 800080a:	6885      	ldr	r5, [r0, #8]
    hcan->Instance->sTxMailBox[transmitmailbox].TIR &= CAN_TI0R_TXRQ;
 800080c:	f001 0101 	and.w	r1, r1, #1
 8000810:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
 8000814:	f8d0 c00c 	ldr.w	ip, [r0, #12]
    if (hcan->pTxMsg->IDE == CAN_ID_STD)
 8000818:	2d00      	cmp	r5, #0
 800081a:	d14e      	bne.n	80008ba <HAL_CAN_Transmit+0x116>
    {
      assert_param(IS_CAN_STDID(hcan->pTxMsg->StdId));  
      hcan->Instance->sTxMailBox[transmitmailbox].TIR |= ((hcan->pTxMsg->StdId << CAN_TI0R_STID_Pos) |
 800081c:	6805      	ldr	r5, [r0, #0]
 800081e:	f8d3 1180 	ldr.w	r1, [r3, #384]	; 0x180
 8000822:	ea4c 5545 	orr.w	r5, ip, r5, lsl #21
 8000826:	430d      	orrs	r5, r1
                                                           hcan->pTxMsg->RTR);
    }
    else
    {
      assert_param(IS_CAN_EXTID(hcan->pTxMsg->ExtId));
      hcan->Instance->sTxMailBox[transmitmailbox].TIR |= ((hcan->pTxMsg->ExtId << CAN_TI0R_EXID_Pos) |
 8000828:	f8c3 5180 	str.w	r5, [r3, #384]	; 0x180
                                                           hcan->pTxMsg->RTR);
    }

    /* Set up the DLC */
    hcan->pTxMsg->DLC &= (uint8_t)0x0000000F;
    hcan->Instance->sTxMailBox[transmitmailbox].TDTR &= 0xFFFFFFF0U;
 800082c:	f8d3 5184 	ldr.w	r5, [r3, #388]	; 0x184
    hcan->pTxMsg->DLC &= (uint8_t)0x0000000F;
 8000830:	6901      	ldr	r1, [r0, #16]
    hcan->Instance->sTxMailBox[transmitmailbox].TDTR &= 0xFFFFFFF0U;
 8000832:	f025 050f 	bic.w	r5, r5, #15
    hcan->pTxMsg->DLC &= (uint8_t)0x0000000F;
 8000836:	f001 010f 	and.w	r1, r1, #15
 800083a:	6101      	str	r1, [r0, #16]
    hcan->Instance->sTxMailBox[transmitmailbox].TDTR &= 0xFFFFFFF0U;
 800083c:	f8c3 5184 	str.w	r5, [r3, #388]	; 0x184
    hcan->Instance->sTxMailBox[transmitmailbox].TDTR |= hcan->pTxMsg->DLC;
 8000840:	f8d3 5184 	ldr.w	r5, [r3, #388]	; 0x184

    /* Set up the data field */
    WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR, ((uint32_t)hcan->pTxMsg->Data[3] << CAN_TDL0R_DATA3_Pos) | 
 8000844:	4472      	add	r2, lr
    hcan->Instance->sTxMailBox[transmitmailbox].TDTR |= hcan->pTxMsg->DLC;
 8000846:	4329      	orrs	r1, r5
 8000848:	f8c3 1184 	str.w	r1, [r3, #388]	; 0x184
    WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR, ((uint32_t)hcan->pTxMsg->Data[3] << CAN_TDL0R_DATA3_Pos) | 
 800084c:	6941      	ldr	r1, [r0, #20]

    /* Get tick */
    tickstart = HAL_GetTick();

    /* Check End of transmission flag */
    while(!(__HAL_CAN_TRANSMIT_STATUS(hcan, transmitmailbox)))
 800084e:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 800093c <HAL_CAN_Transmit+0x198>
    WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR, ((uint32_t)hcan->pTxMsg->Data[3] << CAN_TDL0R_DATA3_Pos) | 
 8000852:	f8c2 1188 	str.w	r1, [r2, #392]	; 0x188
    WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR, ((uint32_t)hcan->pTxMsg->Data[7] << CAN_TDL0R_DATA3_Pos) | 
 8000856:	6981      	ldr	r1, [r0, #24]
    while(!(__HAL_CAN_TRANSMIT_STATUS(hcan, transmitmailbox)))
 8000858:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 8000940 <HAL_CAN_Transmit+0x19c>
    WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR, ((uint32_t)hcan->pTxMsg->Data[7] << CAN_TDL0R_DATA3_Pos) | 
 800085c:	f8c2 118c 	str.w	r1, [r2, #396]	; 0x18c
    SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8000860:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 8000864:	f042 0201 	orr.w	r2, r2, #1
 8000868:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    tickstart = HAL_GetTick();
 800086c:	f7ff fea4 	bl	80005b8 <HAL_GetTick>
 8000870:	4605      	mov	r5, r0
    while(!(__HAL_CAN_TRANSMIT_STATUS(hcan, transmitmailbox)))
 8000872:	4a31      	ldr	r2, [pc, #196]	; (8000938 <HAL_CAN_Transmit+0x194>)
 8000874:	6823      	ldr	r3, [r4, #0]
 8000876:	689b      	ldr	r3, [r3, #8]
 8000878:	2e00      	cmp	r6, #0
 800087a:	d145      	bne.n	8000908 <HAL_CAN_Transmit+0x164>
 800087c:	ea32 0303 	bics.w	r3, r2, r3
 8000880:	bf14      	ite	ne
 8000882:	2301      	movne	r3, #1
 8000884:	2300      	moveq	r3, #0
 8000886:	bb13      	cbnz	r3, 80008ce <HAL_CAN_Transmit+0x12a>
          return HAL_TIMEOUT;
        }
      }
    }
    /* Change CAN state */
    switch(hcan->State)
 8000888:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800088c:	b2db      	uxtb	r3, r3
 800088e:	2b52      	cmp	r3, #82	; 0x52
 8000890:	d042      	beq.n	8000918 <HAL_CAN_Transmit+0x174>
 8000892:	2b72      	cmp	r3, #114	; 0x72
 8000894:	d042      	beq.n	800091c <HAL_CAN_Transmit+0x178>
 8000896:	2b42      	cmp	r3, #66	; 0x42
 8000898:	d142      	bne.n	8000920 <HAL_CAN_Transmit+0x17c>
    {
      case(HAL_CAN_STATE_BUSY_TX_RX0):
          hcan->State = HAL_CAN_STATE_BUSY_RX0;
 800089a:	2322      	movs	r3, #34	; 0x22
          hcan->State = HAL_CAN_STATE_READY;
          break;
    }

    /* Process unlocked */
    __HAL_UNLOCK(hcan);
 800089c:	2000      	movs	r0, #0
          hcan->State = HAL_CAN_STATE_READY;
 800089e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    __HAL_UNLOCK(hcan);
 80008a2:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d

    /* Return function status */
    return HAL_OK;
 80008a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          hcan->State = HAL_CAN_STATE_BUSY_TX_RX1;
 80008aa:	2352      	movs	r3, #82	; 0x52
 80008ac:	e79b      	b.n	80007e6 <HAL_CAN_Transmit+0x42>
          hcan->State = HAL_CAN_STATE_BUSY_TX_RX0_RX1;
 80008ae:	2372      	movs	r3, #114	; 0x72
 80008b0:	e799      	b.n	80007e6 <HAL_CAN_Transmit+0x42>
          hcan->State = HAL_CAN_STATE_BUSY_TX;
 80008b2:	2312      	movs	r3, #18
 80008b4:	e797      	b.n	80007e6 <HAL_CAN_Transmit+0x42>
      transmitmailbox = CAN_TXMAILBOX_0;
 80008b6:	2600      	movs	r6, #0
 80008b8:	e7a0      	b.n	80007fc <HAL_CAN_Transmit+0x58>
                                                           hcan->pTxMsg->IDE |
 80008ba:	6841      	ldr	r1, [r0, #4]
      hcan->Instance->sTxMailBox[transmitmailbox].TIR |= ((hcan->pTxMsg->ExtId << CAN_TI0R_EXID_Pos) |
 80008bc:	f8d3 8180 	ldr.w	r8, [r3, #384]	; 0x180
                                                           hcan->pTxMsg->IDE |
 80008c0:	ea45 050c 	orr.w	r5, r5, ip
 80008c4:	ea45 05c1 	orr.w	r5, r5, r1, lsl #3
      hcan->Instance->sTxMailBox[transmitmailbox].TIR |= ((hcan->pTxMsg->ExtId << CAN_TI0R_EXID_Pos) |
 80008c8:	ea45 0508 	orr.w	r5, r5, r8
 80008cc:	e7ac      	b.n	8000828 <HAL_CAN_Transmit+0x84>
      if(Timeout != HAL_MAX_DELAY)
 80008ce:	1c7b      	adds	r3, r7, #1
 80008d0:	d0d0      	beq.n	8000874 <HAL_CAN_Transmit+0xd0>
        if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80008d2:	b95f      	cbnz	r7, 80008ec <HAL_CAN_Transmit+0x148>
          hcan->State = HAL_CAN_STATE_TIMEOUT;
 80008d4:	2303      	movs	r3, #3
 80008d6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 80008da:	6823      	ldr	r3, [r4, #0]
          __HAL_CAN_CANCEL_TRANSMIT(hcan, transmitmailbox);
 80008dc:	b166      	cbz	r6, 80008f8 <HAL_CAN_Transmit+0x154>
 80008de:	2e01      	cmp	r6, #1
 80008e0:	bf0c      	ite	eq
 80008e2:	f44f 4200 	moveq.w	r2, #32768	; 0x8000
 80008e6:	f44f 0200 	movne.w	r2, #8388608	; 0x800000
 80008ea:	e006      	b.n	80008fa <HAL_CAN_Transmit+0x156>
        if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80008ec:	f7ff fe64 	bl	80005b8 <HAL_GetTick>
 80008f0:	1b40      	subs	r0, r0, r5
 80008f2:	4287      	cmp	r7, r0
 80008f4:	d2bd      	bcs.n	8000872 <HAL_CAN_Transmit+0xce>
 80008f6:	e7ed      	b.n	80008d4 <HAL_CAN_Transmit+0x130>
          __HAL_CAN_CANCEL_TRANSMIT(hcan, transmitmailbox);
 80008f8:	2280      	movs	r2, #128	; 0x80
 80008fa:	609a      	str	r2, [r3, #8]
          __HAL_UNLOCK(hcan);
 80008fc:	2300      	movs	r3, #0
          return HAL_TIMEOUT;
 80008fe:	2003      	movs	r0, #3
          __HAL_UNLOCK(hcan);
 8000900:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
          return HAL_TIMEOUT;
 8000904:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    while(!(__HAL_CAN_TRANSMIT_STATUS(hcan, transmitmailbox)))
 8000908:	2e01      	cmp	r6, #1
 800090a:	d102      	bne.n	8000912 <HAL_CAN_Transmit+0x16e>
 800090c:	ea39 0303 	bics.w	r3, r9, r3
 8000910:	e7b6      	b.n	8000880 <HAL_CAN_Transmit+0xdc>
 8000912:	ea38 0303 	bics.w	r3, r8, r3
 8000916:	e7b3      	b.n	8000880 <HAL_CAN_Transmit+0xdc>
          hcan->State = HAL_CAN_STATE_BUSY_RX1;
 8000918:	2332      	movs	r3, #50	; 0x32
 800091a:	e7bf      	b.n	800089c <HAL_CAN_Transmit+0xf8>
          hcan->State = HAL_CAN_STATE_BUSY_RX0_RX1;
 800091c:	2362      	movs	r3, #98	; 0x62
 800091e:	e7bd      	b.n	800089c <HAL_CAN_Transmit+0xf8>
          hcan->State = HAL_CAN_STATE_READY;
 8000920:	2301      	movs	r3, #1
 8000922:	e7bb      	b.n	800089c <HAL_CAN_Transmit+0xf8>
  }
  else
  {
    /* Change CAN state */
    hcan->State = HAL_CAN_STATE_ERROR;
 8000924:	2304      	movs	r3, #4

    /* Return function status */
    return HAL_ERROR;
 8000926:	2001      	movs	r0, #1
    hcan->State = HAL_CAN_STATE_ERROR;
 8000928:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_ERROR;
 800092c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    __HAL_LOCK(hcan);
 8000930:	2002      	movs	r0, #2
  }
}
 8000932:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000936:	bf00      	nop
 8000938:	04000001 	.word	0x04000001
 800093c:	10010000 	.word	0x10010000
 8000940:	08000100 	.word	0x08000100

08000944 <HAL_CAN_Receive_IT>:
  *         the configuration information for the specified CAN.  
  * @param  FIFONumber: Specify the FIFO number    
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Receive_IT(CAN_HandleTypeDef* hcan, uint8_t FIFONumber)
{
 8000944:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_CAN_FIFO(FIFONumber));
  
  /* Check if CAN state is not busy for RX FIFO0 */
  if((FIFONumber == CAN_FIFO0) && ((hcan->State == HAL_CAN_STATE_BUSY_RX0) ||         \
 8000946:	2900      	cmp	r1, #0
 8000948:	d136      	bne.n	80009b8 <HAL_CAN_Receive_IT+0x74>
 800094a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800094e:	2b22      	cmp	r3, #34	; 0x22
 8000950:	d050      	beq.n	80009f4 <HAL_CAN_Receive_IT+0xb0>
                                   (hcan->State == HAL_CAN_STATE_BUSY_TX_RX0) ||      \
 8000952:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
  if((FIFONumber == CAN_FIFO0) && ((hcan->State == HAL_CAN_STATE_BUSY_RX0) ||         \
 8000956:	2b42      	cmp	r3, #66	; 0x42
  {
    return HAL_BUSY;
  }

  /* Check if CAN state is not busy for RX FIFO1 */
  if((FIFONumber == CAN_FIFO1) && ((hcan->State == HAL_CAN_STATE_BUSY_RX1) ||         \
 8000958:	d04c      	beq.n	80009f4 <HAL_CAN_Receive_IT+0xb0>
                                   (hcan->State == HAL_CAN_STATE_BUSY_TX_RX1) ||      \
                                   (hcan->State == HAL_CAN_STATE_BUSY_RX0_RX1) ||     \
 800095a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
                                   (hcan->State == HAL_CAN_STATE_BUSY_TX_RX1) ||      \
 800095e:	2b62      	cmp	r3, #98	; 0x62
 8000960:	d048      	beq.n	80009f4 <HAL_CAN_Receive_IT+0xb0>
                                   (hcan->State == HAL_CAN_STATE_BUSY_TX_RX0_RX1)))
 8000962:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
                                   (hcan->State == HAL_CAN_STATE_BUSY_RX0_RX1) ||     \
 8000966:	2b72      	cmp	r3, #114	; 0x72
 8000968:	d044      	beq.n	80009f4 <HAL_CAN_Receive_IT+0xb0>
  {
    return HAL_BUSY;
  }

  /* Process locked */
  __HAL_LOCK(hcan);
 800096a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800096e:	2b01      	cmp	r3, #1
 8000970:	d040      	beq.n	80009f4 <HAL_CAN_Receive_IT+0xb0>
 8000972:	2301      	movs	r3, #1
 8000974:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Change CAN state */
  if(FIFONumber == CAN_FIFO0)
  {
    switch(hcan->State)
 8000978:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800097c:	b2db      	uxtb	r3, r3
  if(FIFONumber == CAN_FIFO0)
 800097e:	bb29      	cbnz	r1, 80009cc <HAL_CAN_Receive_IT+0x88>
    switch(hcan->State)
 8000980:	2b32      	cmp	r3, #50	; 0x32
 8000982:	d02b      	beq.n	80009dc <HAL_CAN_Receive_IT+0x98>
 8000984:	2b52      	cmp	r3, #82	; 0x52
 8000986:	d02b      	beq.n	80009e0 <HAL_CAN_Receive_IT+0x9c>
 8000988:	2b12      	cmp	r3, #18
    {
      case(HAL_CAN_STATE_BUSY_TX):
        hcan->State = HAL_CAN_STATE_BUSY_TX_RX0;
 800098a:	bf0c      	ite	eq
 800098c:	2342      	moveq	r3, #66	; 0x42
        break;
      case(HAL_CAN_STATE_BUSY_TX_RX1):
        hcan->State = HAL_CAN_STATE_BUSY_TX_RX0_RX1;
        break;
      default: /* HAL_CAN_STATE_READY */
        hcan->State = HAL_CAN_STATE_BUSY_RX0;
 800098e:	2322      	movne	r3, #34	; 0x22
        break;
      case(HAL_CAN_STATE_BUSY_TX_RX0):
        hcan->State = HAL_CAN_STATE_BUSY_TX_RX0_RX1;
        break;
      default: /* HAL_CAN_STATE_READY */
        hcan->State = HAL_CAN_STATE_BUSY_RX1;
 8000990:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
        break;
    }
  }
  /* Set CAN error code to none */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000994:	2300      	movs	r3, #0
  /*  - Enable Error passive Interrupt */
  /*  - Enable Bus-off Interrupt */
  /*  - Enable Last error code Interrupt */
  /*  - Enable Error Interrupt */
  /*  - Enable Transmit mailbox empty Interrupt */
  __HAL_CAN_ENABLE_IT(hcan, CAN_IT_EWG |
 8000996:	6802      	ldr	r2, [r0, #0]
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000998:	6403      	str	r3, [r0, #64]	; 0x40
  __HAL_CAN_ENABLE_IT(hcan, CAN_IT_EWG |
 800099a:	6954      	ldr	r4, [r2, #20]
 800099c:	f444 440f 	orr.w	r4, r4, #36608	; 0x8f00
 80009a0:	f044 0401 	orr.w	r4, r4, #1
 80009a4:	6154      	str	r4, [r2, #20]
                            CAN_IT_LEC |
                            CAN_IT_ERR |
                            CAN_IT_TME  );
  
   /* Process unlocked */
   __HAL_UNLOCK(hcan);
 80009a6:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  if(FIFONumber == CAN_FIFO0)
 80009aa:	b9e9      	cbnz	r1, 80009e8 <HAL_CAN_Receive_IT+0xa4>
  {
    /* Enable FIFO 0 overrun and message pending Interrupt */
    __HAL_CAN_ENABLE_IT(hcan, CAN_IT_FOV0 | CAN_IT_FMP0);
 80009ac:	6953      	ldr	r3, [r2, #20]
    /* Enable FIFO 1 overrun and message pending Interrupt */
    __HAL_CAN_ENABLE_IT(hcan, CAN_IT_FOV1 | CAN_IT_FMP1);
  }

  /* Return function status */
  return HAL_OK;
 80009ae:	4608      	mov	r0, r1
    __HAL_CAN_ENABLE_IT(hcan, CAN_IT_FOV0 | CAN_IT_FMP0);
 80009b0:	f043 030a 	orr.w	r3, r3, #10
 80009b4:	6153      	str	r3, [r2, #20]
 80009b6:	bd10      	pop	{r4, pc}
  if((FIFONumber == CAN_FIFO1) && ((hcan->State == HAL_CAN_STATE_BUSY_RX1) ||         \
 80009b8:	2901      	cmp	r1, #1
 80009ba:	d1d6      	bne.n	800096a <HAL_CAN_Receive_IT+0x26>
 80009bc:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80009c0:	2b32      	cmp	r3, #50	; 0x32
 80009c2:	d017      	beq.n	80009f4 <HAL_CAN_Receive_IT+0xb0>
                                   (hcan->State == HAL_CAN_STATE_BUSY_TX_RX1) ||      \
 80009c4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
  if((FIFONumber == CAN_FIFO1) && ((hcan->State == HAL_CAN_STATE_BUSY_RX1) ||         \
 80009c8:	2b52      	cmp	r3, #82	; 0x52
 80009ca:	e7c5      	b.n	8000958 <HAL_CAN_Receive_IT+0x14>
    switch(hcan->State)
 80009cc:	2b22      	cmp	r3, #34	; 0x22
 80009ce:	d005      	beq.n	80009dc <HAL_CAN_Receive_IT+0x98>
 80009d0:	2b42      	cmp	r3, #66	; 0x42
 80009d2:	d005      	beq.n	80009e0 <HAL_CAN_Receive_IT+0x9c>
 80009d4:	2b12      	cmp	r3, #18
 80009d6:	d105      	bne.n	80009e4 <HAL_CAN_Receive_IT+0xa0>
        hcan->State = HAL_CAN_STATE_BUSY_TX_RX1;
 80009d8:	2352      	movs	r3, #82	; 0x52
 80009da:	e7d9      	b.n	8000990 <HAL_CAN_Receive_IT+0x4c>
        hcan->State = HAL_CAN_STATE_BUSY_RX0_RX1;
 80009dc:	2362      	movs	r3, #98	; 0x62
 80009de:	e7d7      	b.n	8000990 <HAL_CAN_Receive_IT+0x4c>
        hcan->State = HAL_CAN_STATE_BUSY_TX_RX0_RX1;
 80009e0:	2372      	movs	r3, #114	; 0x72
 80009e2:	e7d5      	b.n	8000990 <HAL_CAN_Receive_IT+0x4c>
        hcan->State = HAL_CAN_STATE_BUSY_RX1;
 80009e4:	2332      	movs	r3, #50	; 0x32
 80009e6:	e7d3      	b.n	8000990 <HAL_CAN_Receive_IT+0x4c>
    __HAL_CAN_ENABLE_IT(hcan, CAN_IT_FOV1 | CAN_IT_FMP1);
 80009e8:	6951      	ldr	r1, [r2, #20]
  return HAL_OK;
 80009ea:	4618      	mov	r0, r3
    __HAL_CAN_ENABLE_IT(hcan, CAN_IT_FOV1 | CAN_IT_FMP1);
 80009ec:	f041 0150 	orr.w	r1, r1, #80	; 0x50
 80009f0:	6151      	str	r1, [r2, #20]
 80009f2:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 80009f4:	2002      	movs	r0, #2
}
 80009f6:	bd10      	pop	{r4, pc}

080009f8 <HAL_CAN_TxCpltCallback>:
 80009f8:	4770      	bx	lr

080009fa <HAL_CAN_RxCpltCallback>:
 80009fa:	4770      	bx	lr

080009fc <CAN_Receive_IT>:
  CanRxMsgTypeDef* pRxMsg = NULL;

  /* Set RxMsg pointer */
  if(FIFONumber == CAN_FIFO0)
  {
    pRxMsg = hcan->pRxMsg;
 80009fc:	6b42      	ldr	r2, [r0, #52]	; 0x34
  }
  else /* FIFONumber == CAN_FIFO1 */
  {
    pRxMsg = hcan->pRx1Msg;
 80009fe:	6b83      	ldr	r3, [r0, #56]	; 0x38
{
 8000a00:	b570      	push	{r4, r5, r6, lr}
    pRxMsg = hcan->pRxMsg;
 8000a02:	2900      	cmp	r1, #0
 8000a04:	bf08      	it	eq
 8000a06:	4613      	moveq	r3, r2
  }

  /* Get the Id */
  pRxMsg->IDE = (uint8_t)0x04U & hcan->Instance->sFIFOMailBox[FIFONumber].RIR;
 8000a08:	6804      	ldr	r4, [r0, #0]
 8000a0a:	010a      	lsls	r2, r1, #4
 8000a0c:	18a5      	adds	r5, r4, r2
 8000a0e:	f8d5 61b0 	ldr.w	r6, [r5, #432]	; 0x1b0
 8000a12:	f006 0604 	and.w	r6, r6, #4
 8000a16:	609e      	str	r6, [r3, #8]
  if (pRxMsg->IDE == CAN_ID_STD)
 8000a18:	2e00      	cmp	r6, #0
 8000a1a:	d150      	bne.n	8000abe <CAN_Receive_IT+0xc2>
  {
    pRxMsg->StdId = 0x000007FFU & (hcan->Instance->sFIFOMailBox[FIFONumber].RIR >> 21U);
 8000a1c:	f8d5 61b0 	ldr.w	r6, [r5, #432]	; 0x1b0
 8000a20:	0d76      	lsrs	r6, r6, #21
 8000a22:	601e      	str	r6, [r3, #0]
  else
  {
    pRxMsg->ExtId = 0x1FFFFFFFU & (hcan->Instance->sFIFOMailBox[FIFONumber].RIR >> 3U);
  }
  
  pRxMsg->RTR = (uint8_t)0x02U & hcan->Instance->sFIFOMailBox[FIFONumber].RIR;
 8000a24:	f8d5 61b0 	ldr.w	r6, [r5, #432]	; 0x1b0
  /* Get the FIFONumber */
  pRxMsg->FIFONumber = FIFONumber;
  /* Get the FMI */
  pRxMsg->FMI = (uint8_t)0xFFU & (hcan->Instance->sFIFOMailBox[FIFONumber].RDTR >> 8U);
  /* Get the data field */
  pRxMsg->Data[0] = (uint8_t)0xFFU & hcan->Instance->sFIFOMailBox[FIFONumber].RDLR;
 8000a28:	4422      	add	r2, r4
  pRxMsg->RTR = (uint8_t)0x02U & hcan->Instance->sFIFOMailBox[FIFONumber].RIR;
 8000a2a:	f006 0602 	and.w	r6, r6, #2
 8000a2e:	60de      	str	r6, [r3, #12]
  pRxMsg->DLC = (uint8_t)0x0FU & hcan->Instance->sFIFOMailBox[FIFONumber].RDTR;
 8000a30:	f8d5 61b4 	ldr.w	r6, [r5, #436]	; 0x1b4
  pRxMsg->FMI = (uint8_t)0xFFU & (hcan->Instance->sFIFOMailBox[FIFONumber].RDTR >> 8U);
 8000a34:	f8d5 51b4 	ldr.w	r5, [r5, #436]	; 0x1b4
  pRxMsg->DLC = (uint8_t)0x0FU & hcan->Instance->sFIFOMailBox[FIFONumber].RDTR;
 8000a38:	f006 060f 	and.w	r6, r6, #15
  pRxMsg->FMI = (uint8_t)0xFFU & (hcan->Instance->sFIFOMailBox[FIFONumber].RDTR >> 8U);
 8000a3c:	f3c5 2507 	ubfx	r5, r5, #8, #8
 8000a40:	61dd      	str	r5, [r3, #28]
  pRxMsg->Data[0] = (uint8_t)0xFFU & hcan->Instance->sFIFOMailBox[FIFONumber].RDLR;
 8000a42:	f8d2 51b8 	ldr.w	r5, [r2, #440]	; 0x1b8
  pRxMsg->DLC = (uint8_t)0x0FU & hcan->Instance->sFIFOMailBox[FIFONumber].RDTR;
 8000a46:	611e      	str	r6, [r3, #16]
  pRxMsg->Data[0] = (uint8_t)0xFFU & hcan->Instance->sFIFOMailBox[FIFONumber].RDLR;
 8000a48:	751d      	strb	r5, [r3, #20]
  pRxMsg->Data[1] = (uint8_t)0xFFU & (hcan->Instance->sFIFOMailBox[FIFONumber].RDLR >> 8U);
 8000a4a:	f8d2 51b8 	ldr.w	r5, [r2, #440]	; 0x1b8
  pRxMsg->FIFONumber = FIFONumber;
 8000a4e:	6219      	str	r1, [r3, #32]
  pRxMsg->Data[1] = (uint8_t)0xFFU & (hcan->Instance->sFIFOMailBox[FIFONumber].RDLR >> 8U);
 8000a50:	0a2d      	lsrs	r5, r5, #8
 8000a52:	755d      	strb	r5, [r3, #21]
  pRxMsg->Data[2] = (uint8_t)0xFFU & (hcan->Instance->sFIFOMailBox[FIFONumber].RDLR >> 16U);
 8000a54:	f8d2 51b8 	ldr.w	r5, [r2, #440]	; 0x1b8
 8000a58:	0c2d      	lsrs	r5, r5, #16
 8000a5a:	759d      	strb	r5, [r3, #22]
  pRxMsg->Data[3] = (uint8_t)0xFFU & (hcan->Instance->sFIFOMailBox[FIFONumber].RDLR >> 24U);
 8000a5c:	f8d2 51b8 	ldr.w	r5, [r2, #440]	; 0x1b8
 8000a60:	0e2d      	lsrs	r5, r5, #24
 8000a62:	75dd      	strb	r5, [r3, #23]
  pRxMsg->Data[4] = (uint8_t)0xFFU & hcan->Instance->sFIFOMailBox[FIFONumber].RDHR;
 8000a64:	f8d2 51bc 	ldr.w	r5, [r2, #444]	; 0x1bc
 8000a68:	761d      	strb	r5, [r3, #24]
  pRxMsg->Data[5] = (uint8_t)0xFFU & (hcan->Instance->sFIFOMailBox[FIFONumber].RDHR >> 8U);
 8000a6a:	f8d2 51bc 	ldr.w	r5, [r2, #444]	; 0x1bc
 8000a6e:	0a2d      	lsrs	r5, r5, #8
 8000a70:	765d      	strb	r5, [r3, #25]
  pRxMsg->Data[6] = (uint8_t)0xFFU & (hcan->Instance->sFIFOMailBox[FIFONumber].RDHR >> 16U);
 8000a72:	f8d2 51bc 	ldr.w	r5, [r2, #444]	; 0x1bc
 8000a76:	0c2d      	lsrs	r5, r5, #16
 8000a78:	769d      	strb	r5, [r3, #26]
  pRxMsg->Data[7] = (uint8_t)0xFFU & (hcan->Instance->sFIFOMailBox[FIFONumber].RDHR >> 24U);
 8000a7a:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8000a7e:	0e12      	lsrs	r2, r2, #24
 8000a80:	76da      	strb	r2, [r3, #27]
 8000a82:	2320      	movs	r3, #32
  /* Release the FIFO */
  /* Release FIFO0 */
  if (FIFONumber == CAN_FIFO0)
 8000a84:	bb01      	cbnz	r1, 8000ac8 <CAN_Receive_IT+0xcc>
  {
    __HAL_CAN_FIFO_RELEASE(hcan, CAN_FIFO0);
 8000a86:	60e3      	str	r3, [r4, #12]
    
    /* Disable FIFO 0 overrun and message pending Interrupt */
    __HAL_CAN_DISABLE_IT(hcan, CAN_IT_FOV0 | CAN_IT_FMP0);
 8000a88:	6963      	ldr	r3, [r4, #20]
 8000a8a:	f023 030a 	bic.w	r3, r3, #10
  else /* FIFONumber == CAN_FIFO1 */
  {
    __HAL_CAN_FIFO_RELEASE(hcan, CAN_FIFO1);
    
    /* Disable FIFO 1 overrun and message pending Interrupt */
    __HAL_CAN_DISABLE_IT(hcan, CAN_IT_FOV1 | CAN_IT_FMP1);
 8000a8e:	6163      	str	r3, [r4, #20]
  }

  tmp1 = hcan->State;
 8000a90:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
  if((tmp1 == HAL_CAN_STATE_BUSY_RX0) || (tmp1 == HAL_CAN_STATE_BUSY_RX1))
 8000a94:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 8000a98:	2b22      	cmp	r3, #34	; 0x22
    /*  - Disable Error warning Interrupt */
    /*  - Disable Error passive Interrupt */
    /*  - Disable Bus-off Interrupt */
    /*  - Disable Last error code Interrupt */
    /*  - Disable Error Interrupt */
    __HAL_CAN_DISABLE_IT(hcan, CAN_IT_EWG |
 8000a9a:	bf01      	itttt	eq
 8000a9c:	6802      	ldreq	r2, [r0, #0]
 8000a9e:	6953      	ldreq	r3, [r2, #20]
 8000aa0:	f423 430f 	biceq.w	r3, r3, #36608	; 0x8f00
 8000aa4:	6153      	streq	r3, [r2, #20]
  }

  /* Change CAN state */
  if (FIFONumber == CAN_FIFO0)
  {
    switch(hcan->State)
 8000aa6:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8000aaa:	b2db      	uxtb	r3, r3
  if (FIFONumber == CAN_FIFO0)
 8000aac:	b9d1      	cbnz	r1, 8000ae4 <CAN_Receive_IT+0xe8>
    switch(hcan->State)
 8000aae:	2b62      	cmp	r3, #98	; 0x62
 8000ab0:	d00f      	beq.n	8000ad2 <CAN_Receive_IT+0xd6>
 8000ab2:	2b72      	cmp	r3, #114	; 0x72
 8000ab4:	d014      	beq.n	8000ae0 <CAN_Receive_IT+0xe4>
 8000ab6:	2b42      	cmp	r3, #66	; 0x42
        break;
    }
  }
  else /* FIFONumber == CAN_FIFO1 */
  {
    switch(hcan->State)
 8000ab8:	d11e      	bne.n	8000af8 <CAN_Receive_IT+0xfc>
    {
      case(HAL_CAN_STATE_BUSY_TX_RX1):
        hcan->State = HAL_CAN_STATE_BUSY_TX;
 8000aba:	2312      	movs	r3, #18
 8000abc:	e00a      	b.n	8000ad4 <CAN_Receive_IT+0xd8>
    pRxMsg->ExtId = 0x1FFFFFFFU & (hcan->Instance->sFIFOMailBox[FIFONumber].RIR >> 3U);
 8000abe:	f8d5 61b0 	ldr.w	r6, [r5, #432]	; 0x1b0
 8000ac2:	08f6      	lsrs	r6, r6, #3
 8000ac4:	605e      	str	r6, [r3, #4]
 8000ac6:	e7ad      	b.n	8000a24 <CAN_Receive_IT+0x28>
    __HAL_CAN_FIFO_RELEASE(hcan, CAN_FIFO1);
 8000ac8:	6123      	str	r3, [r4, #16]
    __HAL_CAN_DISABLE_IT(hcan, CAN_IT_FOV1 | CAN_IT_FMP1);
 8000aca:	6963      	ldr	r3, [r4, #20]
 8000acc:	f023 0350 	bic.w	r3, r3, #80	; 0x50
 8000ad0:	e7dd      	b.n	8000a8e <CAN_Receive_IT+0x92>
        hcan->State = HAL_CAN_STATE_BUSY_RX1;
 8000ad2:	2332      	movs	r3, #50	; 0x32
        break;
      case(HAL_CAN_STATE_BUSY_TX_RX0_RX1):
        hcan->State = HAL_CAN_STATE_BUSY_TX_RX0;
        break;
      default: /* HAL_CAN_STATE_BUSY_RX1 */
        hcan->State = HAL_CAN_STATE_READY;
 8000ad4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
        break;
    }
  }

  /* Receive complete callback */ 
  HAL_CAN_RxCpltCallback(hcan);
 8000ad8:	f7ff ff8f 	bl	80009fa <HAL_CAN_RxCpltCallback>

  /* Return function status */
  return HAL_OK;
}
 8000adc:	2000      	movs	r0, #0
 8000ade:	bd70      	pop	{r4, r5, r6, pc}
        hcan->State = HAL_CAN_STATE_BUSY_TX_RX1;
 8000ae0:	2352      	movs	r3, #82	; 0x52
 8000ae2:	e7f7      	b.n	8000ad4 <CAN_Receive_IT+0xd8>
    switch(hcan->State)
 8000ae4:	2b62      	cmp	r3, #98	; 0x62
 8000ae6:	d003      	beq.n	8000af0 <CAN_Receive_IT+0xf4>
 8000ae8:	2b72      	cmp	r3, #114	; 0x72
 8000aea:	d003      	beq.n	8000af4 <CAN_Receive_IT+0xf8>
 8000aec:	2b52      	cmp	r3, #82	; 0x52
 8000aee:	e7e3      	b.n	8000ab8 <CAN_Receive_IT+0xbc>
        hcan->State = HAL_CAN_STATE_BUSY_RX0;
 8000af0:	2322      	movs	r3, #34	; 0x22
 8000af2:	e7ef      	b.n	8000ad4 <CAN_Receive_IT+0xd8>
        hcan->State = HAL_CAN_STATE_BUSY_TX_RX0;
 8000af4:	2342      	movs	r3, #66	; 0x42
 8000af6:	e7ed      	b.n	8000ad4 <CAN_Receive_IT+0xd8>
        hcan->State = HAL_CAN_STATE_READY;
 8000af8:	2301      	movs	r3, #1
 8000afa:	e7eb      	b.n	8000ad4 <CAN_Receive_IT+0xd8>

08000afc <HAL_CAN_ErrorCallback>:
{
 8000afc:	4770      	bx	lr
	...

08000b00 <HAL_CAN_IRQHandler>:
  tmp1 = __HAL_CAN_GET_FLAG(hcan, CAN_FLAG_FOV0);
 8000b00:	6803      	ldr	r3, [r0, #0]
{
 8000b02:	b570      	push	{r4, r5, r6, lr}
  tmp1 = __HAL_CAN_GET_FLAG(hcan, CAN_FLAG_FOV0);
 8000b04:	68dd      	ldr	r5, [r3, #12]
{
 8000b06:	4604      	mov	r4, r0
  if((tmp1 != 0U) && tmp2)
 8000b08:	f015 0510 	ands.w	r5, r5, #16
  tmp2 = __HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_FOV0);
 8000b0c:	695a      	ldr	r2, [r3, #20]
  if((tmp1 != 0U) && tmp2)
 8000b0e:	d006      	beq.n	8000b1e <HAL_CAN_IRQHandler+0x1e>
 8000b10:	f012 0508 	ands.w	r5, r2, #8
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8000b14:	bf1e      	ittt	ne
 8000b16:	2210      	movne	r2, #16
    errorcode |= HAL_CAN_ERROR_FOV0;
 8000b18:	f44f 7500 	movne.w	r5, #512	; 0x200
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8000b1c:	60da      	strne	r2, [r3, #12]
  tmp1 = __HAL_CAN_GET_FLAG(hcan, CAN_FLAG_FOV1);
 8000b1e:	6919      	ldr	r1, [r3, #16]
  tmp2 = __HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_FOV1);
 8000b20:	695a      	ldr	r2, [r3, #20]
  if((tmp1 != 0U) && tmp2)
 8000b22:	06c9      	lsls	r1, r1, #27
 8000b24:	d505      	bpl.n	8000b32 <HAL_CAN_IRQHandler+0x32>
 8000b26:	0652      	lsls	r2, r2, #25
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8000b28:	bf42      	ittt	mi
 8000b2a:	2210      	movmi	r2, #16
    errorcode |= HAL_CAN_ERROR_FOV1;
 8000b2c:	f445 6580 	orrmi.w	r5, r5, #1024	; 0x400
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8000b30:	611a      	strmi	r2, [r3, #16]
  if(__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_TME))
 8000b32:	695a      	ldr	r2, [r3, #20]
 8000b34:	07d6      	lsls	r6, r2, #31
 8000b36:	d535      	bpl.n	8000ba4 <HAL_CAN_IRQHandler+0xa4>
    tmp1 = __HAL_CAN_TRANSMIT_STATUS(hcan, CAN_TXMAILBOX_0);
 8000b38:	689e      	ldr	r6, [r3, #8]
    if(tmp1 || tmp2 || tmp3)  
 8000b3a:	4a63      	ldr	r2, [pc, #396]	; (8000cc8 <HAL_CAN_IRQHandler+0x1c8>)
    tmp2 = __HAL_CAN_TRANSMIT_STATUS(hcan, CAN_TXMAILBOX_1);
 8000b3c:	6898      	ldr	r0, [r3, #8]
    if(tmp1 || tmp2 || tmp3)  
 8000b3e:	43b2      	bics	r2, r6
    tmp3 = __HAL_CAN_TRANSMIT_STATUS(hcan, CAN_TXMAILBOX_2);
 8000b40:	6899      	ldr	r1, [r3, #8]
    if(tmp1 || tmp2 || tmp3)  
 8000b42:	d005      	beq.n	8000b50 <HAL_CAN_IRQHandler+0x50>
 8000b44:	4a61      	ldr	r2, [pc, #388]	; (8000ccc <HAL_CAN_IRQHandler+0x1cc>)
 8000b46:	4382      	bics	r2, r0
 8000b48:	d002      	beq.n	8000b50 <HAL_CAN_IRQHandler+0x50>
 8000b4a:	4a61      	ldr	r2, [pc, #388]	; (8000cd0 <HAL_CAN_IRQHandler+0x1d0>)
 8000b4c:	438a      	bics	r2, r1
 8000b4e:	d129      	bne.n	8000ba4 <HAL_CAN_IRQHandler+0xa4>
      tmp1 = __HAL_CAN_GET_FLAG(hcan, CAN_FLAG_TXOK0);
 8000b50:	6898      	ldr	r0, [r3, #8]
      tmp2 = __HAL_CAN_GET_FLAG(hcan, CAN_FLAG_TXOK1);
 8000b52:	6899      	ldr	r1, [r3, #8]
      if((tmp1) || (tmp2) || (tmp3))
 8000b54:	0780      	lsls	r0, r0, #30
      tmp3 = __HAL_CAN_GET_FLAG(hcan, CAN_FLAG_TXOK2);
 8000b56:	689a      	ldr	r2, [r3, #8]
      if((tmp1) || (tmp2) || (tmp3))
 8000b58:	d404      	bmi.n	8000b64 <HAL_CAN_IRQHandler+0x64>
 8000b5a:	0589      	lsls	r1, r1, #22
 8000b5c:	d402      	bmi.n	8000b64 <HAL_CAN_IRQHandler+0x64>
 8000b5e:	07d6      	lsls	r6, r2, #31
 8000b60:	f140 8090 	bpl.w	8000c84 <HAL_CAN_IRQHandler+0x184>
  __HAL_CAN_DISABLE_IT(hcan, CAN_IT_TME);
 8000b64:	695a      	ldr	r2, [r3, #20]
 8000b66:	f022 0201 	bic.w	r2, r2, #1
 8000b6a:	615a      	str	r2, [r3, #20]
  if(hcan->State == HAL_CAN_STATE_BUSY_TX)
 8000b6c:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
 8000b70:	2a12      	cmp	r2, #18
    __HAL_CAN_DISABLE_IT(hcan, CAN_IT_EWG |
 8000b72:	bf02      	ittt	eq
 8000b74:	695a      	ldreq	r2, [r3, #20]
 8000b76:	f422 420f 	biceq.w	r2, r2, #36608	; 0x8f00
 8000b7a:	615a      	streq	r2, [r3, #20]
  switch(hcan->State)
 8000b7c:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8000b80:	b2db      	uxtb	r3, r3
 8000b82:	2b52      	cmp	r3, #82	; 0x52
 8000b84:	d078      	beq.n	8000c78 <HAL_CAN_IRQHandler+0x178>
 8000b86:	2b72      	cmp	r3, #114	; 0x72
 8000b88:	d078      	beq.n	8000c7c <HAL_CAN_IRQHandler+0x17c>
 8000b8a:	2b42      	cmp	r3, #66	; 0x42
 8000b8c:	d178      	bne.n	8000c80 <HAL_CAN_IRQHandler+0x180>
      hcan->State = HAL_CAN_STATE_BUSY_RX0;
 8000b8e:	2322      	movs	r3, #34	; 0x22
      hcan->State = HAL_CAN_STATE_READY;
 8000b90:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  HAL_CAN_TxCpltCallback(hcan);
 8000b94:	4620      	mov	r0, r4
 8000b96:	f7ff ff2f 	bl	80009f8 <HAL_CAN_TxCpltCallback>
      SET_BIT(hcan->Instance->TSR, CAN_TSR_RQCP0  | CAN_TSR_RQCP1  | CAN_TSR_RQCP2 | \
 8000b9a:	6822      	ldr	r2, [r4, #0]
 8000b9c:	4b4d      	ldr	r3, [pc, #308]	; (8000cd4 <HAL_CAN_IRQHandler+0x1d4>)
 8000b9e:	6891      	ldr	r1, [r2, #8]
 8000ba0:	430b      	orrs	r3, r1
 8000ba2:	6093      	str	r3, [r2, #8]
  tmp1 = __HAL_CAN_MSG_PENDING(hcan, CAN_FIFO0);
 8000ba4:	6823      	ldr	r3, [r4, #0]
 8000ba6:	68da      	ldr	r2, [r3, #12]
  tmp2 = __HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_FMP0);
 8000ba8:	695b      	ldr	r3, [r3, #20]
  if((tmp1 != 0U) && tmp2)
 8000baa:	0790      	lsls	r0, r2, #30
 8000bac:	d005      	beq.n	8000bba <HAL_CAN_IRQHandler+0xba>
 8000bae:	0799      	lsls	r1, r3, #30
 8000bb0:	d503      	bpl.n	8000bba <HAL_CAN_IRQHandler+0xba>
    CAN_Receive_IT(hcan, CAN_FIFO0);
 8000bb2:	2100      	movs	r1, #0
 8000bb4:	4620      	mov	r0, r4
 8000bb6:	f7ff ff21 	bl	80009fc <CAN_Receive_IT>
  tmp1 = __HAL_CAN_MSG_PENDING(hcan, CAN_FIFO1);
 8000bba:	6823      	ldr	r3, [r4, #0]
 8000bbc:	691a      	ldr	r2, [r3, #16]
  tmp2 = __HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_FMP1);
 8000bbe:	695b      	ldr	r3, [r3, #20]
  if((tmp1 != 0U) && tmp2)
 8000bc0:	0792      	lsls	r2, r2, #30
 8000bc2:	d005      	beq.n	8000bd0 <HAL_CAN_IRQHandler+0xd0>
 8000bc4:	06de      	lsls	r6, r3, #27
 8000bc6:	d503      	bpl.n	8000bd0 <HAL_CAN_IRQHandler+0xd0>
    CAN_Receive_IT(hcan, CAN_FIFO1);
 8000bc8:	2101      	movs	r1, #1
 8000bca:	4620      	mov	r0, r4
 8000bcc:	f7ff ff16 	bl	80009fc <CAN_Receive_IT>
  hcan->ErrorCode |= errorcode;
 8000bd0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000bd2:	431d      	orrs	r5, r3
  tmp1 = __HAL_CAN_GET_FLAG(hcan, CAN_FLAG_EWG);
 8000bd4:	6823      	ldr	r3, [r4, #0]
  hcan->ErrorCode |= errorcode;
 8000bd6:	6425      	str	r5, [r4, #64]	; 0x40
  tmp1 = __HAL_CAN_GET_FLAG(hcan, CAN_FLAG_EWG);
 8000bd8:	6998      	ldr	r0, [r3, #24]
  tmp2 = __HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_EWG);
 8000bda:	6959      	ldr	r1, [r3, #20]
  if(tmp1 && tmp2 && tmp3)
 8000bdc:	07c0      	lsls	r0, r0, #31
  tmp3 = __HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_ERR);
 8000bde:	695a      	ldr	r2, [r3, #20]
  if(tmp1 && tmp2 && tmp3)
 8000be0:	d507      	bpl.n	8000bf2 <HAL_CAN_IRQHandler+0xf2>
 8000be2:	05ce      	lsls	r6, r1, #23
 8000be4:	d505      	bpl.n	8000bf2 <HAL_CAN_IRQHandler+0xf2>
 8000be6:	0415      	lsls	r5, r2, #16
    hcan->ErrorCode |= HAL_CAN_ERROR_EWG;
 8000be8:	bf42      	ittt	mi
 8000bea:	6c22      	ldrmi	r2, [r4, #64]	; 0x40
 8000bec:	f042 0201 	orrmi.w	r2, r2, #1
 8000bf0:	6422      	strmi	r2, [r4, #64]	; 0x40
  tmp1 = __HAL_CAN_GET_FLAG(hcan, CAN_FLAG_EPV);
 8000bf2:	6998      	ldr	r0, [r3, #24]
  tmp2 = __HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_EPV);
 8000bf4:	6959      	ldr	r1, [r3, #20]
  if(tmp1 && tmp2 && tmp3)
 8000bf6:	0780      	lsls	r0, r0, #30
  tmp3 = __HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_ERR); 
 8000bf8:	695a      	ldr	r2, [r3, #20]
  if(tmp1 && tmp2 && tmp3)
 8000bfa:	d507      	bpl.n	8000c0c <HAL_CAN_IRQHandler+0x10c>
 8000bfc:	0589      	lsls	r1, r1, #22
 8000bfe:	d505      	bpl.n	8000c0c <HAL_CAN_IRQHandler+0x10c>
 8000c00:	0412      	lsls	r2, r2, #16
    hcan->ErrorCode |= HAL_CAN_ERROR_EPV;
 8000c02:	bf42      	ittt	mi
 8000c04:	6c22      	ldrmi	r2, [r4, #64]	; 0x40
 8000c06:	f042 0202 	orrmi.w	r2, r2, #2
 8000c0a:	6422      	strmi	r2, [r4, #64]	; 0x40
  tmp1 = __HAL_CAN_GET_FLAG(hcan, CAN_FLAG_BOF);
 8000c0c:	6998      	ldr	r0, [r3, #24]
  tmp2 = __HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_BOF);
 8000c0e:	6959      	ldr	r1, [r3, #20]
  if(tmp1 && tmp2 && tmp3)
 8000c10:	0746      	lsls	r6, r0, #29
  tmp3 = __HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_ERR);  
 8000c12:	695a      	ldr	r2, [r3, #20]
  if(tmp1 && tmp2 && tmp3)
 8000c14:	d507      	bpl.n	8000c26 <HAL_CAN_IRQHandler+0x126>
 8000c16:	054d      	lsls	r5, r1, #21
 8000c18:	d505      	bpl.n	8000c26 <HAL_CAN_IRQHandler+0x126>
 8000c1a:	0410      	lsls	r0, r2, #16
    hcan->ErrorCode |= HAL_CAN_ERROR_BOF;
 8000c1c:	bf42      	ittt	mi
 8000c1e:	6c22      	ldrmi	r2, [r4, #64]	; 0x40
 8000c20:	f042 0204 	orrmi.w	r2, r2, #4
 8000c24:	6422      	strmi	r2, [r4, #64]	; 0x40
  tmp1 = HAL_IS_BIT_CLR(hcan->Instance->ESR, CAN_ESR_LEC);
 8000c26:	6998      	ldr	r0, [r3, #24]
  tmp2 = __HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_LEC);
 8000c28:	6959      	ldr	r1, [r3, #20]
  if((!tmp1) && tmp2 && tmp3)
 8000c2a:	f010 0f70 	tst.w	r0, #112	; 0x70
  tmp3 = __HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_ERR);
 8000c2e:	695a      	ldr	r2, [r3, #20]
  if((!tmp1) && tmp2 && tmp3)
 8000c30:	d011      	beq.n	8000c56 <HAL_CAN_IRQHandler+0x156>
 8000c32:	0509      	lsls	r1, r1, #20
 8000c34:	d50f      	bpl.n	8000c56 <HAL_CAN_IRQHandler+0x156>
 8000c36:	0412      	lsls	r2, r2, #16
 8000c38:	d50d      	bpl.n	8000c56 <HAL_CAN_IRQHandler+0x156>
    tmp1 = (hcan->Instance->ESR & CAN_ESR_LEC);
 8000c3a:	699a      	ldr	r2, [r3, #24]
 8000c3c:	f002 0270 	and.w	r2, r2, #112	; 0x70
    switch(tmp1)
 8000c40:	2a30      	cmp	r2, #48	; 0x30
 8000c42:	d035      	beq.n	8000cb0 <HAL_CAN_IRQHandler+0x1b0>
 8000c44:	d821      	bhi.n	8000c8a <HAL_CAN_IRQHandler+0x18a>
 8000c46:	2a10      	cmp	r2, #16
 8000c48:	d029      	beq.n	8000c9e <HAL_CAN_IRQHandler+0x19e>
 8000c4a:	2a20      	cmp	r2, #32
 8000c4c:	d02c      	beq.n	8000ca8 <HAL_CAN_IRQHandler+0x1a8>
    CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8000c4e:	699a      	ldr	r2, [r3, #24]
 8000c50:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8000c54:	619a      	str	r2, [r3, #24]
  if(hcan->ErrorCode != HAL_CAN_ERROR_NONE)
 8000c56:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000c58:	b16a      	cbz	r2, 8000c76 <HAL_CAN_IRQHandler+0x176>
    hcan->Instance->MSR = CAN_MSR_ERRI; 
 8000c5a:	2204      	movs	r2, #4
 8000c5c:	605a      	str	r2, [r3, #4]
    hcan->State = HAL_CAN_STATE_READY;
 8000c5e:	2201      	movs	r2, #1
 8000c60:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    __HAL_CAN_DISABLE_IT(hcan, CAN_IT_EWG |
 8000c64:	695a      	ldr	r2, [r3, #20]
    HAL_CAN_ErrorCallback(hcan);
 8000c66:	4620      	mov	r0, r4
    __HAL_CAN_DISABLE_IT(hcan, CAN_IT_EWG |
 8000c68:	f422 420f 	bic.w	r2, r2, #36608	; 0x8f00
 8000c6c:	f022 025b 	bic.w	r2, r2, #91	; 0x5b
 8000c70:	615a      	str	r2, [r3, #20]
    HAL_CAN_ErrorCallback(hcan);
 8000c72:	f7ff ff43 	bl	8000afc <HAL_CAN_ErrorCallback>
 8000c76:	bd70      	pop	{r4, r5, r6, pc}
      hcan->State = HAL_CAN_STATE_BUSY_RX1;
 8000c78:	2332      	movs	r3, #50	; 0x32
 8000c7a:	e789      	b.n	8000b90 <HAL_CAN_IRQHandler+0x90>
      hcan->State = HAL_CAN_STATE_BUSY_RX0_RX1;
 8000c7c:	2362      	movs	r3, #98	; 0x62
 8000c7e:	e787      	b.n	8000b90 <HAL_CAN_IRQHandler+0x90>
      hcan->State = HAL_CAN_STATE_READY;
 8000c80:	2301      	movs	r3, #1
 8000c82:	e785      	b.n	8000b90 <HAL_CAN_IRQHandler+0x90>
        errorcode |= HAL_CAN_ERROR_TXFAIL;
 8000c84:	f445 6500 	orr.w	r5, r5, #2048	; 0x800
 8000c88:	e787      	b.n	8000b9a <HAL_CAN_IRQHandler+0x9a>
    switch(tmp1)
 8000c8a:	2a50      	cmp	r2, #80	; 0x50
 8000c8c:	d014      	beq.n	8000cb8 <HAL_CAN_IRQHandler+0x1b8>
 8000c8e:	2a60      	cmp	r2, #96	; 0x60
 8000c90:	d016      	beq.n	8000cc0 <HAL_CAN_IRQHandler+0x1c0>
 8000c92:	2a40      	cmp	r2, #64	; 0x40
 8000c94:	d1db      	bne.n	8000c4e <HAL_CAN_IRQHandler+0x14e>
          hcan->ErrorCode |= HAL_CAN_ERROR_BR;
 8000c96:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000c98:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000c9c:	e002      	b.n	8000ca4 <HAL_CAN_IRQHandler+0x1a4>
          hcan->ErrorCode |= HAL_CAN_ERROR_STF;
 8000c9e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000ca0:	f042 0208 	orr.w	r2, r2, #8
          hcan->ErrorCode |= HAL_CAN_ERROR_CRC;
 8000ca4:	6422      	str	r2, [r4, #64]	; 0x40
          break;
 8000ca6:	e7d2      	b.n	8000c4e <HAL_CAN_IRQHandler+0x14e>
          hcan->ErrorCode |= HAL_CAN_ERROR_FOR;
 8000ca8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000caa:	f042 0210 	orr.w	r2, r2, #16
 8000cae:	e7f9      	b.n	8000ca4 <HAL_CAN_IRQHandler+0x1a4>
          hcan->ErrorCode |= HAL_CAN_ERROR_ACK;
 8000cb0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000cb2:	f042 0220 	orr.w	r2, r2, #32
 8000cb6:	e7f5      	b.n	8000ca4 <HAL_CAN_IRQHandler+0x1a4>
          hcan->ErrorCode |= HAL_CAN_ERROR_BD;
 8000cb8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000cba:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000cbe:	e7f1      	b.n	8000ca4 <HAL_CAN_IRQHandler+0x1a4>
          hcan->ErrorCode |= HAL_CAN_ERROR_CRC;
 8000cc0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000cc2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000cc6:	e7ed      	b.n	8000ca4 <HAL_CAN_IRQHandler+0x1a4>
 8000cc8:	04000001 	.word	0x04000001
 8000ccc:	08000100 	.word	0x08000100
 8000cd0:	10010000 	.word	0x10010000
 8000cd4:	00010509 	.word	0x00010509

08000cd8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cd8:	4a07      	ldr	r2, [pc, #28]	; (8000cf8 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000cda:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cdc:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000cde:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ce2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000ce6:	041b      	lsls	r3, r3, #16
 8000ce8:	0c1b      	lsrs	r3, r3, #16
 8000cea:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8000cf2:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000cf4:	60d3      	str	r3, [r2, #12]
 8000cf6:	4770      	bx	lr
 8000cf8:	e000ed00 	.word	0xe000ed00

08000cfc <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cfc:	4b17      	ldr	r3, [pc, #92]	; (8000d5c <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cfe:	b530      	push	{r4, r5, lr}
 8000d00:	68dc      	ldr	r4, [r3, #12]
 8000d02:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d06:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d0a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d0c:	2b04      	cmp	r3, #4
 8000d0e:	bf28      	it	cs
 8000d10:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d12:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d14:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d18:	bf98      	it	ls
 8000d1a:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d1c:	fa05 f303 	lsl.w	r3, r5, r3
 8000d20:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d24:	bf88      	it	hi
 8000d26:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d28:	4019      	ands	r1, r3
 8000d2a:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d2c:	fa05 f404 	lsl.w	r4, r5, r4
 8000d30:	3c01      	subs	r4, #1
 8000d32:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000d34:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d36:	ea42 0201 	orr.w	r2, r2, r1
 8000d3a:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d3e:	bfaf      	iteee	ge
 8000d40:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d44:	4b06      	ldrlt	r3, [pc, #24]	; (8000d60 <HAL_NVIC_SetPriority+0x64>)
 8000d46:	f000 000f 	andlt.w	r0, r0, #15
 8000d4a:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d4c:	bfa5      	ittet	ge
 8000d4e:	b2d2      	uxtbge	r2, r2
 8000d50:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d54:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d56:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000d5a:	bd30      	pop	{r4, r5, pc}
 8000d5c:	e000ed00 	.word	0xe000ed00
 8000d60:	e000ed14 	.word	0xe000ed14

08000d64 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000d64:	2301      	movs	r3, #1
 8000d66:	0942      	lsrs	r2, r0, #5
 8000d68:	f000 001f 	and.w	r0, r0, #31
 8000d6c:	fa03 f000 	lsl.w	r0, r3, r0
 8000d70:	4b01      	ldr	r3, [pc, #4]	; (8000d78 <HAL_NVIC_EnableIRQ+0x14>)
 8000d72:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000d76:	4770      	bx	lr
 8000d78:	e000e100 	.word	0xe000e100

08000d7c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d7c:	3801      	subs	r0, #1
 8000d7e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000d82:	d20a      	bcs.n	8000d9a <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d84:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d86:	4b06      	ldr	r3, [pc, #24]	; (8000da0 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d88:	4a06      	ldr	r2, [pc, #24]	; (8000da4 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d8a:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d8c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d90:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d92:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d94:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d96:	601a      	str	r2, [r3, #0]
 8000d98:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000d9a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000d9c:	4770      	bx	lr
 8000d9e:	bf00      	nop
 8000da0:	e000e010 	.word	0xe000e010
 8000da4:	e000ed00 	.word	0xe000ed00

08000da8 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000da8:	4b04      	ldr	r3, [pc, #16]	; (8000dbc <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000daa:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000dac:	681a      	ldr	r2, [r3, #0]
 8000dae:	bf0c      	ite	eq
 8000db0:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000db4:	f022 0204 	bicne.w	r2, r2, #4
 8000db8:	601a      	str	r2, [r3, #0]
 8000dba:	4770      	bx	lr
 8000dbc:	e000e010 	.word	0xe000e010

08000dc0 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000dc0:	4770      	bx	lr

08000dc2 <HAL_SYSTICK_IRQHandler>:
{
 8000dc2:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8000dc4:	f7ff fffc 	bl	8000dc0 <HAL_SYSTICK_Callback>
 8000dc8:	bd08      	pop	{r3, pc}
	...

08000dcc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000dcc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 8000dd0:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000dd2:	4616      	mov	r6, r2
 8000dd4:	4b65      	ldr	r3, [pc, #404]	; (8000f6c <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000dd6:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8000f7c <HAL_GPIO_Init+0x1b0>
 8000dda:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 8000f80 <HAL_GPIO_Init+0x1b4>
    ioposition = (0x01U << position);
 8000dde:	f04f 0801 	mov.w	r8, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000de2:	680c      	ldr	r4, [r1, #0]
    ioposition = (0x01U << position);
 8000de4:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000de8:	ea08 0404 	and.w	r4, r8, r4
    if (iocurrent == ioposition)
 8000dec:	45a0      	cmp	r8, r4
 8000dee:	d17f      	bne.n	8000ef0 <HAL_GPIO_Init+0x124>
      switch (GPIO_Init->Mode)
 8000df0:	684d      	ldr	r5, [r1, #4]
 8000df2:	2d12      	cmp	r5, #18
 8000df4:	f000 80af 	beq.w	8000f56 <HAL_GPIO_Init+0x18a>
 8000df8:	f200 8088 	bhi.w	8000f0c <HAL_GPIO_Init+0x140>
 8000dfc:	2d02      	cmp	r5, #2
 8000dfe:	f000 80a7 	beq.w	8000f50 <HAL_GPIO_Init+0x184>
 8000e02:	d87c      	bhi.n	8000efe <HAL_GPIO_Init+0x132>
 8000e04:	2d00      	cmp	r5, #0
 8000e06:	f000 808e 	beq.w	8000f26 <HAL_GPIO_Init+0x15a>
 8000e0a:	2d01      	cmp	r5, #1
 8000e0c:	f000 809e 	beq.w	8000f4c <HAL_GPIO_Init+0x180>
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000e10:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000e14:	2cff      	cmp	r4, #255	; 0xff
 8000e16:	bf93      	iteet	ls
 8000e18:	4682      	movls	sl, r0
 8000e1a:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 8000e1e:	3d08      	subhi	r5, #8
 8000e20:	f8d0 b000 	ldrls.w	fp, [r0]
 8000e24:	bf92      	itee	ls
 8000e26:	00b5      	lslls	r5, r6, #2
 8000e28:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8000e2c:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000e2e:	fa09 f805 	lsl.w	r8, r9, r5
 8000e32:	ea2b 0808 	bic.w	r8, fp, r8
 8000e36:	fa02 f505 	lsl.w	r5, r2, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000e3a:	bf88      	it	hi
 8000e3c:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000e40:	ea48 0505 	orr.w	r5, r8, r5
 8000e44:	f8ca 5000 	str.w	r5, [sl]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e48:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8000e4c:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8000e50:	d04e      	beq.n	8000ef0 <HAL_GPIO_Init+0x124>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000e52:	4d47      	ldr	r5, [pc, #284]	; (8000f70 <HAL_GPIO_Init+0x1a4>)
 8000e54:	4f46      	ldr	r7, [pc, #280]	; (8000f70 <HAL_GPIO_Init+0x1a4>)
 8000e56:	69ad      	ldr	r5, [r5, #24]
 8000e58:	f026 0803 	bic.w	r8, r6, #3
 8000e5c:	f045 0501 	orr.w	r5, r5, #1
 8000e60:	61bd      	str	r5, [r7, #24]
 8000e62:	69bd      	ldr	r5, [r7, #24]
 8000e64:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8000e68:	f005 0501 	and.w	r5, r5, #1
 8000e6c:	9501      	str	r5, [sp, #4]
 8000e6e:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000e72:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000e76:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000e78:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2U];
 8000e7c:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000e80:	fa09 f90b 	lsl.w	r9, r9, fp
 8000e84:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e88:	4d3a      	ldr	r5, [pc, #232]	; (8000f74 <HAL_GPIO_Init+0x1a8>)
 8000e8a:	42a8      	cmp	r0, r5
 8000e8c:	d068      	beq.n	8000f60 <HAL_GPIO_Init+0x194>
 8000e8e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000e92:	42a8      	cmp	r0, r5
 8000e94:	d066      	beq.n	8000f64 <HAL_GPIO_Init+0x198>
 8000e96:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000e9a:	42a8      	cmp	r0, r5
 8000e9c:	d064      	beq.n	8000f68 <HAL_GPIO_Init+0x19c>
 8000e9e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000ea2:	42a8      	cmp	r0, r5
 8000ea4:	bf0c      	ite	eq
 8000ea6:	2503      	moveq	r5, #3
 8000ea8:	2504      	movne	r5, #4
 8000eaa:	fa05 f50b 	lsl.w	r5, r5, fp
 8000eae:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2U] = temp;
 8000eb2:	f8c8 5008 	str.w	r5, [r8, #8]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000eb6:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000eb8:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8000ebc:	bf14      	ite	ne
 8000ebe:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000ec0:	43a5      	biceq	r5, r4
 8000ec2:	601d      	str	r5, [r3, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000ec4:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ec6:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8000eca:	bf14      	ite	ne
 8000ecc:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000ece:	43a5      	biceq	r5, r4
 8000ed0:	605d      	str	r5, [r3, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000ed2:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ed4:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8000ed8:	bf14      	ite	ne
 8000eda:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000edc:	43a5      	biceq	r5, r4
 8000ede:	609d      	str	r5, [r3, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000ee0:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ee2:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8000ee6:	bf14      	ite	ne
 8000ee8:	432c      	orrne	r4, r5
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000eea:	ea25 0404 	biceq.w	r4, r5, r4
 8000eee:	60dc      	str	r4, [r3, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000ef0:	3601      	adds	r6, #1
 8000ef2:	2e10      	cmp	r6, #16
 8000ef4:	f47f af73 	bne.w	8000dde <HAL_GPIO_Init+0x12>
        }
      }
    }
  }
}
 8000ef8:	b003      	add	sp, #12
 8000efa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 8000efe:	2d03      	cmp	r5, #3
 8000f00:	d022      	beq.n	8000f48 <HAL_GPIO_Init+0x17c>
 8000f02:	2d11      	cmp	r5, #17
 8000f04:	d184      	bne.n	8000e10 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000f06:	68ca      	ldr	r2, [r1, #12]
 8000f08:	3204      	adds	r2, #4
          break;
 8000f0a:	e781      	b.n	8000e10 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 8000f0c:	4f1a      	ldr	r7, [pc, #104]	; (8000f78 <HAL_GPIO_Init+0x1ac>)
 8000f0e:	42bd      	cmp	r5, r7
 8000f10:	d009      	beq.n	8000f26 <HAL_GPIO_Init+0x15a>
 8000f12:	d812      	bhi.n	8000f3a <HAL_GPIO_Init+0x16e>
 8000f14:	f8df 906c 	ldr.w	r9, [pc, #108]	; 8000f84 <HAL_GPIO_Init+0x1b8>
 8000f18:	454d      	cmp	r5, r9
 8000f1a:	d004      	beq.n	8000f26 <HAL_GPIO_Init+0x15a>
 8000f1c:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8000f20:	454d      	cmp	r5, r9
 8000f22:	f47f af75 	bne.w	8000e10 <HAL_GPIO_Init+0x44>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000f26:	688a      	ldr	r2, [r1, #8]
 8000f28:	b1c2      	cbz	r2, 8000f5c <HAL_GPIO_Init+0x190>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000f2a:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8000f2c:	bf0c      	ite	eq
 8000f2e:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 8000f32:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f36:	2208      	movs	r2, #8
 8000f38:	e76a      	b.n	8000e10 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 8000f3a:	4575      	cmp	r5, lr
 8000f3c:	d0f3      	beq.n	8000f26 <HAL_GPIO_Init+0x15a>
 8000f3e:	4565      	cmp	r5, ip
 8000f40:	d0f1      	beq.n	8000f26 <HAL_GPIO_Init+0x15a>
 8000f42:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8000f88 <HAL_GPIO_Init+0x1bc>
 8000f46:	e7eb      	b.n	8000f20 <HAL_GPIO_Init+0x154>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000f48:	2200      	movs	r2, #0
 8000f4a:	e761      	b.n	8000e10 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000f4c:	68ca      	ldr	r2, [r1, #12]
          break;
 8000f4e:	e75f      	b.n	8000e10 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000f50:	68ca      	ldr	r2, [r1, #12]
 8000f52:	3208      	adds	r2, #8
          break;
 8000f54:	e75c      	b.n	8000e10 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000f56:	68ca      	ldr	r2, [r1, #12]
 8000f58:	320c      	adds	r2, #12
          break;
 8000f5a:	e759      	b.n	8000e10 <HAL_GPIO_Init+0x44>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000f5c:	2204      	movs	r2, #4
 8000f5e:	e757      	b.n	8000e10 <HAL_GPIO_Init+0x44>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f60:	2500      	movs	r5, #0
 8000f62:	e7a2      	b.n	8000eaa <HAL_GPIO_Init+0xde>
 8000f64:	2501      	movs	r5, #1
 8000f66:	e7a0      	b.n	8000eaa <HAL_GPIO_Init+0xde>
 8000f68:	2502      	movs	r5, #2
 8000f6a:	e79e      	b.n	8000eaa <HAL_GPIO_Init+0xde>
 8000f6c:	40010400 	.word	0x40010400
 8000f70:	40021000 	.word	0x40021000
 8000f74:	40010800 	.word	0x40010800
 8000f78:	10210000 	.word	0x10210000
 8000f7c:	10310000 	.word	0x10310000
 8000f80:	10320000 	.word	0x10320000
 8000f84:	10110000 	.word	0x10110000
 8000f88:	10220000 	.word	0x10220000

08000f8c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f8c:	b10a      	cbz	r2, 8000f92 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000f8e:	6101      	str	r1, [r0, #16]
 8000f90:	4770      	bx	lr
 8000f92:	0409      	lsls	r1, r1, #16
 8000f94:	e7fb      	b.n	8000f8e <HAL_GPIO_WritePin+0x2>

08000f96 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000f96:	4770      	bx	lr

08000f98 <HAL_GPIO_EXTI_IRQHandler>:
{
 8000f98:	b508      	push	{r3, lr}
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8000f9a:	4b04      	ldr	r3, [pc, #16]	; (8000fac <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8000f9c:	6959      	ldr	r1, [r3, #20]
 8000f9e:	4201      	tst	r1, r0
 8000fa0:	d002      	beq.n	8000fa8 <HAL_GPIO_EXTI_IRQHandler+0x10>
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000fa2:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000fa4:	f7ff fff7 	bl	8000f96 <HAL_GPIO_EXTI_Callback>
 8000fa8:	bd08      	pop	{r3, pc}
 8000faa:	bf00      	nop
 8000fac:	40010400 	.word	0x40010400

08000fb0 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000fb0:	6803      	ldr	r3, [r0, #0]
{
 8000fb2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000fb6:	07db      	lsls	r3, r3, #31
{
 8000fb8:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000fba:	d410      	bmi.n	8000fde <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000fbc:	682b      	ldr	r3, [r5, #0]
 8000fbe:	079f      	lsls	r7, r3, #30
 8000fc0:	d45e      	bmi.n	8001080 <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000fc2:	682b      	ldr	r3, [r5, #0]
 8000fc4:	0719      	lsls	r1, r3, #28
 8000fc6:	f100 8095 	bmi.w	80010f4 <HAL_RCC_OscConfig+0x144>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000fca:	682b      	ldr	r3, [r5, #0]
 8000fcc:	075a      	lsls	r2, r3, #29
 8000fce:	f100 80bf 	bmi.w	8001150 <HAL_RCC_OscConfig+0x1a0>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000fd2:	69ea      	ldr	r2, [r5, #28]
 8000fd4:	2a00      	cmp	r2, #0
 8000fd6:	f040 812d 	bne.w	8001234 <HAL_RCC_OscConfig+0x284>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8000fda:	2000      	movs	r0, #0
 8000fdc:	e014      	b.n	8001008 <HAL_RCC_OscConfig+0x58>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000fde:	4c90      	ldr	r4, [pc, #576]	; (8001220 <HAL_RCC_OscConfig+0x270>)
 8000fe0:	6863      	ldr	r3, [r4, #4]
 8000fe2:	f003 030c 	and.w	r3, r3, #12
 8000fe6:	2b04      	cmp	r3, #4
 8000fe8:	d007      	beq.n	8000ffa <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000fea:	6863      	ldr	r3, [r4, #4]
 8000fec:	f003 030c 	and.w	r3, r3, #12
 8000ff0:	2b08      	cmp	r3, #8
 8000ff2:	d10c      	bne.n	800100e <HAL_RCC_OscConfig+0x5e>
 8000ff4:	6863      	ldr	r3, [r4, #4]
 8000ff6:	03de      	lsls	r6, r3, #15
 8000ff8:	d509      	bpl.n	800100e <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ffa:	6823      	ldr	r3, [r4, #0]
 8000ffc:	039c      	lsls	r4, r3, #14
 8000ffe:	d5dd      	bpl.n	8000fbc <HAL_RCC_OscConfig+0xc>
 8001000:	686b      	ldr	r3, [r5, #4]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d1da      	bne.n	8000fbc <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8001006:	2001      	movs	r0, #1
}
 8001008:	b002      	add	sp, #8
 800100a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800100e:	686b      	ldr	r3, [r5, #4]
 8001010:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001014:	d110      	bne.n	8001038 <HAL_RCC_OscConfig+0x88>
 8001016:	6823      	ldr	r3, [r4, #0]
 8001018:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800101c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800101e:	f7ff facb 	bl	80005b8 <HAL_GetTick>
 8001022:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001024:	6823      	ldr	r3, [r4, #0]
 8001026:	0398      	lsls	r0, r3, #14
 8001028:	d4c8      	bmi.n	8000fbc <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800102a:	f7ff fac5 	bl	80005b8 <HAL_GetTick>
 800102e:	1b80      	subs	r0, r0, r6
 8001030:	2864      	cmp	r0, #100	; 0x64
 8001032:	d9f7      	bls.n	8001024 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8001034:	2003      	movs	r0, #3
 8001036:	e7e7      	b.n	8001008 <HAL_RCC_OscConfig+0x58>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001038:	b99b      	cbnz	r3, 8001062 <HAL_RCC_OscConfig+0xb2>
 800103a:	6823      	ldr	r3, [r4, #0]
 800103c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001040:	6023      	str	r3, [r4, #0]
 8001042:	6823      	ldr	r3, [r4, #0]
 8001044:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001048:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800104a:	f7ff fab5 	bl	80005b8 <HAL_GetTick>
 800104e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001050:	6823      	ldr	r3, [r4, #0]
 8001052:	0399      	lsls	r1, r3, #14
 8001054:	d5b2      	bpl.n	8000fbc <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001056:	f7ff faaf 	bl	80005b8 <HAL_GetTick>
 800105a:	1b80      	subs	r0, r0, r6
 800105c:	2864      	cmp	r0, #100	; 0x64
 800105e:	d9f7      	bls.n	8001050 <HAL_RCC_OscConfig+0xa0>
 8001060:	e7e8      	b.n	8001034 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001062:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001066:	6823      	ldr	r3, [r4, #0]
 8001068:	d103      	bne.n	8001072 <HAL_RCC_OscConfig+0xc2>
 800106a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800106e:	6023      	str	r3, [r4, #0]
 8001070:	e7d1      	b.n	8001016 <HAL_RCC_OscConfig+0x66>
 8001072:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001076:	6023      	str	r3, [r4, #0]
 8001078:	6823      	ldr	r3, [r4, #0]
 800107a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800107e:	e7cd      	b.n	800101c <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001080:	4c67      	ldr	r4, [pc, #412]	; (8001220 <HAL_RCC_OscConfig+0x270>)
 8001082:	6863      	ldr	r3, [r4, #4]
 8001084:	f013 0f0c 	tst.w	r3, #12
 8001088:	d007      	beq.n	800109a <HAL_RCC_OscConfig+0xea>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800108a:	6863      	ldr	r3, [r4, #4]
 800108c:	f003 030c 	and.w	r3, r3, #12
 8001090:	2b08      	cmp	r3, #8
 8001092:	d110      	bne.n	80010b6 <HAL_RCC_OscConfig+0x106>
 8001094:	6863      	ldr	r3, [r4, #4]
 8001096:	03da      	lsls	r2, r3, #15
 8001098:	d40d      	bmi.n	80010b6 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800109a:	6823      	ldr	r3, [r4, #0]
 800109c:	079b      	lsls	r3, r3, #30
 800109e:	d502      	bpl.n	80010a6 <HAL_RCC_OscConfig+0xf6>
 80010a0:	692b      	ldr	r3, [r5, #16]
 80010a2:	2b01      	cmp	r3, #1
 80010a4:	d1af      	bne.n	8001006 <HAL_RCC_OscConfig+0x56>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010a6:	6823      	ldr	r3, [r4, #0]
 80010a8:	696a      	ldr	r2, [r5, #20]
 80010aa:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80010ae:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80010b2:	6023      	str	r3, [r4, #0]
 80010b4:	e785      	b.n	8000fc2 <HAL_RCC_OscConfig+0x12>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80010b6:	692a      	ldr	r2, [r5, #16]
 80010b8:	4b5a      	ldr	r3, [pc, #360]	; (8001224 <HAL_RCC_OscConfig+0x274>)
 80010ba:	b16a      	cbz	r2, 80010d8 <HAL_RCC_OscConfig+0x128>
        __HAL_RCC_HSI_ENABLE();
 80010bc:	2201      	movs	r2, #1
 80010be:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80010c0:	f7ff fa7a 	bl	80005b8 <HAL_GetTick>
 80010c4:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010c6:	6823      	ldr	r3, [r4, #0]
 80010c8:	079f      	lsls	r7, r3, #30
 80010ca:	d4ec      	bmi.n	80010a6 <HAL_RCC_OscConfig+0xf6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80010cc:	f7ff fa74 	bl	80005b8 <HAL_GetTick>
 80010d0:	1b80      	subs	r0, r0, r6
 80010d2:	2802      	cmp	r0, #2
 80010d4:	d9f7      	bls.n	80010c6 <HAL_RCC_OscConfig+0x116>
 80010d6:	e7ad      	b.n	8001034 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 80010d8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80010da:	f7ff fa6d 	bl	80005b8 <HAL_GetTick>
 80010de:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010e0:	6823      	ldr	r3, [r4, #0]
 80010e2:	0798      	lsls	r0, r3, #30
 80010e4:	f57f af6d 	bpl.w	8000fc2 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80010e8:	f7ff fa66 	bl	80005b8 <HAL_GetTick>
 80010ec:	1b80      	subs	r0, r0, r6
 80010ee:	2802      	cmp	r0, #2
 80010f0:	d9f6      	bls.n	80010e0 <HAL_RCC_OscConfig+0x130>
 80010f2:	e79f      	b.n	8001034 <HAL_RCC_OscConfig+0x84>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80010f4:	69aa      	ldr	r2, [r5, #24]
 80010f6:	4c4a      	ldr	r4, [pc, #296]	; (8001220 <HAL_RCC_OscConfig+0x270>)
 80010f8:	4b4b      	ldr	r3, [pc, #300]	; (8001228 <HAL_RCC_OscConfig+0x278>)
 80010fa:	b1da      	cbz	r2, 8001134 <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 80010fc:	2201      	movs	r2, #1
 80010fe:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001100:	f7ff fa5a 	bl	80005b8 <HAL_GetTick>
 8001104:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001106:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001108:	079b      	lsls	r3, r3, #30
 800110a:	d50d      	bpl.n	8001128 <HAL_RCC_OscConfig+0x178>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800110c:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8001110:	4b46      	ldr	r3, [pc, #280]	; (800122c <HAL_RCC_OscConfig+0x27c>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	fbb3 f3f2 	udiv	r3, r3, r2
 8001118:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 800111a:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 800111c:	9b01      	ldr	r3, [sp, #4]
 800111e:	1e5a      	subs	r2, r3, #1
 8001120:	9201      	str	r2, [sp, #4]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d1f9      	bne.n	800111a <HAL_RCC_OscConfig+0x16a>
 8001126:	e750      	b.n	8000fca <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001128:	f7ff fa46 	bl	80005b8 <HAL_GetTick>
 800112c:	1b80      	subs	r0, r0, r6
 800112e:	2802      	cmp	r0, #2
 8001130:	d9e9      	bls.n	8001106 <HAL_RCC_OscConfig+0x156>
 8001132:	e77f      	b.n	8001034 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8001134:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001136:	f7ff fa3f 	bl	80005b8 <HAL_GetTick>
 800113a:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800113c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800113e:	079f      	lsls	r7, r3, #30
 8001140:	f57f af43 	bpl.w	8000fca <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001144:	f7ff fa38 	bl	80005b8 <HAL_GetTick>
 8001148:	1b80      	subs	r0, r0, r6
 800114a:	2802      	cmp	r0, #2
 800114c:	d9f6      	bls.n	800113c <HAL_RCC_OscConfig+0x18c>
 800114e:	e771      	b.n	8001034 <HAL_RCC_OscConfig+0x84>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001150:	4c33      	ldr	r4, [pc, #204]	; (8001220 <HAL_RCC_OscConfig+0x270>)
 8001152:	69e3      	ldr	r3, [r4, #28]
 8001154:	00d8      	lsls	r0, r3, #3
 8001156:	d424      	bmi.n	80011a2 <HAL_RCC_OscConfig+0x1f2>
      pwrclkchanged = SET;
 8001158:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 800115a:	69e3      	ldr	r3, [r4, #28]
 800115c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001160:	61e3      	str	r3, [r4, #28]
 8001162:	69e3      	ldr	r3, [r4, #28]
 8001164:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001168:	9300      	str	r3, [sp, #0]
 800116a:	9b00      	ldr	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800116c:	4e30      	ldr	r6, [pc, #192]	; (8001230 <HAL_RCC_OscConfig+0x280>)
 800116e:	6833      	ldr	r3, [r6, #0]
 8001170:	05d9      	lsls	r1, r3, #23
 8001172:	d518      	bpl.n	80011a6 <HAL_RCC_OscConfig+0x1f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001174:	68eb      	ldr	r3, [r5, #12]
 8001176:	2b01      	cmp	r3, #1
 8001178:	d126      	bne.n	80011c8 <HAL_RCC_OscConfig+0x218>
 800117a:	6a23      	ldr	r3, [r4, #32]
 800117c:	f043 0301 	orr.w	r3, r3, #1
 8001180:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001182:	f7ff fa19 	bl	80005b8 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001186:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800118a:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800118c:	6a23      	ldr	r3, [r4, #32]
 800118e:	079b      	lsls	r3, r3, #30
 8001190:	d53f      	bpl.n	8001212 <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 8001192:	2f00      	cmp	r7, #0
 8001194:	f43f af1d 	beq.w	8000fd2 <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001198:	69e3      	ldr	r3, [r4, #28]
 800119a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800119e:	61e3      	str	r3, [r4, #28]
 80011a0:	e717      	b.n	8000fd2 <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 80011a2:	2700      	movs	r7, #0
 80011a4:	e7e2      	b.n	800116c <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80011a6:	6833      	ldr	r3, [r6, #0]
 80011a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011ac:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80011ae:	f7ff fa03 	bl	80005b8 <HAL_GetTick>
 80011b2:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011b4:	6833      	ldr	r3, [r6, #0]
 80011b6:	05da      	lsls	r2, r3, #23
 80011b8:	d4dc      	bmi.n	8001174 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80011ba:	f7ff f9fd 	bl	80005b8 <HAL_GetTick>
 80011be:	eba0 0008 	sub.w	r0, r0, r8
 80011c2:	2864      	cmp	r0, #100	; 0x64
 80011c4:	d9f6      	bls.n	80011b4 <HAL_RCC_OscConfig+0x204>
 80011c6:	e735      	b.n	8001034 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011c8:	b9ab      	cbnz	r3, 80011f6 <HAL_RCC_OscConfig+0x246>
 80011ca:	6a23      	ldr	r3, [r4, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80011cc:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011d0:	f023 0301 	bic.w	r3, r3, #1
 80011d4:	6223      	str	r3, [r4, #32]
 80011d6:	6a23      	ldr	r3, [r4, #32]
 80011d8:	f023 0304 	bic.w	r3, r3, #4
 80011dc:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80011de:	f7ff f9eb 	bl	80005b8 <HAL_GetTick>
 80011e2:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011e4:	6a23      	ldr	r3, [r4, #32]
 80011e6:	0798      	lsls	r0, r3, #30
 80011e8:	d5d3      	bpl.n	8001192 <HAL_RCC_OscConfig+0x1e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80011ea:	f7ff f9e5 	bl	80005b8 <HAL_GetTick>
 80011ee:	1b80      	subs	r0, r0, r6
 80011f0:	4540      	cmp	r0, r8
 80011f2:	d9f7      	bls.n	80011e4 <HAL_RCC_OscConfig+0x234>
 80011f4:	e71e      	b.n	8001034 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011f6:	2b05      	cmp	r3, #5
 80011f8:	6a23      	ldr	r3, [r4, #32]
 80011fa:	d103      	bne.n	8001204 <HAL_RCC_OscConfig+0x254>
 80011fc:	f043 0304 	orr.w	r3, r3, #4
 8001200:	6223      	str	r3, [r4, #32]
 8001202:	e7ba      	b.n	800117a <HAL_RCC_OscConfig+0x1ca>
 8001204:	f023 0301 	bic.w	r3, r3, #1
 8001208:	6223      	str	r3, [r4, #32]
 800120a:	6a23      	ldr	r3, [r4, #32]
 800120c:	f023 0304 	bic.w	r3, r3, #4
 8001210:	e7b6      	b.n	8001180 <HAL_RCC_OscConfig+0x1d0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001212:	f7ff f9d1 	bl	80005b8 <HAL_GetTick>
 8001216:	eba0 0008 	sub.w	r0, r0, r8
 800121a:	42b0      	cmp	r0, r6
 800121c:	d9b6      	bls.n	800118c <HAL_RCC_OscConfig+0x1dc>
 800121e:	e709      	b.n	8001034 <HAL_RCC_OscConfig+0x84>
 8001220:	40021000 	.word	0x40021000
 8001224:	42420000 	.word	0x42420000
 8001228:	42420480 	.word	0x42420480
 800122c:	20000000 	.word	0x20000000
 8001230:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001234:	4c22      	ldr	r4, [pc, #136]	; (80012c0 <HAL_RCC_OscConfig+0x310>)
 8001236:	6863      	ldr	r3, [r4, #4]
 8001238:	f003 030c 	and.w	r3, r3, #12
 800123c:	2b08      	cmp	r3, #8
 800123e:	f43f aee2 	beq.w	8001006 <HAL_RCC_OscConfig+0x56>
 8001242:	2300      	movs	r3, #0
 8001244:	4e1f      	ldr	r6, [pc, #124]	; (80012c4 <HAL_RCC_OscConfig+0x314>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001246:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8001248:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800124a:	d12b      	bne.n	80012a4 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 800124c:	f7ff f9b4 	bl	80005b8 <HAL_GetTick>
 8001250:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001252:	6823      	ldr	r3, [r4, #0]
 8001254:	0199      	lsls	r1, r3, #6
 8001256:	d41f      	bmi.n	8001298 <HAL_RCC_OscConfig+0x2e8>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001258:	6a2b      	ldr	r3, [r5, #32]
 800125a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800125e:	d105      	bne.n	800126c <HAL_RCC_OscConfig+0x2bc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001260:	6862      	ldr	r2, [r4, #4]
 8001262:	68a9      	ldr	r1, [r5, #8]
 8001264:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8001268:	430a      	orrs	r2, r1
 800126a:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800126c:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800126e:	6862      	ldr	r2, [r4, #4]
 8001270:	430b      	orrs	r3, r1
 8001272:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8001276:	4313      	orrs	r3, r2
 8001278:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 800127a:	2301      	movs	r3, #1
 800127c:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 800127e:	f7ff f99b 	bl	80005b8 <HAL_GetTick>
 8001282:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001284:	6823      	ldr	r3, [r4, #0]
 8001286:	019a      	lsls	r2, r3, #6
 8001288:	f53f aea7 	bmi.w	8000fda <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800128c:	f7ff f994 	bl	80005b8 <HAL_GetTick>
 8001290:	1b40      	subs	r0, r0, r5
 8001292:	2802      	cmp	r0, #2
 8001294:	d9f6      	bls.n	8001284 <HAL_RCC_OscConfig+0x2d4>
 8001296:	e6cd      	b.n	8001034 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001298:	f7ff f98e 	bl	80005b8 <HAL_GetTick>
 800129c:	1bc0      	subs	r0, r0, r7
 800129e:	2802      	cmp	r0, #2
 80012a0:	d9d7      	bls.n	8001252 <HAL_RCC_OscConfig+0x2a2>
 80012a2:	e6c7      	b.n	8001034 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 80012a4:	f7ff f988 	bl	80005b8 <HAL_GetTick>
 80012a8:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012aa:	6823      	ldr	r3, [r4, #0]
 80012ac:	019b      	lsls	r3, r3, #6
 80012ae:	f57f ae94 	bpl.w	8000fda <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012b2:	f7ff f981 	bl	80005b8 <HAL_GetTick>
 80012b6:	1b40      	subs	r0, r0, r5
 80012b8:	2802      	cmp	r0, #2
 80012ba:	d9f6      	bls.n	80012aa <HAL_RCC_OscConfig+0x2fa>
 80012bc:	e6ba      	b.n	8001034 <HAL_RCC_OscConfig+0x84>
 80012be:	bf00      	nop
 80012c0:	40021000 	.word	0x40021000
 80012c4:	42420060 	.word	0x42420060

080012c8 <HAL_RCC_GetSysClockFreq>:
{
 80012c8:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80012ca:	4b19      	ldr	r3, [pc, #100]	; (8001330 <HAL_RCC_GetSysClockFreq+0x68>)
{
 80012cc:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80012ce:	ac02      	add	r4, sp, #8
 80012d0:	f103 0510 	add.w	r5, r3, #16
 80012d4:	4622      	mov	r2, r4
 80012d6:	6818      	ldr	r0, [r3, #0]
 80012d8:	6859      	ldr	r1, [r3, #4]
 80012da:	3308      	adds	r3, #8
 80012dc:	c203      	stmia	r2!, {r0, r1}
 80012de:	42ab      	cmp	r3, r5
 80012e0:	4614      	mov	r4, r2
 80012e2:	d1f7      	bne.n	80012d4 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80012e4:	2301      	movs	r3, #1
 80012e6:	f88d 3004 	strb.w	r3, [sp, #4]
 80012ea:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 80012ec:	4911      	ldr	r1, [pc, #68]	; (8001334 <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80012ee:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 80012f2:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80012f4:	f003 020c 	and.w	r2, r3, #12
 80012f8:	2a08      	cmp	r2, #8
 80012fa:	d117      	bne.n	800132c <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80012fc:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8001300:	a806      	add	r0, sp, #24
 8001302:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001304:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001306:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800130a:	d50c      	bpl.n	8001326 <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800130c:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800130e:	480a      	ldr	r0, [pc, #40]	; (8001338 <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001310:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001314:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001316:	aa06      	add	r2, sp, #24
 8001318:	4413      	add	r3, r2
 800131a:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800131e:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8001322:	b007      	add	sp, #28
 8001324:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001326:	4805      	ldr	r0, [pc, #20]	; (800133c <HAL_RCC_GetSysClockFreq+0x74>)
 8001328:	4350      	muls	r0, r2
 800132a:	e7fa      	b.n	8001322 <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 800132c:	4802      	ldr	r0, [pc, #8]	; (8001338 <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 800132e:	e7f8      	b.n	8001322 <HAL_RCC_GetSysClockFreq+0x5a>
 8001330:	080014f4 	.word	0x080014f4
 8001334:	40021000 	.word	0x40021000
 8001338:	007a1200 	.word	0x007a1200
 800133c:	003d0900 	.word	0x003d0900

08001340 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001340:	4a4d      	ldr	r2, [pc, #308]	; (8001478 <HAL_RCC_ClockConfig+0x138>)
{
 8001342:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001346:	6813      	ldr	r3, [r2, #0]
{
 8001348:	4605      	mov	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800134a:	f003 0307 	and.w	r3, r3, #7
 800134e:	428b      	cmp	r3, r1
{
 8001350:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001352:	d328      	bcc.n	80013a6 <HAL_RCC_ClockConfig+0x66>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001354:	682a      	ldr	r2, [r5, #0]
 8001356:	0791      	lsls	r1, r2, #30
 8001358:	d432      	bmi.n	80013c0 <HAL_RCC_ClockConfig+0x80>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800135a:	07d2      	lsls	r2, r2, #31
 800135c:	d438      	bmi.n	80013d0 <HAL_RCC_ClockConfig+0x90>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 800135e:	4a46      	ldr	r2, [pc, #280]	; (8001478 <HAL_RCC_ClockConfig+0x138>)
 8001360:	6813      	ldr	r3, [r2, #0]
 8001362:	f003 0307 	and.w	r3, r3, #7
 8001366:	429e      	cmp	r6, r3
 8001368:	d373      	bcc.n	8001452 <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800136a:	682a      	ldr	r2, [r5, #0]
 800136c:	4c43      	ldr	r4, [pc, #268]	; (800147c <HAL_RCC_ClockConfig+0x13c>)
 800136e:	f012 0f04 	tst.w	r2, #4
 8001372:	d179      	bne.n	8001468 <HAL_RCC_ClockConfig+0x128>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001374:	0713      	lsls	r3, r2, #28
 8001376:	d506      	bpl.n	8001386 <HAL_RCC_ClockConfig+0x46>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001378:	6863      	ldr	r3, [r4, #4]
 800137a:	692a      	ldr	r2, [r5, #16]
 800137c:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001380:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001384:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001386:	f7ff ff9f 	bl	80012c8 <HAL_RCC_GetSysClockFreq>
 800138a:	6863      	ldr	r3, [r4, #4]
 800138c:	4a3c      	ldr	r2, [pc, #240]	; (8001480 <HAL_RCC_ClockConfig+0x140>)
 800138e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001392:	5cd3      	ldrb	r3, [r2, r3]
 8001394:	40d8      	lsrs	r0, r3
 8001396:	4b3b      	ldr	r3, [pc, #236]	; (8001484 <HAL_RCC_ClockConfig+0x144>)
 8001398:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800139a:	2000      	movs	r0, #0
 800139c:	f7ff f8ca 	bl	8000534 <HAL_InitTick>
  return HAL_OK;
 80013a0:	2000      	movs	r0, #0
}
 80013a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013a6:	6813      	ldr	r3, [r2, #0]
 80013a8:	f023 0307 	bic.w	r3, r3, #7
 80013ac:	430b      	orrs	r3, r1
 80013ae:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80013b0:	6813      	ldr	r3, [r2, #0]
 80013b2:	f003 0307 	and.w	r3, r3, #7
 80013b6:	4299      	cmp	r1, r3
 80013b8:	d0cc      	beq.n	8001354 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 80013ba:	2001      	movs	r0, #1
 80013bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80013c0:	492e      	ldr	r1, [pc, #184]	; (800147c <HAL_RCC_ClockConfig+0x13c>)
 80013c2:	68a8      	ldr	r0, [r5, #8]
 80013c4:	684b      	ldr	r3, [r1, #4]
 80013c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80013ca:	4303      	orrs	r3, r0
 80013cc:	604b      	str	r3, [r1, #4]
 80013ce:	e7c4      	b.n	800135a <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80013d0:	686a      	ldr	r2, [r5, #4]
 80013d2:	4c2a      	ldr	r4, [pc, #168]	; (800147c <HAL_RCC_ClockConfig+0x13c>)
 80013d4:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013d6:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80013d8:	d11c      	bne.n	8001414 <HAL_RCC_ClockConfig+0xd4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013da:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013de:	d0ec      	beq.n	80013ba <HAL_RCC_ClockConfig+0x7a>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80013e0:	6863      	ldr	r3, [r4, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80013e2:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80013e6:	f023 0303 	bic.w	r3, r3, #3
 80013ea:	4313      	orrs	r3, r2
 80013ec:	6063      	str	r3, [r4, #4]
    tickstart = HAL_GetTick();
 80013ee:	f7ff f8e3 	bl	80005b8 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80013f2:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 80013f4:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80013f6:	2b01      	cmp	r3, #1
 80013f8:	d114      	bne.n	8001424 <HAL_RCC_ClockConfig+0xe4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80013fa:	6863      	ldr	r3, [r4, #4]
 80013fc:	f003 030c 	and.w	r3, r3, #12
 8001400:	2b04      	cmp	r3, #4
 8001402:	d0ac      	beq.n	800135e <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001404:	f7ff f8d8 	bl	80005b8 <HAL_GetTick>
 8001408:	1bc0      	subs	r0, r0, r7
 800140a:	4540      	cmp	r0, r8
 800140c:	d9f5      	bls.n	80013fa <HAL_RCC_ClockConfig+0xba>
          return HAL_TIMEOUT;
 800140e:	2003      	movs	r0, #3
 8001410:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001414:	2a02      	cmp	r2, #2
 8001416:	d102      	bne.n	800141e <HAL_RCC_ClockConfig+0xde>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001418:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800141c:	e7df      	b.n	80013de <HAL_RCC_ClockConfig+0x9e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800141e:	f013 0f02 	tst.w	r3, #2
 8001422:	e7dc      	b.n	80013de <HAL_RCC_ClockConfig+0x9e>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001424:	2b02      	cmp	r3, #2
 8001426:	d10f      	bne.n	8001448 <HAL_RCC_ClockConfig+0x108>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001428:	6863      	ldr	r3, [r4, #4]
 800142a:	f003 030c 	and.w	r3, r3, #12
 800142e:	2b08      	cmp	r3, #8
 8001430:	d095      	beq.n	800135e <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001432:	f7ff f8c1 	bl	80005b8 <HAL_GetTick>
 8001436:	1bc0      	subs	r0, r0, r7
 8001438:	4540      	cmp	r0, r8
 800143a:	d9f5      	bls.n	8001428 <HAL_RCC_ClockConfig+0xe8>
 800143c:	e7e7      	b.n	800140e <HAL_RCC_ClockConfig+0xce>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800143e:	f7ff f8bb 	bl	80005b8 <HAL_GetTick>
 8001442:	1bc0      	subs	r0, r0, r7
 8001444:	4540      	cmp	r0, r8
 8001446:	d8e2      	bhi.n	800140e <HAL_RCC_ClockConfig+0xce>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001448:	6863      	ldr	r3, [r4, #4]
 800144a:	f013 0f0c 	tst.w	r3, #12
 800144e:	d1f6      	bne.n	800143e <HAL_RCC_ClockConfig+0xfe>
 8001450:	e785      	b.n	800135e <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001452:	6813      	ldr	r3, [r2, #0]
 8001454:	f023 0307 	bic.w	r3, r3, #7
 8001458:	4333      	orrs	r3, r6
 800145a:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800145c:	6813      	ldr	r3, [r2, #0]
 800145e:	f003 0307 	and.w	r3, r3, #7
 8001462:	429e      	cmp	r6, r3
 8001464:	d1a9      	bne.n	80013ba <HAL_RCC_ClockConfig+0x7a>
 8001466:	e780      	b.n	800136a <HAL_RCC_ClockConfig+0x2a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001468:	6863      	ldr	r3, [r4, #4]
 800146a:	68e9      	ldr	r1, [r5, #12]
 800146c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001470:	430b      	orrs	r3, r1
 8001472:	6063      	str	r3, [r4, #4]
 8001474:	e77e      	b.n	8001374 <HAL_RCC_ClockConfig+0x34>
 8001476:	bf00      	nop
 8001478:	40022000 	.word	0x40022000
 800147c:	40021000 	.word	0x40021000
 8001480:	08001517 	.word	0x08001517
 8001484:	20000000 	.word	0x20000000

08001488 <HAL_RCC_GetHCLKFreq>:
}
 8001488:	4b01      	ldr	r3, [pc, #4]	; (8001490 <HAL_RCC_GetHCLKFreq+0x8>)
 800148a:	6818      	ldr	r0, [r3, #0]
 800148c:	4770      	bx	lr
 800148e:	bf00      	nop
 8001490:	20000000 	.word	0x20000000

08001494 <__libc_init_array>:
 8001494:	b570      	push	{r4, r5, r6, lr}
 8001496:	2500      	movs	r5, #0
 8001498:	4e0c      	ldr	r6, [pc, #48]	; (80014cc <__libc_init_array+0x38>)
 800149a:	4c0d      	ldr	r4, [pc, #52]	; (80014d0 <__libc_init_array+0x3c>)
 800149c:	1ba4      	subs	r4, r4, r6
 800149e:	10a4      	asrs	r4, r4, #2
 80014a0:	42a5      	cmp	r5, r4
 80014a2:	d109      	bne.n	80014b8 <__libc_init_array+0x24>
 80014a4:	f000 f81a 	bl	80014dc <_init>
 80014a8:	2500      	movs	r5, #0
 80014aa:	4e0a      	ldr	r6, [pc, #40]	; (80014d4 <__libc_init_array+0x40>)
 80014ac:	4c0a      	ldr	r4, [pc, #40]	; (80014d8 <__libc_init_array+0x44>)
 80014ae:	1ba4      	subs	r4, r4, r6
 80014b0:	10a4      	asrs	r4, r4, #2
 80014b2:	42a5      	cmp	r5, r4
 80014b4:	d105      	bne.n	80014c2 <__libc_init_array+0x2e>
 80014b6:	bd70      	pop	{r4, r5, r6, pc}
 80014b8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80014bc:	4798      	blx	r3
 80014be:	3501      	adds	r5, #1
 80014c0:	e7ee      	b.n	80014a0 <__libc_init_array+0xc>
 80014c2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80014c6:	4798      	blx	r3
 80014c8:	3501      	adds	r5, #1
 80014ca:	e7f2      	b.n	80014b2 <__libc_init_array+0x1e>
 80014cc:	08001528 	.word	0x08001528
 80014d0:	08001528 	.word	0x08001528
 80014d4:	08001528 	.word	0x08001528
 80014d8:	0800152c 	.word	0x0800152c

080014dc <_init>:
 80014dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014de:	bf00      	nop
 80014e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80014e2:	bc08      	pop	{r3}
 80014e4:	469e      	mov	lr, r3
 80014e6:	4770      	bx	lr

080014e8 <_fini>:
 80014e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014ea:	bf00      	nop
 80014ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80014ee:	bc08      	pop	{r3}
 80014f0:	469e      	mov	lr, r3
 80014f2:	4770      	bx	lr
